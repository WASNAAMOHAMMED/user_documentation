{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"figshare Documentation The definite guide for figshare and the home of all user documentation. The sources for these pages are publicly hosted on github at figshare/user_documentation and it's open for contributions. If you feel you can improve anything, fix a mistake, expand on a topic, feel free to open up a pull request . Try the new Open API documentation Quick links Get started with OAuth Using the API OAI-PMH Search Statistics","title":"figshare Documentation"},{"location":"#figshare-documentation","text":"The definite guide for figshare and the home of all user documentation. The sources for these pages are publicly hosted on github at figshare/user_documentation and it's open for contributions. If you feel you can improve anything, fix a mistake, expand on a topic, feel free to open up a pull request .","title":"figshare Documentation"},{"location":"#try-the-new-open-api-documentation","text":"","title":"Try the new Open API documentation"},{"location":"#quick-links","text":"Get started with OAuth Using the API OAI-PMH Search Statistics","title":"Quick links"},{"location":"oauth/","text":"OAuth Since January 2016 figshare supports the OAuth 2.0 Authorization Framework . If you're new to OAuth make sure you have at least a basic understanding before moving on. Quick guide To receive a client id and secret you need to register an application in our system. You can easily do this from the figshare applications page in your account. Authorization endpoint The authorization endpoint is located at https://figshare.com/account/applications/authorize . The endpoint supports both authorization code grant and implicit grant . Request params client_id response_type scope state redirect_uri Response params User is redirected back to redirect_uri with the following params added to the query: Success as described in rfc6749#section-4.1.2 or rfc6749#section-4.2.2 : code state Error as described in rfc6749#4.1.2.1 : error error_description Token endpoint The token endpoint is located at https://api.figshare.com/v2/token . In order to receive an access token you need to make a POST request. To get info about an existing access token use the GET method with the usual authorization means. Request Then endpoint accepts both application/x-www-form-urlencoded and application/json content types. It will only respond with JSON content. client_id client_secret grant_type and, based on the value of grant_type : code refresh_token username password Response Successful responses are always 200 and failed ones are always 400 , even for failed authorization. Success response is a JSON as described in http://tools.ietf.org/html/rfc6749#section-5.1 . access_token token_type expires_in refresh_token scope - not available yet Error response as described in rfc6749#section-5.2 Scope Currently the only scope available is all which grants full access to the resource owner's data. We're working on a more flexible approach. Grant Types The supported grant types at this moment are: authorization_code refresh_token password","title":"OAuth"},{"location":"oauth/#oauth","text":"Since January 2016 figshare supports the OAuth 2.0 Authorization Framework . If you're new to OAuth make sure you have at least a basic understanding before moving on.","title":"OAuth"},{"location":"oauth/#quick-guide","text":"To receive a client id and secret you need to register an application in our system. You can easily do this from the figshare applications page in your account.","title":"Quick guide"},{"location":"oauth/#authorization-endpoint","text":"The authorization endpoint is located at https://figshare.com/account/applications/authorize . The endpoint supports both authorization code grant and implicit grant .","title":"Authorization endpoint"},{"location":"oauth/#request-params","text":"client_id response_type scope state redirect_uri","title":"Request params"},{"location":"oauth/#response-params","text":"User is redirected back to redirect_uri with the following params added to the query: Success as described in rfc6749#section-4.1.2 or rfc6749#section-4.2.2 : code state Error as described in rfc6749#4.1.2.1 : error error_description","title":"Response params"},{"location":"oauth/#token-endpoint","text":"The token endpoint is located at https://api.figshare.com/v2/token . In order to receive an access token you need to make a POST request. To get info about an existing access token use the GET method with the usual authorization means.","title":"Token endpoint"},{"location":"oauth/#request","text":"Then endpoint accepts both application/x-www-form-urlencoded and application/json content types. It will only respond with JSON content. client_id client_secret grant_type and, based on the value of grant_type : code refresh_token username password","title":"Request"},{"location":"oauth/#response","text":"Successful responses are always 200 and failed ones are always 400 , even for failed authorization. Success response is a JSON as described in http://tools.ietf.org/html/rfc6749#section-5.1 . access_token token_type expires_in refresh_token scope - not available yet Error response as described in rfc6749#section-5.2","title":"Response"},{"location":"oauth/#scope","text":"Currently the only scope available is all which grants full access to the resource owner's data. We're working on a more flexible approach.","title":"Scope"},{"location":"oauth/#grant-types","text":"The supported grant types at this moment are: authorization_code refresh_token password","title":"Grant Types"},{"location":"OAI-PMH/","text":"OAI-PMH fig share supports the Open Archives Initiative (OAI) and implements the OAI-PMH service to provide access to public articles metadata. For more detailed information, please refer to the protocol specification . Base URL fig share OAI-PMH v2.0 implementation has at the following baseURL : https://api.figshare.com/v2/oai Item == Article An Item in the OAI-PMH interface is the most recent version of an article. Metadata formats Currently, the supported formats are: Dublin Core ( oai_dc ), Datacite ( oai_datacite ), RDF ( rdf ), CERIF XML ( cerif ), and Qualified Dublin Core ( qdc ) (hasPart support). Datestamps Every record has a datestamp which is the published datetime of that article. The earliest datestamp is given in the earliestDatestamp element of the Identify response. Sets You can get a list of all the sets supported with the ListSets verb. At this moment selectieve harvesting can be performed using sets representing: an item type ... header identifier oai:figshare.com:article/2001969 /identifier datestamp 2015-08-17T14:09:33Z /datestamp setSpec category_184 /setSpec setSpec category_185 /setSpec setSpec portal_15 /setSpec setSpec item_type_7 /setSpec /header ... a portal/institution ... header identifier oai:figshare.com:article/2009490 /identifier datestamp 2015-12-16T14:30:27Z /datestamp setSpec category_1 /setSpec setSpec category_4 /setSpec setSpec category_12 /setSpec setSpec category_14 /setSpec setSpec category_19 /setSpec setSpec category_21 /setSpec setSpec category_128 /setSpec setSpec category_133 /setSpec setSpec category_272 /setSpec setSpec category_873 /setSpec setSpec category_931 /setSpec setSpec portal_63 /setSpec setSpec item_type_6 /setSpec /header ... a category : ... header identifier oai:figshare.com:article/2058654 /identifier datestamp 2015-12-27T23:40:01Z /datestamp setSpec category_54 /setSpec setSpec category_55 /setSpec setSpec category_56 /setSpec setSpec category_57 /setSpec setSpec category_58 /setSpec setSpec category_59 /setSpec setSpec category_145 /setSpec setSpec category_146 /setSpec setSpec category_147 /setSpec setSpec category_148 /setSpec setSpec category_149 /setSpec setSpec category_150 /setSpec setSpec category_492 /setSpec setSpec category_493 /setSpec setSpec category_494 /setSpec setSpec category_496 /setSpec setSpec category_497 /setSpec setSpec category_498 /setSpec setSpec category_499 /setSpec setSpec category_500 /setSpec setSpec category_501 /setSpec setSpec category_502 /setSpec setSpec item_type_6 /setSpec /header ... or a month_year : ... header identifier oai:figshare.com:article/2004335 /identifier datestamp 2016-10-31T11:14:47Z /datestamp setSpec category_215 /setSpec setSpec category_239 /setSpec setSpec portal_15 /setSpec setSpec item_type_11 /setSpec /header ... Update schedule Usually, metadata for a published article becomes available in a few moments after its publication on fig share . Pagination Resumption Token Expiration Results for ListSets , ListIdentifiers , ListRecords are paginated. To request the next page, use the resumptionToken value provided for the current page. You can read more here , but your harvesting software system should be able to use resumption tokens with no problem. One particularity on fig share OAI-PMH is the expiration datetime (UTC) for resumption tokens. Thus, a token expires after 5 minutes. Rate limit Currently no rate limiting is implemented. We recommend you to make no more than one request per second. Future development Please let us know that you are harvesting us. Your input will drive the future development of the OAI-PMH protocol at figshare. Some examples Identify curl https://api.figshare.com/v2/oai?verb=Identify ?xml version='1.0' encoding='utf-8'? ?xml-stylesheet type=\"text/xsl\" href=\"/v2/static/oai2.xsl\"? OAI-PMH xmlns=\"http://www.openarchives.org/OAI/2.0/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd\" responseDate 2016-04-29T11:58:28Z /responseDate request verb=\"Identify\" https://api.figshare.com/v2/oai /request Identify repositoryName figshare /repositoryName baseURL https://api.figshare.com/v2/oai /baseURL protocolVersion 2.0 /protocolVersion adminEmail info@figshare.com /adminEmail earliestDatestamp 2010-01-08T01:24:54Z /earliestDatestamp deletedRecord transient /deletedRecord granularity YYYY-MM-DDThh:mm:ssZ /granularity /Identify /OAI-PMH ListSets curl https://api.figshare.com/v2/oai?verb=ListSets ?xml version='1.0' encoding='utf-8'? ?xml-stylesheet type=\"text/xsl\" href=\"/v2/static/oai2.xsl\"? OAI-PMH xmlns=\"http://www.openarchives.org/OAI/2.0/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd\" responseDate 2016-04-29T12:00:46Z /responseDate request verb=\"ListSets\" https://api.figshare.com/v2/oai /request ListSets set setSpec portal_147 /setSpec setName Karger Publishers /setName /set set setSpec portal_144 /setSpec setName Digital Science /setName /set !-- ... -- set setSpec portal_102 /setSpec setName Wiley /setName /set resumptionToken expirationDate=\"2016-04-29T13:00:46Z\" dmVyYj1MaXN0U2V0cyZwYWdlPTI= /resumptionToken /ListSets /OAI-PMH ListIdentifiers Selective harvesting: using set category_539 (Chemical Engineering Design). curl \"https://api.figshare.com/v2/oai?verb=ListIdentifiers metadataPrefix=oai_dc set=category_539\" ?xml version='1.0' encoding='utf-8'? ?xml-stylesheet type=\"text/xsl\" href=\"/v2/static/oai2.xsl\"? OAI-PMH xmlns=\"http://www.openarchives.org/OAI/2.0/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd\" responseDate 2016-04-29T12:11:18Z /responseDate request metadataPrefix=\"oai_dc\" set=\"category_539\" verb=\"ListIdentifiers\" https://api.figshare.com/v2/oai /request ListIdentifiers header identifier oai:figshare.com:article/2060079 /identifier datestamp 2016-01-04T08:32:32Z /datestamp setSpec category_539 /setSpec setSpec category_614 /setSpec setSpec category_1094 /setSpec setSpec category_1100 /setSpec setSpec item_type_6 /setSpec /header /ListIdentifiers /OAI-PMH ListRecords Selective harvesting: only articles published until 2010-08-18T08:33:01Z. curl \"https://api.figshare.com/v2/oai?verb=ListRecords metadataPrefix=oai_dc until=2010-08-18T08:33:01Z\" ?xml version='1.0' encoding='utf-8'? ?xml-stylesheet type=\"text/xsl\" href=\"/v2/static/oai2.xsl\"? OAI-PMH xmlns=\"http://www.openarchives.org/OAI/2.0/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd\" responseDate 2016-09-29T08:03:12Z /responseDate request metadataPrefix=\"oai_dc\" until=\"2010-08-18T08:33:01Z\" verb=\"ListRecords\" https://api.figshare.com/v2/oai /request ListRecords record header identifier oai:figshare.com:article/145088 /identifier datestamp 2010-01-08T01:24:54Z /datestamp setSpec category_4 /setSpec setSpec category_12 /setSpec setSpec portal_5 /setSpec setSpec item_type_3 /setSpec /header metadata oai_dc:dc xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:dc=\"http://purl.org/dc/terms/\" xmlns:oai_dc=\"http://www.openarchives.org/OAI/2.0/oai_dc/\" xsi:schemaLocation=\"http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd\" dc:title A Modular BAM Complex in the Outer Membrane of the \u03b1-Proteobacterium lt;em gt;Caulobacter crescentus lt;/em gt; /dc:title dc:creator Anthony W. Purcell (105036) /dc:creator dc:creator Trevor Lithgow (105055) /dc:creator dc:creator Kipros Gabriel (189246) /dc:creator dc:creator Nicholas Noinaj (216256) /dc:creator dc:creator Sebastian Poggio (251019) /dc:creator dc:creator Khatira Anwari (254980) /dc:creator dc:creator Andrew Perry (254989) /dc:creator dc:creator Xenia Gatsos (254994) /dc:creator dc:creator Sri Harsha Ramarathinam (255001) /dc:creator dc:creator Nicholas A. Williamson (255006) /dc:creator dc:creator Susan Buchanan (255012) /dc:creator dc:creator Christine Jacobs-Wagner (255016) /dc:creator dc:subject Biochemistry /dc:subject dc:subject Cell Biology /dc:subject dc:subject modular /dc:subject dc:subject bam /dc:subject dc:subject membrane /dc:subject dc:description lt;div gt; lt;p gt;Mitochondria are organelles derived from an intracellular \u03b1-proteobacterium. The biogenesis of mitochondria relies on the assembly of \u03b2-barrel proteins into the mitochondrial outer membrane, a process inherited from the bacterial ancestor. lt;em gt;Caulobacter crescentus lt;/em gt; is an \u03b1-proteobacterium, and the BAM (\u03b2-barrel assembly machinery) complex was purified and characterized from this model organism. Like the mitochondrial sorting and assembly machinery complex, we find the BAM complex to be modular in nature. A \u223c150 kDa core BAM complex containing BamA, BamB, BamD, and BamE associates with additional modules in the outer membrane. One of these modules, Pal, is a lipoprotein that provides a means for anchorage to the peptidoglycan layer of the cell wall. We suggest the modular design of the BAM complex facilitates access to substrates from the protein translocase in the inner membrane. lt;/p gt; lt;/div gt; /dc:description dc:date 2010-01-08T01:24:48Z /dc:date dc:type Dataset /dc:type dc:identifier 10.1371/journal.pone.0008619 /dc:identifier dc:relation https://figshare.com/articles/A_Modular_BAM_Complex_in_the_Outer_Membrane_of_the_Proteobacterium_em_Caulobacter_crescentus_em_/145088 /dc:relation dc:rights CC BY /dc:rights /oai_dc:dc /metadata /record /ListRecords /OAI-PMH Changes May, 2016 Initial release of OAI-PMH API July, 2016 Datacite and RDF Metadata Formats are added August, 2016 Keywords and Licences tags are added October, 2016 Add correct output for ListIdentifiers Add month_year set / param Add user IDs in the tags November, 2016 CERIF XML Metadata Format was added","title":"OAI-PMH"},{"location":"OAI-PMH/#oai-pmh","text":"fig share supports the Open Archives Initiative (OAI) and implements the OAI-PMH service to provide access to public articles metadata. For more detailed information, please refer to the protocol specification .","title":"OAI-PMH"},{"location":"OAI-PMH/#base-url","text":"fig share OAI-PMH v2.0 implementation has at the following baseURL : https://api.figshare.com/v2/oai","title":"Base URL"},{"location":"OAI-PMH/#item-article","text":"An Item in the OAI-PMH interface is the most recent version of an article.","title":"Item == Article"},{"location":"OAI-PMH/#metadata-formats","text":"Currently, the supported formats are: Dublin Core ( oai_dc ), Datacite ( oai_datacite ), RDF ( rdf ), CERIF XML ( cerif ), and Qualified Dublin Core ( qdc ) (hasPart support).","title":"Metadata formats"},{"location":"OAI-PMH/#datestamps","text":"Every record has a datestamp which is the published datetime of that article. The earliest datestamp is given in the earliestDatestamp element of the Identify response.","title":"Datestamps"},{"location":"OAI-PMH/#sets","text":"You can get a list of all the sets supported with the ListSets verb. At this moment selectieve harvesting can be performed using sets representing: an item type ... header identifier oai:figshare.com:article/2001969 /identifier datestamp 2015-08-17T14:09:33Z /datestamp setSpec category_184 /setSpec setSpec category_185 /setSpec setSpec portal_15 /setSpec setSpec item_type_7 /setSpec /header ... a portal/institution ... header identifier oai:figshare.com:article/2009490 /identifier datestamp 2015-12-16T14:30:27Z /datestamp setSpec category_1 /setSpec setSpec category_4 /setSpec setSpec category_12 /setSpec setSpec category_14 /setSpec setSpec category_19 /setSpec setSpec category_21 /setSpec setSpec category_128 /setSpec setSpec category_133 /setSpec setSpec category_272 /setSpec setSpec category_873 /setSpec setSpec category_931 /setSpec setSpec portal_63 /setSpec setSpec item_type_6 /setSpec /header ... a category : ... header identifier oai:figshare.com:article/2058654 /identifier datestamp 2015-12-27T23:40:01Z /datestamp setSpec category_54 /setSpec setSpec category_55 /setSpec setSpec category_56 /setSpec setSpec category_57 /setSpec setSpec category_58 /setSpec setSpec category_59 /setSpec setSpec category_145 /setSpec setSpec category_146 /setSpec setSpec category_147 /setSpec setSpec category_148 /setSpec setSpec category_149 /setSpec setSpec category_150 /setSpec setSpec category_492 /setSpec setSpec category_493 /setSpec setSpec category_494 /setSpec setSpec category_496 /setSpec setSpec category_497 /setSpec setSpec category_498 /setSpec setSpec category_499 /setSpec setSpec category_500 /setSpec setSpec category_501 /setSpec setSpec category_502 /setSpec setSpec item_type_6 /setSpec /header ... or a month_year : ... header identifier oai:figshare.com:article/2004335 /identifier datestamp 2016-10-31T11:14:47Z /datestamp setSpec category_215 /setSpec setSpec category_239 /setSpec setSpec portal_15 /setSpec setSpec item_type_11 /setSpec /header ...","title":"Sets"},{"location":"OAI-PMH/#update-schedule","text":"Usually, metadata for a published article becomes available in a few moments after its publication on fig share .","title":"Update schedule"},{"location":"OAI-PMH/#pagination-resumption-token-expiration","text":"Results for ListSets , ListIdentifiers , ListRecords are paginated. To request the next page, use the resumptionToken value provided for the current page. You can read more here , but your harvesting software system should be able to use resumption tokens with no problem. One particularity on fig share OAI-PMH is the expiration datetime (UTC) for resumption tokens. Thus, a token expires after 5 minutes.","title":"Pagination &amp; Resumption Token Expiration"},{"location":"OAI-PMH/#rate-limit","text":"Currently no rate limiting is implemented. We recommend you to make no more than one request per second.","title":"Rate limit"},{"location":"OAI-PMH/#future-development","text":"Please let us know that you are harvesting us. Your input will drive the future development of the OAI-PMH protocol at figshare.","title":"Future development"},{"location":"OAI-PMH/#some-examples","text":"Identify curl https://api.figshare.com/v2/oai?verb=Identify ?xml version='1.0' encoding='utf-8'? ?xml-stylesheet type=\"text/xsl\" href=\"/v2/static/oai2.xsl\"? OAI-PMH xmlns=\"http://www.openarchives.org/OAI/2.0/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd\" responseDate 2016-04-29T11:58:28Z /responseDate request verb=\"Identify\" https://api.figshare.com/v2/oai /request Identify repositoryName figshare /repositoryName baseURL https://api.figshare.com/v2/oai /baseURL protocolVersion 2.0 /protocolVersion adminEmail info@figshare.com /adminEmail earliestDatestamp 2010-01-08T01:24:54Z /earliestDatestamp deletedRecord transient /deletedRecord granularity YYYY-MM-DDThh:mm:ssZ /granularity /Identify /OAI-PMH ListSets curl https://api.figshare.com/v2/oai?verb=ListSets ?xml version='1.0' encoding='utf-8'? ?xml-stylesheet type=\"text/xsl\" href=\"/v2/static/oai2.xsl\"? OAI-PMH xmlns=\"http://www.openarchives.org/OAI/2.0/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd\" responseDate 2016-04-29T12:00:46Z /responseDate request verb=\"ListSets\" https://api.figshare.com/v2/oai /request ListSets set setSpec portal_147 /setSpec setName Karger Publishers /setName /set set setSpec portal_144 /setSpec setName Digital Science /setName /set !-- ... -- set setSpec portal_102 /setSpec setName Wiley /setName /set resumptionToken expirationDate=\"2016-04-29T13:00:46Z\" dmVyYj1MaXN0U2V0cyZwYWdlPTI= /resumptionToken /ListSets /OAI-PMH ListIdentifiers Selective harvesting: using set category_539 (Chemical Engineering Design). curl \"https://api.figshare.com/v2/oai?verb=ListIdentifiers metadataPrefix=oai_dc set=category_539\" ?xml version='1.0' encoding='utf-8'? ?xml-stylesheet type=\"text/xsl\" href=\"/v2/static/oai2.xsl\"? OAI-PMH xmlns=\"http://www.openarchives.org/OAI/2.0/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd\" responseDate 2016-04-29T12:11:18Z /responseDate request metadataPrefix=\"oai_dc\" set=\"category_539\" verb=\"ListIdentifiers\" https://api.figshare.com/v2/oai /request ListIdentifiers header identifier oai:figshare.com:article/2060079 /identifier datestamp 2016-01-04T08:32:32Z /datestamp setSpec category_539 /setSpec setSpec category_614 /setSpec setSpec category_1094 /setSpec setSpec category_1100 /setSpec setSpec item_type_6 /setSpec /header /ListIdentifiers /OAI-PMH ListRecords Selective harvesting: only articles published until 2010-08-18T08:33:01Z. curl \"https://api.figshare.com/v2/oai?verb=ListRecords metadataPrefix=oai_dc until=2010-08-18T08:33:01Z\" ?xml version='1.0' encoding='utf-8'? ?xml-stylesheet type=\"text/xsl\" href=\"/v2/static/oai2.xsl\"? OAI-PMH xmlns=\"http://www.openarchives.org/OAI/2.0/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd\" responseDate 2016-09-29T08:03:12Z /responseDate request metadataPrefix=\"oai_dc\" until=\"2010-08-18T08:33:01Z\" verb=\"ListRecords\" https://api.figshare.com/v2/oai /request ListRecords record header identifier oai:figshare.com:article/145088 /identifier datestamp 2010-01-08T01:24:54Z /datestamp setSpec category_4 /setSpec setSpec category_12 /setSpec setSpec portal_5 /setSpec setSpec item_type_3 /setSpec /header metadata oai_dc:dc xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:dc=\"http://purl.org/dc/terms/\" xmlns:oai_dc=\"http://www.openarchives.org/OAI/2.0/oai_dc/\" xsi:schemaLocation=\"http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd\" dc:title A Modular BAM Complex in the Outer Membrane of the \u03b1-Proteobacterium lt;em gt;Caulobacter crescentus lt;/em gt; /dc:title dc:creator Anthony W. Purcell (105036) /dc:creator dc:creator Trevor Lithgow (105055) /dc:creator dc:creator Kipros Gabriel (189246) /dc:creator dc:creator Nicholas Noinaj (216256) /dc:creator dc:creator Sebastian Poggio (251019) /dc:creator dc:creator Khatira Anwari (254980) /dc:creator dc:creator Andrew Perry (254989) /dc:creator dc:creator Xenia Gatsos (254994) /dc:creator dc:creator Sri Harsha Ramarathinam (255001) /dc:creator dc:creator Nicholas A. Williamson (255006) /dc:creator dc:creator Susan Buchanan (255012) /dc:creator dc:creator Christine Jacobs-Wagner (255016) /dc:creator dc:subject Biochemistry /dc:subject dc:subject Cell Biology /dc:subject dc:subject modular /dc:subject dc:subject bam /dc:subject dc:subject membrane /dc:subject dc:description lt;div gt; lt;p gt;Mitochondria are organelles derived from an intracellular \u03b1-proteobacterium. The biogenesis of mitochondria relies on the assembly of \u03b2-barrel proteins into the mitochondrial outer membrane, a process inherited from the bacterial ancestor. lt;em gt;Caulobacter crescentus lt;/em gt; is an \u03b1-proteobacterium, and the BAM (\u03b2-barrel assembly machinery) complex was purified and characterized from this model organism. Like the mitochondrial sorting and assembly machinery complex, we find the BAM complex to be modular in nature. A \u223c150 kDa core BAM complex containing BamA, BamB, BamD, and BamE associates with additional modules in the outer membrane. One of these modules, Pal, is a lipoprotein that provides a means for anchorage to the peptidoglycan layer of the cell wall. We suggest the modular design of the BAM complex facilitates access to substrates from the protein translocase in the inner membrane. lt;/p gt; lt;/div gt; /dc:description dc:date 2010-01-08T01:24:48Z /dc:date dc:type Dataset /dc:type dc:identifier 10.1371/journal.pone.0008619 /dc:identifier dc:relation https://figshare.com/articles/A_Modular_BAM_Complex_in_the_Outer_Membrane_of_the_Proteobacterium_em_Caulobacter_crescentus_em_/145088 /dc:relation dc:rights CC BY /dc:rights /oai_dc:dc /metadata /record /ListRecords /OAI-PMH","title":"Some examples"},{"location":"OAI-PMH/#changes","text":"May, 2016 Initial release of OAI-PMH API July, 2016 Datacite and RDF Metadata Formats are added August, 2016 Keywords and Licences tags are added October, 2016 Add correct output for ListIdentifiers Add month_year set / param Add user IDs in the tags November, 2016 CERIF XML Metadata Format was added","title":"Changes"},{"location":"Search/search/","text":"figshare SEARCH How to find data on figshare Data appears on the portal homepage with the newest uploads appearing first, you also have the option to browse by Popular content and Categories. Categories will only appear available for browsing if there are public items with the category assigned. ========================= Search operators figshare supports a predefined set of characters for the main search operators and for phrase searches. Operator Supported characters AND AND OR OR NOT NOT field delimiter : phrase search delimiter \"\" grouping () ========================= Searchable attributes You can build queries based on the following attributes: :title: - string (exact match), :description: - string (exact match), :tag: - string (exact match), the tag is the keyword used to describe an item such as \":tag: artificial intelligence\" :category: - string (exact match), :author: - string (exact match), :item_type: - string, can be one of the following: [article, project, collection, dataset, figure, poster, media, presentation, paper, fileset, thesis, code] :search_term: - string (will search in all fields and match phrase) :orcid: - string (exact match) :extension: - string (exact match for the file extensions) :references: - string (exact match) :doi: - string (exact match) :institution: - string, this is only for institutions that have figshare and you would use the string id from the URL (for example, Loughborough University has the URL https://lboro.figshare.com/ and you would type \":institutions: lboro\" into the search bar) :project: - string (exact match) :published_before: - string (exact match) :published_after: - string (exact match) :licence: - string (exact match), for example \":licence: CCBY\" :resource_doi: - string (exact match) :resource_title: - string (exact match) :resource_link: - string (exact match) In order for the search to filter the attribute the user must use the following syntax: :tag: cell ========================= Quick Search Simple search Search string: cell As a result of this search you will see all figshare articles that will contain the word \"cell\" in any of the metadata fields. The search will also return the articles that contain the term cells or all inflected words derived from the common stem. Phrase search - phase 2 Search string: \"stem cell\" As a result of this search you will see all figshare articles that will contain the exact phrase \"stem cell\" in any of the metadata fields. Multi term search Search string: cancer cells treatment As a result of this search you will see all figshare articles that contain at least one of the query terms. The results will be ordered by relevance first ones being the ones that would be found in a phrase search if available. As explained also in the table above the space is used by the figshare search as an OR operator. The search will also return the articles that contain all inflected words derived from the common stems. ========================= Advanced Search As the tags might contain special characters they will have a special treatment within the figshare search, where we would do an exact match. The examples below will illustrate how field search works in general and how is customised for tags. Search string: :tag: cancer cell This search will return all articles with the exact tag cancer cell. Search string: :tag: music and puppets This search will return all articles with the exact tag music and puppets. Only the operator AND will work as search delimiter. Search string: :tag: \"scrf=(cpcm,solvent=benzene)\" This search will return all articles with the exact tag. Search string: :tag: cancer category chemistry This search will return all articles with the exact tag \"cancer category chemistry\". If the user wants to break the tag and search also for a specific category please see Combined field search below. Search string: :title: environmental science This search will return all articles that have at least one of the words in the title working as in field multi-term search by relevance. Search string: :title: Line balancing for improving production Figshare engine will add the space where needed between the operator and the actual term This search will return only the articles that have the specified phrase included in the title. As usual the search will return also with a lower priority results containing all inflected words derived from the common stems. Search string: :description: growth of Indian manufacturing sector This search will return all articles that have at least one of the words from above contained in the description from the list above as multi-term search ordered by relevance. As usual, the search will return also with a lower priority results containing all inflected words derived from the common stems. Search string: description: \"industrial case study\" This search will return all articles that have the phrase from above contained in the description. As usual, the search will return also with a lower priority results containing all inflected words derived from the common stems. ========================= Combined field search Search string: :author: M. Hahnel OR :author: J. Smith OR :Author: Albert Einstein This search will return all articles that have at least one of the authors from the list above. Search string: :title: Line balancing for improving production AND :tag: cancer cell This search will return all results where the title matches phrase (multi term search by relevance) from above and has the \"cancer cell\" tag. As usual the search will return also with a lower priority results containing all inflected words derived from the common stems. Search string: :tag: chemistry applied AND :category: biochemistry This search will return all results where the tag is chemistry applied and the category is biochemistry. As usual the search will return also with a lower priority results containing all inflected words derived from the common stems. ========================= Complex searches Search string: :title: science AND :tag: cell AND :search term: private research This search will return articles that have the word science in the title and the tag cell and has the expression private research in any metadata field. Search string: :title: law OR :tag: democrat AND :search term: respect This search will return all articles that contain law in title or the tag democrat but also contain the word respect in any of the metadata fields. =========================","title":"Search"},{"location":"Search/search/#figshare-search","text":"","title":"figshare SEARCH"},{"location":"Search/search/#how-to-find-data-on-figshare","text":"Data appears on the portal homepage with the newest uploads appearing first, you also have the option to browse by Popular content and Categories. Categories will only appear available for browsing if there are public items with the category assigned. =========================","title":"How to find data on figshare"},{"location":"Search/search/#search-operators","text":"figshare supports a predefined set of characters for the main search operators and for phrase searches. Operator Supported characters AND AND OR OR NOT NOT field delimiter : phrase search delimiter \"\" grouping () =========================","title":"Search operators"},{"location":"Search/search/#searchable-attributes","text":"You can build queries based on the following attributes: :title: - string (exact match), :description: - string (exact match), :tag: - string (exact match), the tag is the keyword used to describe an item such as \":tag: artificial intelligence\" :category: - string (exact match), :author: - string (exact match), :item_type: - string, can be one of the following: [article, project, collection, dataset, figure, poster, media, presentation, paper, fileset, thesis, code] :search_term: - string (will search in all fields and match phrase) :orcid: - string (exact match) :extension: - string (exact match for the file extensions) :references: - string (exact match) :doi: - string (exact match) :institution: - string, this is only for institutions that have figshare and you would use the string id from the URL (for example, Loughborough University has the URL https://lboro.figshare.com/ and you would type \":institutions: lboro\" into the search bar) :project: - string (exact match) :published_before: - string (exact match) :published_after: - string (exact match) :licence: - string (exact match), for example \":licence: CCBY\" :resource_doi: - string (exact match) :resource_title: - string (exact match) :resource_link: - string (exact match) In order for the search to filter the attribute the user must use the following syntax: :tag: cell =========================","title":"Searchable attributes"},{"location":"Search/search/#quick-search","text":"","title":"Quick Search"},{"location":"Search/search/#simple-search","text":"","title":"Simple search"},{"location":"Search/search/#search-string-cell","text":"As a result of this search you will see all figshare articles that will contain the word \"cell\" in any of the metadata fields. The search will also return the articles that contain the term cells or all inflected words derived from the common stem.","title":"Search string: cell"},{"location":"Search/search/#phrase-search-phase-2","text":"","title":"Phrase search - phase 2"},{"location":"Search/search/#search-string-stem-cell","text":"As a result of this search you will see all figshare articles that will contain the exact phrase \"stem cell\" in any of the metadata fields.","title":"Search string: \"stem cell\""},{"location":"Search/search/#multi-term-search","text":"","title":"Multi term search"},{"location":"Search/search/#search-string-cancer-cells-treatment","text":"As a result of this search you will see all figshare articles that contain at least one of the query terms. The results will be ordered by relevance first ones being the ones that would be found in a phrase search if available. As explained also in the table above the space is used by the figshare search as an OR operator. The search will also return the articles that contain all inflected words derived from the common stems. =========================","title":"Search string: cancer cells treatment"},{"location":"Search/search/#advanced-search","text":"As the tags might contain special characters they will have a special treatment within the figshare search, where we would do an exact match. The examples below will illustrate how field search works in general and how is customised for tags.","title":"Advanced Search"},{"location":"Search/search/#search-string-tag-cancer-cell","text":"This search will return all articles with the exact tag cancer cell.","title":"Search string: :tag: cancer cell"},{"location":"Search/search/#search-string-tag-music-and-puppets","text":"This search will return all articles with the exact tag music and puppets. Only the operator AND will work as search delimiter.","title":"Search string: :tag: music and puppets"},{"location":"Search/search/#search-string-tag-scrfcpcmsolventbenzene","text":"This search will return all articles with the exact tag.","title":"Search string: :tag: \"scrf=(cpcm,solvent=benzene)\""},{"location":"Search/search/#search-string-tag-cancer-category-chemistry","text":"This search will return all articles with the exact tag \"cancer category chemistry\". If the user wants to break the tag and search also for a specific category please see Combined field search below.","title":"Search string: :tag: cancer category chemistry"},{"location":"Search/search/#search-string-title-environmental-science","text":"This search will return all articles that have at least one of the words in the title working as in field multi-term search by relevance.","title":"Search string: :title: environmental science"},{"location":"Search/search/#search-string-title-line-balancing-for-improving-production","text":"Figshare engine will add the space where needed between the operator and the actual term This search will return only the articles that have the specified phrase included in the title. As usual the search will return also with a lower priority results containing all inflected words derived from the common stems.","title":"Search string: :title: Line balancing for improving production"},{"location":"Search/search/#search-string-description-growth-of-indian-manufacturing-sector","text":"This search will return all articles that have at least one of the words from above contained in the description from the list above as multi-term search ordered by relevance. As usual, the search will return also with a lower priority results containing all inflected words derived from the common stems.","title":"Search string: :description: growth of Indian manufacturing sector"},{"location":"Search/search/#search-string-description-industrial-case-study","text":"This search will return all articles that have the phrase from above contained in the description. As usual, the search will return also with a lower priority results containing all inflected words derived from the common stems. =========================","title":"Search string: description: \"industrial case study\""},{"location":"Search/search/#combined-field-search","text":"","title":"Combined field search"},{"location":"Search/search/#search-string-author-m-hahnel-or-author-j-smith-or-author-albert-einstein","text":"This search will return all articles that have at least one of the authors from the list above.","title":"Search string: :author: M. Hahnel OR :author: J. Smith OR :Author: Albert Einstein"},{"location":"Search/search/#search-string-title-line-balancing-for-improving-production-and-tag-cancer-cell","text":"This search will return all results where the title matches phrase (multi term search by relevance) from above and has the \"cancer cell\" tag. As usual the search will return also with a lower priority results containing all inflected words derived from the common stems.","title":"Search string: :title: Line balancing for improving production AND :tag: cancer cell"},{"location":"Search/search/#search-string-tag-chemistry-applied-and-category-biochemistry","text":"This search will return all results where the tag is chemistry applied and the category is biochemistry. As usual the search will return also with a lower priority results containing all inflected words derived from the common stems. =========================","title":"Search string: :tag: chemistry applied AND :category: biochemistry"},{"location":"Search/search/#complex-searches","text":"","title":"Complex searches"},{"location":"Search/search/#search-string-title-science-and-tag-cell-and-search-term-private-research","text":"This search will return articles that have the word science in the title and the tag cell and has the expression private research in any metadata field.","title":"Search string: :title: science AND :tag: cell AND :search term: private research"},{"location":"Search/search/#search-string-title-law-or-tag-democrat-and-search-term-respect","text":"This search will return all articles that contain law in title or the tag democrat but also contain the word respect in any of the metadata fields. =========================","title":"Search string: :title: law OR :tag: democrat AND :search term: respect"},{"location":"Stats/","text":"fig share statistics service The fig share statistics service is available at https://stats.figshare.com and it supports retrieving information about the number of views , downloads and shares related to items available of fig share . From here on, an event is one of view , download or share . All communication with the service is done through https and all data is encoded as json . Optional authorization for specific endpoints is done through basic access authentication. Authentication Errors Endpoints Authentication For some specialized endpoints, access to institution specific statistics requires sending a base64 -encoded pair of username:password in the basic authorization header: GET https://stats.figshare.com/lboro/top/views/article Authorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh Please note that the analogous endpoint for retrieving statistics for items outside the institutional scope, requires no authentication: GET https://stats.figshare.com/top/views/article Errors Error responses are common for all endpoints and are presented below. Each error response will have a specific HTTP status code and a JSON body with the following fields Field Description message A human friendly message explaining the error. code A machine friendly error code, used by the dev team to identify the error. data An object containing extra information about the error. 400 Bad Request This error response will be raised when an invalid field is sent in the parameters of the request or when a field is missing from the parameters of the request. Required and optional fields in the body are documented for each endpoint, where applicable. 403 Forbidden This error response is presented when attempting to retrieve information from a protected endpoint without the appropriate Authorization header. 404 Not Found This error response is presented when attempting to access a non existing endpoint. Please note that it will not be raised when attempting to gather statistics for an item which doesn't exist on fig share, instead an appropriate empty result will be returned. Endpoints The statistics service endpoints can be classified in 4 categories: Totals Timeline Breakdown Tops Scope All endpoints are applicable for the following items: group : events on items inside the specified group author : events on items authored by the specified user article : events on the specified article project : events on the specified project collection : events on the specified collection Totals This type of endpoint enables the retrieval of the total number of events for a specific item. More details and examples are provided here . Timeline This type of endpoint enables the retrieval of a timeline of the number of events for a specific item, with a specified granularity. More details and examples are provided here . Breakdown This type of endpoint enables the retrieval of a geo-location breakdown of the number of events for a specific item, with a specified granularity. More details and examples are provided here . Tops This type of endpoint enables the retrieval of rankings of the most viewed, downloaded or shared items, over a specific period of time. More details and examples are provided here .","title":"Index"},{"location":"Stats/#figshare-statistics-service","text":"The fig share statistics service is available at https://stats.figshare.com and it supports retrieving information about the number of views , downloads and shares related to items available of fig share . From here on, an event is one of view , download or share . All communication with the service is done through https and all data is encoded as json . Optional authorization for specific endpoints is done through basic access authentication. Authentication Errors Endpoints","title":"figshare statistics service"},{"location":"Stats/#authentication","text":"For some specialized endpoints, access to institution specific statistics requires sending a base64 -encoded pair of username:password in the basic authorization header: GET https://stats.figshare.com/lboro/top/views/article Authorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh Please note that the analogous endpoint for retrieving statistics for items outside the institutional scope, requires no authentication: GET https://stats.figshare.com/top/views/article","title":"Authentication"},{"location":"Stats/#errors","text":"Error responses are common for all endpoints and are presented below. Each error response will have a specific HTTP status code and a JSON body with the following fields Field Description message A human friendly message explaining the error. code A machine friendly error code, used by the dev team to identify the error. data An object containing extra information about the error.","title":"Errors"},{"location":"Stats/#400-bad-request","text":"This error response will be raised when an invalid field is sent in the parameters of the request or when a field is missing from the parameters of the request. Required and optional fields in the body are documented for each endpoint, where applicable.","title":"400 Bad Request"},{"location":"Stats/#403-forbidden","text":"This error response is presented when attempting to retrieve information from a protected endpoint without the appropriate Authorization header.","title":"403 Forbidden"},{"location":"Stats/#404-not-found","text":"This error response is presented when attempting to access a non existing endpoint. Please note that it will not be raised when attempting to gather statistics for an item which doesn't exist on fig share, instead an appropriate empty result will be returned.","title":"404 Not Found"},{"location":"Stats/#endpoints","text":"The statistics service endpoints can be classified in 4 categories: Totals Timeline Breakdown Tops","title":"Endpoints"},{"location":"Stats/#scope","text":"All endpoints are applicable for the following items: group : events on items inside the specified group author : events on items authored by the specified user article : events on the specified article project : events on the specified project collection : events on the specified collection","title":"Scope"},{"location":"Stats/#totals","text":"This type of endpoint enables the retrieval of the total number of events for a specific item. More details and examples are provided here .","title":"Totals"},{"location":"Stats/#timeline","text":"This type of endpoint enables the retrieval of a timeline of the number of events for a specific item, with a specified granularity. More details and examples are provided here .","title":"Timeline"},{"location":"Stats/#breakdown","text":"This type of endpoint enables the retrieval of a geo-location breakdown of the number of events for a specific item, with a specified granularity. More details and examples are provided here .","title":"Breakdown"},{"location":"Stats/#tops","text":"This type of endpoint enables the retrieval of rankings of the most viewed, downloaded or shared items, over a specific period of time. More details and examples are provided here .","title":"Tops"},{"location":"Stats/breakdown/","text":"Endpoints for retrieving a breakdown This type of endpoint enables the retrieval of a geo-location breakdown of the number of views , downloads or shares for a specific item. Authorization Endpoint format Request parameters Examples Authorization Basic HTTP authentication is required for timeline endpoints within the scope of an institution. Endpoint format For items outside an institution scope the endpoints have the format: /breakdown/{granularity}/{counter}/{item}/{item_id} and inside an institution scope they have the format: /{institution}/breakdown/{granularity}{counter}/{item}/{item_id} where granularity is one of year , month , day or total , counter is one of views , downloads or shares and item is one of article , author , collection , group or project . The results on this endpoint can be filtered further by a start_date and end_date and a specified category or item_type . By default, start_date and end_date are set to reflect the events of the last month. The supplementary filters can be provided in the query parameters of the request. Request parameters The following table describes the optional parameters: Parameter Comments start_date By default this is set to the 1st of the current month. end_date By default this is set to today. sub_item Can be one of category and item_type . Acts as a filter on the result. sub_item_id Required if sub_item is also specified. Examples Daily breakdown of shares for an unaffiliated article Request GET https://stats.figshare.com/breakdown/day/shares/article/23?start_date=2014-03-08 end_date=2014-05-21 Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { breakdown : { 2014-03-08 : { Spain : { Seville : 8, Madrid : 11, total : 19 } }, 2014-02-20 : { Spain : { Seville : 3, total : 3 } }, 2014-05-04 : { China : { Fuzhou : 7, Chengdu : 3, total : 10 } } } } Yearly breakdown of views for a project associated to an institution Request GET https://stats.figshare.com/monash/breakdown/year/views/project/1345?start_date=2013-01-01 end_date=2015-01-01 Authorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { breakdown : { 2013 : { Spain : { Seville : 5, Madrid : 3, total : 8 }, China : { Fuzhou : 2, Chengdu : 3, total : 5 } }, 2014 : { United States : { Kansas City : 3, Orlando : 1, total : 4 }, Venezuela : { Caracas : 5, total : 5 }, Brazil : { total : 7, Indaiatuba : 4, Campinas : 3 } } } } Total breakdown of downloads from filesets found in a specified institutional group Request GET https://stats.figshare.com/lboro/breakdown/total/downloads/group/17?sub_item=item_type sub_item_id=fileset start_date=2015-02-11 end_date=2015-05-17 Authorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { breakdown : { total : { Spain : { Seville : 6, Barcelona : 7, Madrid : 3, total : 16 }, China : { Chengdu : 7, Fuzhou : 4, total : 11 }, United States : { Kansas City : 3, Orlando : 7, total : 10 }, Brazil : { total : 2, Indaiatuba : 2 } } } } Monthly breakdown of views from projects found in a specified institutional group Request GET https://stats.figshare.com/melbourne/breakdown/month/views/group/234 sub_item=item_type sub_item_id=project start_date=2015-02-11 end_date=2015-03-17 Authorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { breakdown : { 2015-02 : { France : { Paris : 12, Montpellier : 7, total : 19 }, Germany : { Munich : 13, Frankfurt : 2, total : 15 } }, 2015-03 : { Spain : { Madrid : 3, Mallorca : 5, total : 8 } } } } Breakdown of institutional statistics with missing authorization Request GET https://stats.figshare.com/melbourne/breakdown/month/views/group/234 Response HTTP/1.1 403 Forbidden Content-Type: application/json; charset=UTF-8 { data : null, code : Forbidden , message : Unauthorized request }","title":"Breakdown"},{"location":"Stats/breakdown/#endpoints-for-retrieving-a-breakdown","text":"This type of endpoint enables the retrieval of a geo-location breakdown of the number of views , downloads or shares for a specific item. Authorization Endpoint format Request parameters Examples","title":"Endpoints for retrieving a breakdown"},{"location":"Stats/breakdown/#authorization","text":"Basic HTTP authentication is required for timeline endpoints within the scope of an institution.","title":"Authorization"},{"location":"Stats/breakdown/#endpoint-format","text":"For items outside an institution scope the endpoints have the format: /breakdown/{granularity}/{counter}/{item}/{item_id} and inside an institution scope they have the format: /{institution}/breakdown/{granularity}{counter}/{item}/{item_id} where granularity is one of year , month , day or total , counter is one of views , downloads or shares and item is one of article , author , collection , group or project . The results on this endpoint can be filtered further by a start_date and end_date and a specified category or item_type . By default, start_date and end_date are set to reflect the events of the last month. The supplementary filters can be provided in the query parameters of the request.","title":"Endpoint format"},{"location":"Stats/breakdown/#request-parameters","text":"The following table describes the optional parameters: Parameter Comments start_date By default this is set to the 1st of the current month. end_date By default this is set to today. sub_item Can be one of category and item_type . Acts as a filter on the result. sub_item_id Required if sub_item is also specified.","title":"Request parameters"},{"location":"Stats/breakdown/#examples","text":"","title":"Examples"},{"location":"Stats/breakdown/#daily-breakdown-of-shares-for-an-unaffiliated-article","text":"Request GET https://stats.figshare.com/breakdown/day/shares/article/23?start_date=2014-03-08 end_date=2014-05-21 Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { breakdown : { 2014-03-08 : { Spain : { Seville : 8, Madrid : 11, total : 19 } }, 2014-02-20 : { Spain : { Seville : 3, total : 3 } }, 2014-05-04 : { China : { Fuzhou : 7, Chengdu : 3, total : 10 } } } }","title":"Daily breakdown of shares for an unaffiliated article"},{"location":"Stats/breakdown/#yearly-breakdown-of-views-for-a-project-associated-to-an-institution","text":"Request GET https://stats.figshare.com/monash/breakdown/year/views/project/1345?start_date=2013-01-01 end_date=2015-01-01 Authorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { breakdown : { 2013 : { Spain : { Seville : 5, Madrid : 3, total : 8 }, China : { Fuzhou : 2, Chengdu : 3, total : 5 } }, 2014 : { United States : { Kansas City : 3, Orlando : 1, total : 4 }, Venezuela : { Caracas : 5, total : 5 }, Brazil : { total : 7, Indaiatuba : 4, Campinas : 3 } } } }","title":"Yearly breakdown of views for a project associated to an institution"},{"location":"Stats/breakdown/#total-breakdown-of-downloads-from-filesets-found-in-a-specified-institutional-group","text":"Request GET https://stats.figshare.com/lboro/breakdown/total/downloads/group/17?sub_item=item_type sub_item_id=fileset start_date=2015-02-11 end_date=2015-05-17 Authorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { breakdown : { total : { Spain : { Seville : 6, Barcelona : 7, Madrid : 3, total : 16 }, China : { Chengdu : 7, Fuzhou : 4, total : 11 }, United States : { Kansas City : 3, Orlando : 7, total : 10 }, Brazil : { total : 2, Indaiatuba : 2 } } } }","title":"Total breakdown of downloads from filesets found in a specified institutional group"},{"location":"Stats/breakdown/#monthly-breakdown-of-views-from-projects-found-in-a-specified-institutional-group","text":"Request GET https://stats.figshare.com/melbourne/breakdown/month/views/group/234 sub_item=item_type sub_item_id=project start_date=2015-02-11 end_date=2015-03-17 Authorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { breakdown : { 2015-02 : { France : { Paris : 12, Montpellier : 7, total : 19 }, Germany : { Munich : 13, Frankfurt : 2, total : 15 } }, 2015-03 : { Spain : { Madrid : 3, Mallorca : 5, total : 8 } } } }","title":"Monthly breakdown of views from projects found in a specified institutional group"},{"location":"Stats/breakdown/#breakdown-of-institutional-statistics-with-missing-authorization","text":"Request GET https://stats.figshare.com/melbourne/breakdown/month/views/group/234 Response HTTP/1.1 403 Forbidden Content-Type: application/json; charset=UTF-8 { data : null, code : Forbidden , message : Unauthorized request }","title":"Breakdown of institutional statistics with missing authorization"},{"location":"Stats/timeline/","text":"Endpoints for retrieving a timeline This type of endpoint enables the retrieval of a timeline of the number of views , downloads or shares for a specific item. Authorization Endpoint format Request parameters Examples Authorization Basic HTTP authentication is required for timeline endpoints within the scope of an institution. Endpoint format For items outside an institution scope the endpoints have the format: /timeline/{granularity}/{counter}/{item}/{item_id} and inside an institution scope they have the format: /{institution}/timeline/{granularity}{counter}/{item}/{item_id} where granularity is one of year , month , day or total , counter is one of views , downloads or shares and item is one of article , author , collection , group or project . The results on this endpoint can be filtered further by a start_date and end_date and a specified category or item_type . By default, start_date and end_date are set to reflect the events of the last month. The supplementary filters can be provided in the request parameters. Request parameters The following table describes the optional parameters: Parameter Comments start_date By default this is set to the 1st of the current month. end_date By default this is set to today. sub_item Can be one of category and item_type . Acts as a filter on the result. sub_item_id Required if sub_item is also specified. Examples Daily timeline of downloads for an unaffiliated article Request GET https://stats.figshare.com/timeline/day/downloads/article/23 Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { timeline : { 2015-07-01 : 7, 2015-07-02 : 3, 2015-07-09 : 1, 2015-07-15 : 3, 2015-07-16 : 2, 2015-07-18 : 1 } } Yearly timeline of views for an article associated to an institution Request GET https://stats.figshare.com/monash/timeline/year/views/article/2000000?start_date=2013-01-01 end_date=2015-08-01 Authorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { timeline : { 2013 : 16, 2014 : 23, 2015 : 12 } } Monthly timeline of shares for items in a specified institutional group, matching a specified category Request GET https://stats.figshare.com/monash/timeline/month/shares/group/10?sub_item=category sub_item_id=2 start_date=2014-01-03 end_date=2014-05-12 Authorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { timeline : { 2014-01 : 3, 2014-02 : 5, 2014-03 : 18, 2014-04 : 4, 2014-05 : 2 } } Daily timeline of views for datasets found in a specified institutional group Request GET https://stats.figshare.com/monash/timeline/day/views/group/10?sub_item=item_type sub_item_id=dataset start_date=2014-03-01 end_date=2014-03-04 Authorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { timeline : { 2014-03-01 : 10, 2014-03-02 : 14, 2014-03-03 : 15, 2014-03-04 : 9 } } Total timeline of views for a collection associated to an institution Request GET https://stats.figshare.com/lboro/timeline/total/views/collection/15?start_date=2014-01-02 end_date=2014-03-05 Authorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { timeline : { total : 10 } } Timeline with missing request parameter Request * GET https://stats.figshare.com/lboro/timeline/month/views/group/1?sub_item=category start_date=2014-01-01 end_date=2015-02-03 Authorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh Response HTTP/1.1 400 Bad Request Content-Type: application/json; charset=UTF-8 { data : { missing_params : sub_item_id , parameters : { end_date : 2015-02-03 , start_date : 2014-01-01 , sub_item : category }, path : /lboro/timeline/month/views/group/1 }, code : MissingParams , message : Missing required params: sub_item_id }","title":"Timeline"},{"location":"Stats/timeline/#endpoints-for-retrieving-a-timeline","text":"This type of endpoint enables the retrieval of a timeline of the number of views , downloads or shares for a specific item. Authorization Endpoint format Request parameters Examples","title":"Endpoints for retrieving a timeline"},{"location":"Stats/timeline/#authorization","text":"Basic HTTP authentication is required for timeline endpoints within the scope of an institution.","title":"Authorization"},{"location":"Stats/timeline/#endpoint-format","text":"For items outside an institution scope the endpoints have the format: /timeline/{granularity}/{counter}/{item}/{item_id} and inside an institution scope they have the format: /{institution}/timeline/{granularity}{counter}/{item}/{item_id} where granularity is one of year , month , day or total , counter is one of views , downloads or shares and item is one of article , author , collection , group or project . The results on this endpoint can be filtered further by a start_date and end_date and a specified category or item_type . By default, start_date and end_date are set to reflect the events of the last month. The supplementary filters can be provided in the request parameters.","title":"Endpoint format"},{"location":"Stats/timeline/#request-parameters","text":"The following table describes the optional parameters: Parameter Comments start_date By default this is set to the 1st of the current month. end_date By default this is set to today. sub_item Can be one of category and item_type . Acts as a filter on the result. sub_item_id Required if sub_item is also specified.","title":"Request parameters"},{"location":"Stats/timeline/#examples","text":"","title":"Examples"},{"location":"Stats/timeline/#daily-timeline-of-downloads-for-an-unaffiliated-article","text":"Request GET https://stats.figshare.com/timeline/day/downloads/article/23 Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { timeline : { 2015-07-01 : 7, 2015-07-02 : 3, 2015-07-09 : 1, 2015-07-15 : 3, 2015-07-16 : 2, 2015-07-18 : 1 } }","title":"Daily timeline of downloads for an unaffiliated article"},{"location":"Stats/timeline/#yearly-timeline-of-views-for-an-article-associated-to-an-institution","text":"Request GET https://stats.figshare.com/monash/timeline/year/views/article/2000000?start_date=2013-01-01 end_date=2015-08-01 Authorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { timeline : { 2013 : 16, 2014 : 23, 2015 : 12 } }","title":"Yearly timeline of views for an article associated to an institution"},{"location":"Stats/timeline/#monthly-timeline-of-shares-for-items-in-a-specified-institutional-group-matching-a-specified-category","text":"Request GET https://stats.figshare.com/monash/timeline/month/shares/group/10?sub_item=category sub_item_id=2 start_date=2014-01-03 end_date=2014-05-12 Authorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { timeline : { 2014-01 : 3, 2014-02 : 5, 2014-03 : 18, 2014-04 : 4, 2014-05 : 2 } }","title":"Monthly timeline of shares for items in a specified institutional group, matching a specified category"},{"location":"Stats/timeline/#daily-timeline-of-views-for-datasets-found-in-a-specified-institutional-group","text":"Request GET https://stats.figshare.com/monash/timeline/day/views/group/10?sub_item=item_type sub_item_id=dataset start_date=2014-03-01 end_date=2014-03-04 Authorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { timeline : { 2014-03-01 : 10, 2014-03-02 : 14, 2014-03-03 : 15, 2014-03-04 : 9 } }","title":"Daily timeline of views for datasets found in a specified institutional group"},{"location":"Stats/timeline/#total-timeline-of-views-for-a-collection-associated-to-an-institution","text":"Request GET https://stats.figshare.com/lboro/timeline/total/views/collection/15?start_date=2014-01-02 end_date=2014-03-05 Authorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { timeline : { total : 10 } }","title":"Total timeline of views for a collection associated to an institution"},{"location":"Stats/timeline/#timeline-with-missing-request-parameter","text":"Request * GET https://stats.figshare.com/lboro/timeline/month/views/group/1?sub_item=category start_date=2014-01-01 end_date=2015-02-03 Authorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh Response HTTP/1.1 400 Bad Request Content-Type: application/json; charset=UTF-8 { data : { missing_params : sub_item_id , parameters : { end_date : 2015-02-03 , start_date : 2014-01-01 , sub_item : category }, path : /lboro/timeline/month/views/group/1 }, code : MissingParams , message : Missing required params: sub_item_id }","title":"Timeline with missing request parameter"},{"location":"Stats/tops/","text":"Endpoints for retrieving tops This type of endpoints enables the retrieval or rankings of the most viewed, downloaded or shared items, over a specific period of time. Authorization Endpoint format Request parameters Examples Authorization Basic HTTP authentication is required for timeline endpoints within the scope of an institution. Endpoint format For items outside an institution scope the endpoints have the format: /top/{counter}/{item} and inside and institution scope they have the format: /{institution}/top/{counter}/{item} where counter is one of views , shares or downloads and item is one of article , author , collection , group or project . The results on this endpoint can be filtered further by a specified sub_item which can be one of: category , item_type or referral . The results can also be filtered by a start_date and end_date which by default are set to reflect the events of the last month ONLY if a sub_item filter has been specified. Otherwise, the results will reflect the total events. The number of results in the ranking can be specified as the count parameter which by default is set to 10 . The supplementary filters and options can be provided in the query parameters of the request. Request parameters The following table describes the optional parameters: Parameter Comments start_date By default this is set to the 1st of the current month if a sub_item is specified end_date By default this is set to today if a sub_item is specified. sub_item Can be one of category , item_type or referral . Acts as a filter on the result. count By default this is set to 10. Examples Top 10 most viewed unaffiliated articles in the last month Request GET https://stats.figshare.com/top/views/article Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { top : { 200341 : 2341, 200134 : 2111, 201342 : 2001, 23144 : 1930, 1998 : 1900, 20023 : 1802, 200321 : 1720, 101342 : 1517, 213454 : 1516, 19341 : 1516, } } Top 3 most viewed categories in a specified institutional group in 2014 Request GET https://stats.figshare.com/monash/top/views/group?item_id=2 sub_item=category count=3 start_date=2014-01-01 end_date=2014-12-31 Authorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { top : { 2 : 12351, 7 : 11001, 3 : 10435 } } Top 2 referrals for a specific unaffiliated project in the last month Request GET https://stats.figshare.com/top/views/project?item_id=13 count=2 sub_item=referral Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { www.google.com : 212, www.figshare.com : 175 } Top 3 item types for shares related to a specific unaffiliated author Request GET https://stats.figshare.com/top/shares/author?item_id=13456 count=3 sub_item=item_type Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { fileset : 135, collection : 120, figure : 98 }","title":"Tops"},{"location":"Stats/tops/#endpoints-for-retrieving-tops","text":"This type of endpoints enables the retrieval or rankings of the most viewed, downloaded or shared items, over a specific period of time. Authorization Endpoint format Request parameters Examples","title":"Endpoints for retrieving tops"},{"location":"Stats/tops/#authorization","text":"Basic HTTP authentication is required for timeline endpoints within the scope of an institution.","title":"Authorization"},{"location":"Stats/tops/#endpoint-format","text":"For items outside an institution scope the endpoints have the format: /top/{counter}/{item} and inside and institution scope they have the format: /{institution}/top/{counter}/{item} where counter is one of views , shares or downloads and item is one of article , author , collection , group or project . The results on this endpoint can be filtered further by a specified sub_item which can be one of: category , item_type or referral . The results can also be filtered by a start_date and end_date which by default are set to reflect the events of the last month ONLY if a sub_item filter has been specified. Otherwise, the results will reflect the total events. The number of results in the ranking can be specified as the count parameter which by default is set to 10 . The supplementary filters and options can be provided in the query parameters of the request.","title":"Endpoint format"},{"location":"Stats/tops/#request-parameters","text":"The following table describes the optional parameters: Parameter Comments start_date By default this is set to the 1st of the current month if a sub_item is specified end_date By default this is set to today if a sub_item is specified. sub_item Can be one of category , item_type or referral . Acts as a filter on the result. count By default this is set to 10.","title":"Request parameters"},{"location":"Stats/tops/#examples","text":"","title":"Examples"},{"location":"Stats/tops/#top-10-most-viewed-unaffiliated-articles-in-the-last-month","text":"Request GET https://stats.figshare.com/top/views/article Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { top : { 200341 : 2341, 200134 : 2111, 201342 : 2001, 23144 : 1930, 1998 : 1900, 20023 : 1802, 200321 : 1720, 101342 : 1517, 213454 : 1516, 19341 : 1516, } }","title":"Top 10 most viewed unaffiliated articles in the last month"},{"location":"Stats/tops/#top-3-most-viewed-categories-in-a-specified-institutional-group-in-2014","text":"Request GET https://stats.figshare.com/monash/top/views/group?item_id=2 sub_item=category count=3 start_date=2014-01-01 end_date=2014-12-31 Authorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { top : { 2 : 12351, 7 : 11001, 3 : 10435 } }","title":"Top 3 most viewed categories in a specified institutional group in 2014"},{"location":"Stats/tops/#top-2-referrals-for-a-specific-unaffiliated-project-in-the-last-month","text":"Request GET https://stats.figshare.com/top/views/project?item_id=13 count=2 sub_item=referral Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { www.google.com : 212, www.figshare.com : 175 }","title":"Top 2 referrals for a specific unaffiliated project in the last month"},{"location":"Stats/tops/#top-3-item-types-for-shares-related-to-a-specific-unaffiliated-author","text":"Request GET https://stats.figshare.com/top/shares/author?item_id=13456 count=3 sub_item=item_type Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { fileset : 135, collection : 120, figure : 98 }","title":"Top 3 item types for shares related to a specific unaffiliated author"},{"location":"Stats/totals/","text":"Endpoints for retrieving totals This type of endpoint provides the total number of views , downloads or shares . Authorization Endpoint format Examples Authorization No authorization is required. Endpoint format For items outside an institution scope the endpoints have the format: /total/{counter}/{item}/{item_id} and inside an institution scope they have the format: /{institution}/total/{counter}/{item}/{item_id} where counter is one of views , downloads or shares and item is one of article , author , collection , group or project . Examples Number of views for an unaffiliated article Request GET https://stats.figshare.com/total/views/article/23 Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { totals : 231 } Number of shares for items authored by a specific user Request GET https://stats.figshare.com/total/shares/author/15 Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { totals : 134 } Number of downloads for items in an institutional group Request GET https://stats.figshare.com/monash/total/downloads/group/10 Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { totals : 5 } Number of views for a collection associated to an institution Request GET https://stats.figshare.com/lboro/total/views/collection/15 Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { totals : 3 } Unsupported counter request for an unaffiliated article Request GET https://stats.figshare.com/total/hugs/article/215 Response HTTP/1.1 400 Bad Request Content-Type: application/json; charset=UTF-8 { data : { extra : Counter type not supported: hugs , invalid_params : counter }, code : InvalidParams , message : Invalid or unsupported params: counter }","title":"Totals"},{"location":"Stats/totals/#endpoints-for-retrieving-totals","text":"This type of endpoint provides the total number of views , downloads or shares . Authorization Endpoint format Examples","title":"Endpoints for retrieving totals"},{"location":"Stats/totals/#authorization","text":"No authorization is required.","title":"Authorization"},{"location":"Stats/totals/#endpoint-format","text":"For items outside an institution scope the endpoints have the format: /total/{counter}/{item}/{item_id} and inside an institution scope they have the format: /{institution}/total/{counter}/{item}/{item_id} where counter is one of views , downloads or shares and item is one of article , author , collection , group or project .","title":"Endpoint format"},{"location":"Stats/totals/#examples","text":"","title":"Examples"},{"location":"Stats/totals/#number-of-views-for-an-unaffiliated-article","text":"Request GET https://stats.figshare.com/total/views/article/23 Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { totals : 231 }","title":"Number of views for an unaffiliated article"},{"location":"Stats/totals/#number-of-shares-for-items-authored-by-a-specific-user","text":"Request GET https://stats.figshare.com/total/shares/author/15 Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { totals : 134 }","title":"Number of shares for items authored by a specific user"},{"location":"Stats/totals/#number-of-downloads-for-items-in-an-institutional-group","text":"Request GET https://stats.figshare.com/monash/total/downloads/group/10 Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { totals : 5 }","title":"Number of downloads for items in an institutional group"},{"location":"Stats/totals/#number-of-views-for-a-collection-associated-to-an-institution","text":"Request GET https://stats.figshare.com/lboro/total/views/collection/15 Response HTTP/1.1 200 OK Content-Type: application/json; charset=UTF-8 { totals : 3 }","title":"Number of views for a collection associated to an institution"},{"location":"Stats/totals/#unsupported-counter-request-for-an-unaffiliated-article","text":"Request GET https://stats.figshare.com/total/hugs/article/215 Response HTTP/1.1 400 Bad Request Content-Type: application/json; charset=UTF-8 { data : { extra : Counter type not supported: hugs , invalid_params : counter }, code : InvalidParams , message : Invalid or unsupported params: counter }","title":"Unsupported counter request for an unaffiliated article"},{"location":"api/","text":"API feature list The figshare api v2 is accessible at https://api.figshare.com/v2. All communication is done through https and all data is encoded as JSON . Sending parameters Resource representations Authentication Errors Searching, filtering and pagination Rate limiting Conditional requests CORS policy Endpoints collections items projects Sending parameters More often than not you need to send parameters to an endpoint. For GET requests these are usualy sent in the query string but for POST and PUT requests they are usually in the body of the request. Query string Query strings can contain parameters encoded as application/x-www-form-urlencoded . Very common for GET requests. Example : Sending page parameter when listing articles: GET /v2/articles?page=3 HTTP/1.1 Host: api.figshare.com Authorization: token a287ab8c7ebdbe6 Request json body POST and PUT request usualy read their params from the body of the http request. Our API only understands application/json encoded bodies. Example : Sending search_for parameter when searching for articles: POST /v2/articles/search HTTP/1.1 Host: api.figshare.com Authorization: token a287ab8c7ebdbe6 { search_for : figshare } Resource representations Resources can be presented differently across endpoints. Usually endpoints that return a list of resources will send a lighter representation of each resource while an endpoint for an individual resource will use a more detailed and complete representation. Representations for each resource type are documented here and the documentation for each endpoint will specify what kind of representation it's using. Blank resource fields are included in the representation as null instead of being omitted. Authentication The v2 API supports OAuth2 access tokens, issued as described in the oauth documentation page . In addition to oauth access tokens, you can also use a personal token which grants you full access to your account. Personal tokens can be created and managed from the applications page at figshare. Any of these tokens can be used to authenticate and there are 2 options to include them in requests: HTTP header ( recommended ) GET /v2/token HTTP/1.1 Host: api.figshare.com Authorization: token ACCESS_TOKEN Example with curl : curl -H Authorization: token ACCESS_TOKEN https://api.figshare.com/v2 Query param: GET /v2/token?access_token=ACCESS_TOKEN HTTP/1.1 Host: api.figshare.com Example with curl : curl https://api.figshare.com/v2?access_token=ACCESS_TOKEN Errors Endpoints can respond with error responses. The common error responses for all endpoints are presented below and errors specific to individual enpoints are documented along with the endpoint. Each error response will have a specific HTTP status code and a JSON body with the following fields: Field Description message A human friendly message explaining the error. code A machine friendly error code, used by the dev team to identify the error. data An object containing extra information about the error. Documented for each error. 404 Not found Trying to access resources that do not exist, will trigger this response from the API. This is also returned if you try to access a resource on which you don't have a read permission. 400 Bad request Sending a body that cannot be parsed as JSON will result in this error response. 422 Unprocessable Entity Sending an invalid data structure in the body will trigger this error. Invalid data can be any of the following: missing field invalid value for a field any other rules specific to an endpoint 401 Unauthorized This error is returned when the authorization was unsuccessfull. This can be either due to: missing authorization info in the request invalid or unknown authorization info expired or disabled account 403 Forbidden This response is presented whenever you try to do something which is not permitted for your current authorization. authorization info Searching, filtering and pagination Endpoints that list items usually support any of the following features: pagination ordering searching filtering Pagination params Pagination can be done by specifing either page and page_size params pair or the limit and offset params pair. If confusing combinations appear in a request, a 422 Unprocessable Entity will be returned. field type default description page int 1 Page number page_size int 10 The number of results included on a page limit int 10 Number of results included on a page offset int 0 Where to start the listing(the offset of the first result) Please note that there's a limit on the maximum offset or page number you can require. The offset is currently limited at 1000 and if exceeded a 422 Unprocessable Entity error will be returned. For pages, it depends on the page_size but for a page_size of 10 , the maximum page would be 1000 / 10 = 100 Ordering params Ordering is done via the order and order_direction params. field type default description order string varies The field by which to order. Default varies by endpoint/resource. For articles and collections, valid values are: published_date , modified_date , views , shares , downloads and cites . order_direction string varies Only asc and desc values are supported. Default varies by endpoint/resource Searching params field type description search_for string Search endpoints require this field. Usually min length is 3 Filtering params Some endpoints allow filtering results. Filters are extra fields in the body and the documentation for each endpoint will present them in detail. Rate limiting Not implemented at this point. Conditional requests Most responses should return an ETag header and a Last-Modified header. You can use the values of these headers to create conditional requests. We encourage to use these whenever possible. CORS policy The API supports CORS for AJAX requests from any origin.","title":"API feature list"},{"location":"api/#api-feature-list","text":"The figshare api v2 is accessible at https://api.figshare.com/v2. All communication is done through https and all data is encoded as JSON . Sending parameters Resource representations Authentication Errors Searching, filtering and pagination Rate limiting Conditional requests CORS policy Endpoints collections items projects","title":"API feature list"},{"location":"api/#sending-parameters","text":"More often than not you need to send parameters to an endpoint. For GET requests these are usualy sent in the query string but for POST and PUT requests they are usually in the body of the request.","title":"Sending parameters"},{"location":"api/#query-string","text":"Query strings can contain parameters encoded as application/x-www-form-urlencoded . Very common for GET requests. Example : Sending page parameter when listing articles: GET /v2/articles?page=3 HTTP/1.1 Host: api.figshare.com Authorization: token a287ab8c7ebdbe6","title":"Query string"},{"location":"api/#request-json-body","text":"POST and PUT request usualy read their params from the body of the http request. Our API only understands application/json encoded bodies. Example : Sending search_for parameter when searching for articles: POST /v2/articles/search HTTP/1.1 Host: api.figshare.com Authorization: token a287ab8c7ebdbe6 { search_for : figshare }","title":"Request json body"},{"location":"api/#resource-representations","text":"Resources can be presented differently across endpoints. Usually endpoints that return a list of resources will send a lighter representation of each resource while an endpoint for an individual resource will use a more detailed and complete representation. Representations for each resource type are documented here and the documentation for each endpoint will specify what kind of representation it's using. Blank resource fields are included in the representation as null instead of being omitted.","title":"Resource representations"},{"location":"api/#authentication","text":"The v2 API supports OAuth2 access tokens, issued as described in the oauth documentation page . In addition to oauth access tokens, you can also use a personal token which grants you full access to your account. Personal tokens can be created and managed from the applications page at figshare. Any of these tokens can be used to authenticate and there are 2 options to include them in requests:","title":"Authentication"},{"location":"api/#http-header-recommended","text":"GET /v2/token HTTP/1.1 Host: api.figshare.com Authorization: token ACCESS_TOKEN Example with curl : curl -H Authorization: token ACCESS_TOKEN https://api.figshare.com/v2","title":"HTTP header (recommended)"},{"location":"api/#query-param","text":"GET /v2/token?access_token=ACCESS_TOKEN HTTP/1.1 Host: api.figshare.com Example with curl : curl https://api.figshare.com/v2?access_token=ACCESS_TOKEN","title":"Query param:"},{"location":"api/#errors","text":"Endpoints can respond with error responses. The common error responses for all endpoints are presented below and errors specific to individual enpoints are documented along with the endpoint. Each error response will have a specific HTTP status code and a JSON body with the following fields: Field Description message A human friendly message explaining the error. code A machine friendly error code, used by the dev team to identify the error. data An object containing extra information about the error. Documented for each error.","title":"Errors"},{"location":"api/#404-not-found","text":"Trying to access resources that do not exist, will trigger this response from the API. This is also returned if you try to access a resource on which you don't have a read permission.","title":"404 Not found"},{"location":"api/#400-bad-request","text":"Sending a body that cannot be parsed as JSON will result in this error response.","title":"400 Bad request"},{"location":"api/#422-unprocessable-entity","text":"Sending an invalid data structure in the body will trigger this error. Invalid data can be any of the following: missing field invalid value for a field any other rules specific to an endpoint","title":"422 Unprocessable Entity"},{"location":"api/#401-unauthorized","text":"This error is returned when the authorization was unsuccessfull. This can be either due to: missing authorization info in the request invalid or unknown authorization info expired or disabled account","title":"401 Unauthorized"},{"location":"api/#403-forbidden","text":"This response is presented whenever you try to do something which is not permitted for your current authorization. authorization info","title":"403 Forbidden"},{"location":"api/#searching-filtering-and-pagination","text":"Endpoints that list items usually support any of the following features: pagination ordering searching filtering","title":"Searching, filtering and pagination"},{"location":"api/#pagination-params","text":"Pagination can be done by specifing either page and page_size params pair or the limit and offset params pair. If confusing combinations appear in a request, a 422 Unprocessable Entity will be returned. field type default description page int 1 Page number page_size int 10 The number of results included on a page limit int 10 Number of results included on a page offset int 0 Where to start the listing(the offset of the first result) Please note that there's a limit on the maximum offset or page number you can require. The offset is currently limited at 1000 and if exceeded a 422 Unprocessable Entity error will be returned. For pages, it depends on the page_size but for a page_size of 10 , the maximum page would be 1000 / 10 = 100","title":"Pagination params"},{"location":"api/#ordering-params","text":"Ordering is done via the order and order_direction params. field type default description order string varies The field by which to order. Default varies by endpoint/resource. For articles and collections, valid values are: published_date , modified_date , views , shares , downloads and cites . order_direction string varies Only asc and desc values are supported. Default varies by endpoint/resource","title":"Ordering params"},{"location":"api/#searching-params","text":"field type description search_for string Search endpoints require this field. Usually min length is 3","title":"Searching params"},{"location":"api/#filtering-params","text":"Some endpoints allow filtering results. Filters are extra fields in the body and the documentation for each endpoint will present them in detail.","title":"Filtering params"},{"location":"api/#rate-limiting","text":"Not implemented at this point.","title":"Rate limiting"},{"location":"api/#conditional-requests","text":"Most responses should return an ETag header and a Last-Modified header. You can use the values of these headers to create conditional requests. We encourage to use these whenever possible.","title":"Conditional requests"},{"location":"api/#cors-policy","text":"The API supports CORS for AJAX requests from any origin.","title":"CORS policy"},{"location":"api/articles/","text":"Article endpoints Public list public articles search public articles read public article download public files article versions list versions read public article version read public article version embargo read public article version confidentiality Private get own articles search own articles create a new article read own article update article delete own private article reserve doi for article publish article article authors list authors associate new authors associate and replace authors de-associate author article categories list categories associate new categories associate and replace categories de-associate category article files list files initiate new file upload upload file content complete file upload view file information download private files delete file from article article private links list private links create new private link update existing private link disable/delete private link article embargo view embargo settings update embargo settings delete embargo settings article confidentiality view confidentiality settings update confidentiality settings delete confidentiality settings Article public endpoints List public articles GET /v2/articles Input Accepts pagination , sorting , filtering params. See API feature list for details. Accepted filters: field type notes institution int only return collections from this institution group int only return collections from this group published_since date(ISO 8601) Only collections published after the date modified_since date(ISO 8601) Only collections published after the date item_type int Only return collections with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 4 - Fileset, 5 - Poster, 6 - Paper, 7 - Presentation, 8 - Thesis, 9 - Code, 11 - Metadata, 12 - Preprint Defaults: field value order published_date order_direction desc page_size 10 Success Response (list of articles) Status: 200 OK [ ArticlePresenter ] Error Response (Max page number reached) Status: 400 Bad request { message : Max page reached. Please narrow down your search } Search public articles POST /v2/articles/search Input Accepts pagination , sorting , filtering and search params. See API feature list for details. Filters and defaults are the same as for the list public articles Additional filters: field type notes resource_doi str only return collections with this doi To search by resource title include it in the search_for parameter as such: \"search_for\":\":resource_title: title\" Success Response (list of articles) Status: 200 OK [ ArticlePresenter ] Error Response (invalid input) Status: 400 Bad request { message : Invalid value received for order } Error Response (Max page number reached) Status: 400 Bad request { message : Max page reached. Please narrow down your search } Read public article GET /v2/articles/{id} Success Response (article object) Status: 200 OK ArticlePresenter.L2 Error Response (article not found) Status: 404 Not Found { message : Article with specified ID does not exist } Download public files A public article might contain files - a list of PublicFilePresenter dictionaries. In order to download such a public file, one should perform an HTTP GET to the download_url value. Article versions subsection List versions GET /v2/articles/{id}/versions Success Response Status: 200 OK [ ArticleVersionPresenter ] Error Response (article ID not found) Status: 404 Not found { message : Entity not found: article , code : EntityNotFound } Read public article version Read public article that has {id} and {v_number} GET /v2/articles/{id}/versions/{v_number} Success Response (article object for specified version) Status: 200 OK ArticlePresenter.L2 Error Response (Version not found) Status: 404 Not Found { message : Entity not found: ArticleVersion , code : EntityNotFound } Read public article version embargo Read public article embargo that has {id} and {v_number} GET /v2/articles/{id}/versions/{v_number}/embargo Success Response (article object for specified version) Status: 200 OK ArticleEmbargoPresenter Error Response (Version not found) Status: 404 Not Found { message : Entity not found: ArticleVersion , code : EntityNotFound } Read public article version confidentiality Read public article confidentiality that has {id} and {v_number} GET /v2/articles/{id}/versions/{v_number}/confidentiality Success Response (article object for specified version) Status: 200 OK ArticleConfidentialityPresenter Error Response (Version not found) Status: 404 Not Found { message : Version does not exist } Article private endpoints (OAuth required) Get own articles GET /v2/account/articles Input Name Type Description page int Show specified page only. Default is 1. Max page is 100. To see more than 100 pages, the search endpoint must be used to narrow down the results page_size int How many entries per page to show. Default is 10. OR Name Type Description offset int The first entry to return. The offset of the initial entry is 0 (not 1). limit int The number of returned entries. Default is 10. By default the items are sorted by created_date , not published_date . Success Response (list of articles) Status: 200 OK [ ArticlePresenter ] Error Response (Max page number reached) Status: 400 Bad request { message : Max page reached. Please narrow down your search } Search own articles POST /v2/account/articles/search Input Name Type Description page int Show specified page only. Default is 1. Max is 100 page_size int How many entries per page to show. Default is 10. Max is 100 search_for str (query)String to perform search for. Minimum of 4 characters published_since date (filter)Narrow search to articles published since the specified date modified_since date (filter)Narrow search to articles modified since the specified date institution int (filter)Filter results for this instritution only group int (filter)Filter results for this institution group only order str (sort)Perform a sort using the order . Valid values are: published_date , modified_date order_direction str (sort)How to sort. Descending or ascending. Valid values are: desc , asc resource_id str only return collections with this resource_id resource_doi str only return collections with this resource_doi item_type int Only return collections with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 4 - Fileset, 5 - Poster, 6 - Paper, 7 - Presentation, 8 - Thesis, 9 - Code, 11 - Metadata, 12 - Preprint To search by resource title include it in the search_for parameter as such: \"search_for\":\":resource_title: title\" Alternatively, instead of page and page_size , one can use the following params for pagination: Name Type Description offset int The first entry to return. The offset of the initial entry is 0 (not 1). limit int The number of returned entries. Default is 10. Success Response (list of articles) Status: 200 OK [ ArticlePresenter ] Error Response (invalid input) Status: 400 Bad request { message : Invalid value received for order } Error Response (Max page number reached) Status: 400 Bad request { message : Max page reached. Please narrow down your search } Create a new article POST /v2/account/articles Input Name Type Description title str The title for this article description str The article description. In a publisher case, usually this is the remote article description tags array of str List of tags to be associated with the article (e.g [\"tag1\", \"tag2\", \"tagn\"]). Keywords can be used instead keywords array of str List of keywords to be associated with the article (e.g [\"tag1\", \"tag2\", \"tagn\"]). Tags can be used instead references array of str List of links to be associated with the article (e.g [\"http://link1\", \"http://link2\", \"http://link3\"]) categories array of int List of category ids to be associated with the article(e.g [1, 23, 33, 66]) authors array List of authors to be assosciated with the article. The list can contain author ids or author names [{\"id\": 12121}, {\"id\": 34345}, {\"name\": \"John Doe\"}]. No more than 10 authors. For adding more authors use the specific authors endpoint. custom_fields dict List of key, values pairs to be associated with the article defined_type str Article type, one of ['figure', 'media', 'dataset', 'fileset', 'poster', 'paper', 'presentation', 'thesis', 'code', 'metadata'] funding str Grant number or funding authority license int License id for this article. Licenses listing endpoints are described here . doi str Not appliable for regular users. In an institutional case, make sure your group supports setting DOIs. This setting is applied by figshare via opening a ticket through our support/helpdesk system. resource_doi str Not applicable to regular users. In a publisher case, this is the publisher article DOI. resource_title str Not applicable to regular users. In a publisher case, this is the publisher article title. Success Response Status: 201 Created Location: https://api.figshare.com/v2/account/articles/123 Read own article GET /v2/account/articles/{id} Success Response Status: 200 OK ArticlePresenterL2 Error Response (Id not found) Status: 404 Not found { message : Article not found } Update article PUT /v2/account/articles/{id} Input Name Type Description title str The title for this article - mandatory description str The article description. In a publisher case, usually this is the remote article description tags array of str List of tags to be associated with the article (e.g [\"tag1\", \"tag2\", \"tagn\"]) references array of str List of links to be associated with the article (e.g [\"http://link1\", \"http://link2\", \"http://link3\"]) categories array of int List of category ids to be associated with the article(e.g [1, 23, 33, 66]) authors array List of authors to be assosciated with the article. The list can contain author ids or author names [{\"id\": 12121}, {\"id\": 34345}, {\"name\": \"John Doe\"}]. No more than 10 authors. For adding more authors use the specific authors endpoint. custom_fields dict List of key, values pairs to be associated with the article defined_type str Article type, one of ['figure', 'media', 'dataset', 'fileset', 'poster', 'paper', 'presentation', 'thesis', 'code', 'metadata'] funding str Grant number or funding authority license int License id for this article. Licenses listing endpoints are described here . doi str Not appliable for regular users. In an institutional case, make sure your group supports setting DOIs. This setting is applied by figshare via opening a ticket through our support/helpdesk system. resource_doi str Not applicable to regular users. In a publisher case, this is the publisher article DOI. resource_title str Not applicable to regular users. In a publisher case, this is the publisher article title. Success Response Status: 205 Reset Content Location: https://api.figshare.com/v2/account/articles/123 Error Response (Id not found) Status: 404 Not found { message : Article not found } Delete own private article DELETE /v2/account/articles/{id} Success Response Status: 204 No Content Error Response (Id not found) Status: 404 Not found { message : article not found } Reserve DOI for article** POST /v2/account/articles/{id}/reserve_doi Success Response Status: 200 OK { doi : 10.5072/FK2.FIGSHARE.20345 } Error Response (Id not found) Status: 404 Not found { message : article not found } Publish article POST /v2/account/articles/{id}/publish Notes : - If the whole article is under embargo , it will not be published immediatly, but when the embargo expires or is lifted. - When an article is published, a new public version will be generated. Any further updates to the article will affect the private article data. In order to make these changes publicly visible, an explicit publish operation is needed. Success Response Status: 201 Created Location: https://api.figshare.com/v2/articles/123 Error Response (Id not found) Status: 404 Not found { message : article not found } Error Response (Missing mandatory fields for publish (e.g authors)) Status: 400 Bad request { message : Missing mandatory field for publication - authors } Article authors subsection List authors GET /v2/account/articles/{id}/authors Success Response Status: 200 OK [ AuthorPresenter ] Error Response (article Id not found) Status: 404 Not found { message : article not found } Associate new authors with the article POST /v2/account/articles/{id}/authors Input Name Type Description authors array List of authors to be assosciated with the article. The list can contain author ids or author names [{\"id\": 12121}, {\"id\": 34345}, {\"name\": \"John Doe\"}]. No more than 10 authors. For adding more authors use the specific authors endpoint. Success Response Status: 205 Reset Content Location: https://api.figshare.com/v2/account/articles/123/authors Error Response (Author(s) id not found) Status: 400 Bad request { message : Author with ID not found } Associate and replace existing authors of this article PUT /v2/account/articles/{id}/authors Input Name Type Description authors array List of authors to be assosciated with the article. The list can contain author ids or author names [{\"id\": 12121}, {\"id\": 34345}, {\"name\": \"John Doe\"}]. No more than 10 authors. For adding more authors use the specific authors endpoint. Success Response Status: 205 Reset Content Location: https://api.figshare.com/v2/account/articles/123/authors Error Response (Author(s) id not found) Status: 400 Bad request { message : Author with ID not found } De-associate author from article DELETE /v2/account/articles/{id}/authors/{author_id} Success Response Status: 204 No Content Error Response (Author(s) id not found) Status: 400 Bad request { message : Author with ID not found } article categories subsection List categories GET /v2/account/articles/{id}/categories Success Response Status: 200 OK [ CategoryPresenter ] Associate new categories with the article POST /v2/account/articles/{id}/categories Input Name Type Description categories array of int List of new categories to be assosciated with the article Success Response Status: 205 Reset Content CategoryPresenter Error Response (Category ID not found) Status: 400 Bad request { message : Category with ID not found } Associate and replace existing categories of this article PUT /v2/account/articles/{id}/categories Input Name Type Description categories array of int List of categories to be assosciated with the article. Existing categories will be replaced Success Response Status: 205 Reset Content CategoryPresenter Error Response (Catgeory ID not found) Status: 400 Bad request { message : Category with ID not found } De-associate category from article DELETE /v2/account/articles/{id}/categories/{category_id} Success Response Status: 204 No Content Error Response (Category id not found) Status: 404 Bad request { message : Category with ID not found } Article files subsection Steps to upload file Initiate file upload - this request returns an endpoint with file data Send a GET request to the Uploader Service with the upload_url (which also contains the upload_token ) provided in previous step and receive the number of file parts Upload / Delete / Retry uploading file parts until all parts are uploaded successfully Complete file upload List files GET /v2/account/articles/{id}/files Success Response Status: 200 OK Body: List of PrivateFilePresenter Initiate new file upload within the article POST /v2/account/articles/{id}/files Input Name Type Description link str Url for an existing file that will not be uploaded on figshare or Name Type Description md5 str MD5 sum pre computed on the client side name str File name including the extension size int File size in bytes Success Response Status: 201 Created Location: /v2/account/articles/{id}/files/{file_id} Upload file content Figshare Upload Service Complete file upload POST /v2/account/articles/{id}/files/{file_id} Success Response Status: 202 Accepted Error Response (File_id not found) Status: 404 Not found { message : File not found } View file information GET /v2/account/articles/{id}/files/{file_id} Success Response Status: 200 OK Body: PrivateFilePresenter Error Response (File_id not found) Status: 404 Not found { message : File not found } Download private files Download private files hosted on figshare The downloader subsystem handles all downloads for files hosted on figshare. The base URL is https://ndownloader.figshare.com. In order to access private files, some form of authorization is needed. Most of the time, the session from the website will suffice but the app also supports oauth tokens and private links. An oauth or private link token can be sent as a param in the query string: GET /files/23434?token=28a7278bea87c HTTP/1.1 Host: ndownloader.figshare.com Accept: */* Use ?private_link=VALUE for private links and ?token=VALUE for OAuth2 access tokens. Download private linked files (not hosted on fighsare) Use the download_url of the file linked to an article. Delete file from article DELETE /v2/account/articles/{id}/files/{file_id} Success Response Status: 204 No Content Error Response (File_id not found) Status: 404 Not found { message : File not found } Article private links subsection List private links GET /v2/account/articles/{id}/private_links Success Response Status: 200 OK [ PrivateLinkPresenter ] Create new private link for this article POST /v2/account/articles/{id}/private_links Input Name Type Description expires_date date Date when this private link should expire - optional. By default private links expire in 365 days. Success Response Status: 201 OK Location: https://api.figshare.com/v2/account/articles/123/private_links/kjkjhg234k53o4i45p2o3i456.. Update existing private link for this article PUT /v2/account/articles/{id}/private_links/{private_link_token} Input Name Type Description expires_date date Date when this private link should expire - optional. By default private links expire in 365 days. Success Response Status: 205 Reset Content Location: https://api.figshare.com/v2/account/articles/123/private_links/kjkjhg234k53o4i45p2o3i456.. Error Response (Private Link ID not found) Status: 404 Not found { message : Private Link with ID not found } Disable/delete private link for article DELETE /v2/account/articles/{id}/private_links/{private_link_id} Success Response Status: 204 No Content Error Response (Private link ID not found) Status: 404 Not found { message : Private link with ID not in article } Article embargo subsection View embargo settings GET /v2/account/articles/{id}/embargo Success Response Status: 200 OK ArticleEmbargoPresenter Update embargo settings PUT /v2/account/articles/{id}/embargo Note : setting an article under whole embargo does not imply that the article will be published when the embargo will expire. You must explicitly call the publish endpoint to enable this functionality. Input Name Type Description is_embargoed bool Confidentiality status. True, False embargo_type str Embargo can be enabled at the article or the file level. Possible values: article , file embargo_date date Date when the embargo expires and the article gets published embargo_reason str Reason for setting embargo Success Response Status: 205 Reset Content Location: http://api.figshare.com/v2/account/articles/2000688/embargo Input error Status: 400 Bad request { message : Invalid expires date } Delete embargo settings DELETE /v2/account/articles/{id}/embargo Success Response Status: 204 No Content Article confidentiality subsection View confidentiality settings GET /v2/account/articles/{id}/confidentiality Success Response Status: 200 OK ArticleConfidentialityPresenter Update confidentiality settings PUT /v2/account/articles/{id}/confidentiality Input Name Type Description reason str Confidentiality reason Success Response Status: 200 OK Location: http://api.figshare.com/v2/account/articles/2000688/confidentiality Delete confidentiality settings DELETE /v2/account/articles/{id}/confidentiality Success Response Status: 204 No Content","title":"Article endpoints"},{"location":"api/articles/#article-endpoints","text":"Public list public articles search public articles read public article download public files article versions list versions read public article version read public article version embargo read public article version confidentiality Private get own articles search own articles create a new article read own article update article delete own private article reserve doi for article publish article article authors list authors associate new authors associate and replace authors de-associate author article categories list categories associate new categories associate and replace categories de-associate category article files list files initiate new file upload upload file content complete file upload view file information download private files delete file from article article private links list private links create new private link update existing private link disable/delete private link article embargo view embargo settings update embargo settings delete embargo settings article confidentiality view confidentiality settings update confidentiality settings delete confidentiality settings","title":"Article endpoints"},{"location":"api/articles/#article-public-endpoints","text":"","title":"Article public endpoints"},{"location":"api/articles/#list-public-articles","text":"GET /v2/articles Input Accepts pagination , sorting , filtering params. See API feature list for details. Accepted filters: field type notes institution int only return collections from this institution group int only return collections from this group published_since date(ISO 8601) Only collections published after the date modified_since date(ISO 8601) Only collections published after the date item_type int Only return collections with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 4 - Fileset, 5 - Poster, 6 - Paper, 7 - Presentation, 8 - Thesis, 9 - Code, 11 - Metadata, 12 - Preprint Defaults: field value order published_date order_direction desc page_size 10 Success Response (list of articles) Status: 200 OK [ ArticlePresenter ] Error Response (Max page number reached) Status: 400 Bad request { message : Max page reached. Please narrow down your search }","title":"List public articles"},{"location":"api/articles/#search-public-articles","text":"POST /v2/articles/search Input Accepts pagination , sorting , filtering and search params. See API feature list for details. Filters and defaults are the same as for the list public articles Additional filters: field type notes resource_doi str only return collections with this doi To search by resource title include it in the search_for parameter as such: \"search_for\":\":resource_title: title\" Success Response (list of articles) Status: 200 OK [ ArticlePresenter ] Error Response (invalid input) Status: 400 Bad request { message : Invalid value received for order } Error Response (Max page number reached) Status: 400 Bad request { message : Max page reached. Please narrow down your search }","title":"Search public articles"},{"location":"api/articles/#read-public-article","text":"GET /v2/articles/{id} Success Response (article object) Status: 200 OK ArticlePresenter.L2 Error Response (article not found) Status: 404 Not Found { message : Article with specified ID does not exist }","title":"Read public article"},{"location":"api/articles/#download-public-files","text":"A public article might contain files - a list of PublicFilePresenter dictionaries. In order to download such a public file, one should perform an HTTP GET to the download_url value.","title":"Download public files"},{"location":"api/articles/#article-versions-subsection","text":"","title":"Article versions subsection"},{"location":"api/articles/#list-versions","text":"GET /v2/articles/{id}/versions Success Response Status: 200 OK [ ArticleVersionPresenter ] Error Response (article ID not found) Status: 404 Not found { message : Entity not found: article , code : EntityNotFound }","title":"List versions"},{"location":"api/articles/#read-public-article-version","text":"Read public article that has {id} and {v_number} GET /v2/articles/{id}/versions/{v_number} Success Response (article object for specified version) Status: 200 OK ArticlePresenter.L2 Error Response (Version not found) Status: 404 Not Found { message : Entity not found: ArticleVersion , code : EntityNotFound }","title":"Read public article version"},{"location":"api/articles/#read-public-article-version-embargo","text":"Read public article embargo that has {id} and {v_number} GET /v2/articles/{id}/versions/{v_number}/embargo Success Response (article object for specified version) Status: 200 OK ArticleEmbargoPresenter Error Response (Version not found) Status: 404 Not Found { message : Entity not found: ArticleVersion , code : EntityNotFound }","title":"Read public article version embargo"},{"location":"api/articles/#read-public-article-version-confidentiality","text":"Read public article confidentiality that has {id} and {v_number} GET /v2/articles/{id}/versions/{v_number}/confidentiality Success Response (article object for specified version) Status: 200 OK ArticleConfidentialityPresenter Error Response (Version not found) Status: 404 Not Found { message : Version does not exist }","title":"Read public article version confidentiality"},{"location":"api/articles/#article-private-endpoints-oauth-required","text":"","title":"Article private endpoints (OAuth required)"},{"location":"api/articles/#get-own-articles","text":"GET /v2/account/articles Input Name Type Description page int Show specified page only. Default is 1. Max page is 100. To see more than 100 pages, the search endpoint must be used to narrow down the results page_size int How many entries per page to show. Default is 10. OR Name Type Description offset int The first entry to return. The offset of the initial entry is 0 (not 1). limit int The number of returned entries. Default is 10. By default the items are sorted by created_date , not published_date . Success Response (list of articles) Status: 200 OK [ ArticlePresenter ] Error Response (Max page number reached) Status: 400 Bad request { message : Max page reached. Please narrow down your search }","title":"Get own articles"},{"location":"api/articles/#search-own-articles","text":"POST /v2/account/articles/search Input Name Type Description page int Show specified page only. Default is 1. Max is 100 page_size int How many entries per page to show. Default is 10. Max is 100 search_for str (query)String to perform search for. Minimum of 4 characters published_since date (filter)Narrow search to articles published since the specified date modified_since date (filter)Narrow search to articles modified since the specified date institution int (filter)Filter results for this instritution only group int (filter)Filter results for this institution group only order str (sort)Perform a sort using the order . Valid values are: published_date , modified_date order_direction str (sort)How to sort. Descending or ascending. Valid values are: desc , asc resource_id str only return collections with this resource_id resource_doi str only return collections with this resource_doi item_type int Only return collections with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 4 - Fileset, 5 - Poster, 6 - Paper, 7 - Presentation, 8 - Thesis, 9 - Code, 11 - Metadata, 12 - Preprint To search by resource title include it in the search_for parameter as such: \"search_for\":\":resource_title: title\" Alternatively, instead of page and page_size , one can use the following params for pagination: Name Type Description offset int The first entry to return. The offset of the initial entry is 0 (not 1). limit int The number of returned entries. Default is 10. Success Response (list of articles) Status: 200 OK [ ArticlePresenter ] Error Response (invalid input) Status: 400 Bad request { message : Invalid value received for order } Error Response (Max page number reached) Status: 400 Bad request { message : Max page reached. Please narrow down your search }","title":"Search own articles"},{"location":"api/articles/#create-a-new-article","text":"POST /v2/account/articles Input Name Type Description title str The title for this article description str The article description. In a publisher case, usually this is the remote article description tags array of str List of tags to be associated with the article (e.g [\"tag1\", \"tag2\", \"tagn\"]). Keywords can be used instead keywords array of str List of keywords to be associated with the article (e.g [\"tag1\", \"tag2\", \"tagn\"]). Tags can be used instead references array of str List of links to be associated with the article (e.g [\"http://link1\", \"http://link2\", \"http://link3\"]) categories array of int List of category ids to be associated with the article(e.g [1, 23, 33, 66]) authors array List of authors to be assosciated with the article. The list can contain author ids or author names [{\"id\": 12121}, {\"id\": 34345}, {\"name\": \"John Doe\"}]. No more than 10 authors. For adding more authors use the specific authors endpoint. custom_fields dict List of key, values pairs to be associated with the article defined_type str Article type, one of ['figure', 'media', 'dataset', 'fileset', 'poster', 'paper', 'presentation', 'thesis', 'code', 'metadata'] funding str Grant number or funding authority license int License id for this article. Licenses listing endpoints are described here . doi str Not appliable for regular users. In an institutional case, make sure your group supports setting DOIs. This setting is applied by figshare via opening a ticket through our support/helpdesk system. resource_doi str Not applicable to regular users. In a publisher case, this is the publisher article DOI. resource_title str Not applicable to regular users. In a publisher case, this is the publisher article title. Success Response Status: 201 Created Location: https://api.figshare.com/v2/account/articles/123","title":"Create a new article"},{"location":"api/articles/#read-own-article","text":"GET /v2/account/articles/{id} Success Response Status: 200 OK ArticlePresenterL2 Error Response (Id not found) Status: 404 Not found { message : Article not found }","title":"Read own article"},{"location":"api/articles/#update-article","text":"PUT /v2/account/articles/{id} Input Name Type Description title str The title for this article - mandatory description str The article description. In a publisher case, usually this is the remote article description tags array of str List of tags to be associated with the article (e.g [\"tag1\", \"tag2\", \"tagn\"]) references array of str List of links to be associated with the article (e.g [\"http://link1\", \"http://link2\", \"http://link3\"]) categories array of int List of category ids to be associated with the article(e.g [1, 23, 33, 66]) authors array List of authors to be assosciated with the article. The list can contain author ids or author names [{\"id\": 12121}, {\"id\": 34345}, {\"name\": \"John Doe\"}]. No more than 10 authors. For adding more authors use the specific authors endpoint. custom_fields dict List of key, values pairs to be associated with the article defined_type str Article type, one of ['figure', 'media', 'dataset', 'fileset', 'poster', 'paper', 'presentation', 'thesis', 'code', 'metadata'] funding str Grant number or funding authority license int License id for this article. Licenses listing endpoints are described here . doi str Not appliable for regular users. In an institutional case, make sure your group supports setting DOIs. This setting is applied by figshare via opening a ticket through our support/helpdesk system. resource_doi str Not applicable to regular users. In a publisher case, this is the publisher article DOI. resource_title str Not applicable to regular users. In a publisher case, this is the publisher article title. Success Response Status: 205 Reset Content Location: https://api.figshare.com/v2/account/articles/123 Error Response (Id not found) Status: 404 Not found { message : Article not found }","title":"Update article"},{"location":"api/articles/#delete-own-private-article","text":"DELETE /v2/account/articles/{id} Success Response Status: 204 No Content Error Response (Id not found) Status: 404 Not found { message : article not found }","title":"Delete own private article"},{"location":"api/articles/#reserve-doi-for-article","text":"POST /v2/account/articles/{id}/reserve_doi Success Response Status: 200 OK { doi : 10.5072/FK2.FIGSHARE.20345 } Error Response (Id not found) Status: 404 Not found { message : article not found }","title":"Reserve DOI for article**"},{"location":"api/articles/#publish-article","text":"POST /v2/account/articles/{id}/publish Notes : - If the whole article is under embargo , it will not be published immediatly, but when the embargo expires or is lifted. - When an article is published, a new public version will be generated. Any further updates to the article will affect the private article data. In order to make these changes publicly visible, an explicit publish operation is needed. Success Response Status: 201 Created Location: https://api.figshare.com/v2/articles/123 Error Response (Id not found) Status: 404 Not found { message : article not found } Error Response (Missing mandatory fields for publish (e.g authors)) Status: 400 Bad request { message : Missing mandatory field for publication - authors }","title":"Publish article"},{"location":"api/articles/#article-authors-subsection","text":"","title":"Article authors subsection"},{"location":"api/articles/#list-authors","text":"GET /v2/account/articles/{id}/authors Success Response Status: 200 OK [ AuthorPresenter ] Error Response (article Id not found) Status: 404 Not found { message : article not found }","title":"List authors"},{"location":"api/articles/#associate-new-authors-with-the-article","text":"POST /v2/account/articles/{id}/authors Input Name Type Description authors array List of authors to be assosciated with the article. The list can contain author ids or author names [{\"id\": 12121}, {\"id\": 34345}, {\"name\": \"John Doe\"}]. No more than 10 authors. For adding more authors use the specific authors endpoint. Success Response Status: 205 Reset Content Location: https://api.figshare.com/v2/account/articles/123/authors Error Response (Author(s) id not found) Status: 400 Bad request { message : Author with ID not found }","title":"Associate new authors with the article"},{"location":"api/articles/#associate-and-replace-existing-authors-of-this-article","text":"PUT /v2/account/articles/{id}/authors Input Name Type Description authors array List of authors to be assosciated with the article. The list can contain author ids or author names [{\"id\": 12121}, {\"id\": 34345}, {\"name\": \"John Doe\"}]. No more than 10 authors. For adding more authors use the specific authors endpoint. Success Response Status: 205 Reset Content Location: https://api.figshare.com/v2/account/articles/123/authors Error Response (Author(s) id not found) Status: 400 Bad request { message : Author with ID not found }","title":"Associate and replace existing authors of this article"},{"location":"api/articles/#de-associate-author-from-article","text":"DELETE /v2/account/articles/{id}/authors/{author_id} Success Response Status: 204 No Content Error Response (Author(s) id not found) Status: 400 Bad request { message : Author with ID not found }","title":"De-associate author from article"},{"location":"api/articles/#article-categories-subsection","text":"","title":"article categories subsection"},{"location":"api/articles/#list-categories","text":"GET /v2/account/articles/{id}/categories Success Response Status: 200 OK [ CategoryPresenter ]","title":"List categories"},{"location":"api/articles/#associate-new-categories-with-the-article","text":"POST /v2/account/articles/{id}/categories Input Name Type Description categories array of int List of new categories to be assosciated with the article Success Response Status: 205 Reset Content CategoryPresenter Error Response (Category ID not found) Status: 400 Bad request { message : Category with ID not found }","title":"Associate new categories with the article"},{"location":"api/articles/#associate-and-replace-existing-categories-of-this-article","text":"PUT /v2/account/articles/{id}/categories Input Name Type Description categories array of int List of categories to be assosciated with the article. Existing categories will be replaced Success Response Status: 205 Reset Content CategoryPresenter Error Response (Catgeory ID not found) Status: 400 Bad request { message : Category with ID not found }","title":"Associate and replace existing categories of this article"},{"location":"api/articles/#de-associate-category-from-article","text":"DELETE /v2/account/articles/{id}/categories/{category_id} Success Response Status: 204 No Content Error Response (Category id not found) Status: 404 Bad request { message : Category with ID not found }","title":"De-associate category from article"},{"location":"api/articles/#article-files-subsection","text":"","title":"Article files subsection"},{"location":"api/articles/#steps-to-upload-file","text":"Initiate file upload - this request returns an endpoint with file data Send a GET request to the Uploader Service with the upload_url (which also contains the upload_token ) provided in previous step and receive the number of file parts Upload / Delete / Retry uploading file parts until all parts are uploaded successfully Complete file upload","title":"Steps to upload file"},{"location":"api/articles/#list-files","text":"GET /v2/account/articles/{id}/files Success Response Status: 200 OK Body: List of PrivateFilePresenter","title":"List files"},{"location":"api/articles/#initiate-new-file-upload-within-the-article","text":"POST /v2/account/articles/{id}/files Input Name Type Description link str Url for an existing file that will not be uploaded on figshare or Name Type Description md5 str MD5 sum pre computed on the client side name str File name including the extension size int File size in bytes Success Response Status: 201 Created Location: /v2/account/articles/{id}/files/{file_id}","title":"Initiate new file upload within the article"},{"location":"api/articles/#upload-file-content","text":"Figshare Upload Service","title":"Upload file content"},{"location":"api/articles/#complete-file-upload","text":"POST /v2/account/articles/{id}/files/{file_id} Success Response Status: 202 Accepted Error Response (File_id not found) Status: 404 Not found { message : File not found }","title":"Complete file upload"},{"location":"api/articles/#view-file-information","text":"GET /v2/account/articles/{id}/files/{file_id} Success Response Status: 200 OK Body: PrivateFilePresenter Error Response (File_id not found) Status: 404 Not found { message : File not found }","title":"View file information"},{"location":"api/articles/#download-private-files","text":"","title":"Download private files"},{"location":"api/articles/#download-private-files-hosted-on-figshare","text":"The downloader subsystem handles all downloads for files hosted on figshare. The base URL is https://ndownloader.figshare.com. In order to access private files, some form of authorization is needed. Most of the time, the session from the website will suffice but the app also supports oauth tokens and private links. An oauth or private link token can be sent as a param in the query string: GET /files/23434?token=28a7278bea87c HTTP/1.1 Host: ndownloader.figshare.com Accept: */* Use ?private_link=VALUE for private links and ?token=VALUE for OAuth2 access tokens.","title":"Download private files hosted on figshare"},{"location":"api/articles/#download-private-linked-files-not-hosted-on-fighsare","text":"Use the download_url of the file linked to an article.","title":"Download private linked files (not hosted on fighsare)"},{"location":"api/articles/#delete-file-from-article","text":"DELETE /v2/account/articles/{id}/files/{file_id} Success Response Status: 204 No Content Error Response (File_id not found) Status: 404 Not found { message : File not found }","title":"Delete file  from article"},{"location":"api/articles/#article-private-links-subsection","text":"","title":"Article private links subsection"},{"location":"api/articles/#list-private-links","text":"GET /v2/account/articles/{id}/private_links Success Response Status: 200 OK [ PrivateLinkPresenter ]","title":"List private links"},{"location":"api/articles/#create-new-private-link-for-this-article","text":"POST /v2/account/articles/{id}/private_links Input Name Type Description expires_date date Date when this private link should expire - optional. By default private links expire in 365 days. Success Response Status: 201 OK Location: https://api.figshare.com/v2/account/articles/123/private_links/kjkjhg234k53o4i45p2o3i456..","title":"Create new private link for this article"},{"location":"api/articles/#update-existing-private-link-for-this-article","text":"PUT /v2/account/articles/{id}/private_links/{private_link_token} Input Name Type Description expires_date date Date when this private link should expire - optional. By default private links expire in 365 days. Success Response Status: 205 Reset Content Location: https://api.figshare.com/v2/account/articles/123/private_links/kjkjhg234k53o4i45p2o3i456.. Error Response (Private Link ID not found) Status: 404 Not found { message : Private Link with ID not found }","title":"Update existing private link for this  article"},{"location":"api/articles/#disabledelete-private-link-for-article","text":"DELETE /v2/account/articles/{id}/private_links/{private_link_id} Success Response Status: 204 No Content Error Response (Private link ID not found) Status: 404 Not found { message : Private link with ID not in article }","title":"Disable/delete private link for article"},{"location":"api/articles/#article-embargo-subsection","text":"","title":"Article embargo subsection"},{"location":"api/articles/#view-embargo-settings","text":"GET /v2/account/articles/{id}/embargo Success Response Status: 200 OK ArticleEmbargoPresenter","title":"View embargo settings"},{"location":"api/articles/#update-embargo-settings","text":"PUT /v2/account/articles/{id}/embargo Note : setting an article under whole embargo does not imply that the article will be published when the embargo will expire. You must explicitly call the publish endpoint to enable this functionality. Input Name Type Description is_embargoed bool Confidentiality status. True, False embargo_type str Embargo can be enabled at the article or the file level. Possible values: article , file embargo_date date Date when the embargo expires and the article gets published embargo_reason str Reason for setting embargo Success Response Status: 205 Reset Content Location: http://api.figshare.com/v2/account/articles/2000688/embargo Input error Status: 400 Bad request { message : Invalid expires date }","title":"Update embargo settings"},{"location":"api/articles/#delete-embargo-settings","text":"DELETE /v2/account/articles/{id}/embargo Success Response Status: 204 No Content","title":"Delete embargo settings"},{"location":"api/articles/#article-confidentiality-subsection","text":"","title":"Article confidentiality subsection"},{"location":"api/articles/#view-confidentiality-settings","text":"GET /v2/account/articles/{id}/confidentiality Success Response Status: 200 OK ArticleConfidentialityPresenter","title":"View confidentiality settings"},{"location":"api/articles/#update-confidentiality-settings","text":"PUT /v2/account/articles/{id}/confidentiality Input Name Type Description reason str Confidentiality reason Success Response Status: 200 OK Location: http://api.figshare.com/v2/account/articles/2000688/confidentiality","title":"Update confidentiality settings"},{"location":"api/articles/#delete-confidentiality-settings","text":"DELETE /v2/account/articles/{id}/confidentiality Success Response Status: 204 No Content","title":"Delete confidentiality settings"},{"location":"api/categories/","text":"Categories public endpoint (no OAuth required) List categories GET /v2/categories Success Response Status: 200 OK A list of Category Presenters Categories private endpoint (OAuth required) List institution categories (including parent Categories) GET /v2/account/categories Success Response Status: 200 OK A list of Category Presenters","title":"Categories public endpoint (no OAuth required)"},{"location":"api/categories/#categories-public-endpoint-no-oauth-required","text":"","title":"Categories public endpoint (no OAuth required)"},{"location":"api/categories/#list-categories","text":"GET /v2/categories Success Response Status: 200 OK A list of Category Presenters","title":"List categories"},{"location":"api/categories/#categories-private-endpoint-oauth-required","text":"","title":"Categories private endpoint (OAuth required)"},{"location":"api/categories/#list-institution-categories-including-parent-categories","text":"GET /v2/account/categories Success Response Status: 200 OK A list of Category Presenters","title":"List institution categories (including parent Categories)"},{"location":"api/collections/","text":"Collection endpoints Public list collections search collections read collection list collection articles list public collection versions read public collection version Private list own collections search own collections create new collection read own collection update collection delete own private collection reserve doi for collection publish collection collection authors list authors associate new authors associate and replace authors de-associate author collection categories list categories associate new categories associate and replace categories de-associate category collection articles list articles associate new articles associate and replace articles de-associate article private links list private links create new private link update existing private link disable/delete private link Public endpoints The following public endpoints don't require authentication/authorization. =========================== List public collections Request GET /v2/collections Accepts pagination , sorting , filtering params. See API feature list for details. Accepted filters: field type notes institution int only return collections from this institution group int only return collections from this group published_since date (ISO 8601) Only collections published after the date modified_since date (ISO 8601) Only collections published after the date Defaults: field value order published_date order_direction desc page_size 10 Response Status: 200 OK Body: List of CollectionPresenter Errors Standard error responses . ============================= Search public collections Request POST /v2/collections/search Search public collections. Accepts pagination , sorting , filtering and search params. See API feature list for details. Filters and defaults are the same as for the list public collections Additional filters: field type notes resource_doi str only return collections with this resource_doi To search by resource title include it in the search_for parameter as such: \"search_for\":\":resource_title: title\" The response body will use the collection light presenter. Response status: 200 OK body: List of CollectionPresenter Errors Standard error responses . ========================== Read public collection Request GET /v2/collections/{id} Response The collection detailed presenter will be used. Status: 200 OK Body: detailed CollectionPresenter(L1) Errors Standard error responses . =================================== List collection public articles Request GET /v2/collections/{id}/articles Accepts pagination params. See API feature list for details. Response Status: 200 OK Body: A list of ArticlePresenters Errors Standard error responses . =================================== List public collection versions Request GET /v2/collections/{id}/versions Response Status: 200 OK Body: List of CollectionVersionPresenter (light) Errors Standard error responses . =================================== Read public collection version GET /v2/collections/{id}/versions/{version_number} Response Status: 200 OK Body: CollectionPresenter (detailed) Errors: Standard error responses . Private endpoints These requests require authorization/authentication. Missing valid auth will result in 403 and 401 errors. The attribute own means resources owned(created or authored) by the authenticated account. ========================== List own collections GET /v2/account/collections Almost identical to list public collections , but default sorting is by created_date , not published_date . ========================== Search own collections POST /v2/account/collections/search Input Name Type Description page int Show specified page only. Default is 1. Max is 100 page_size int How many entries per page to show. Default is 10. Max is 100 search_for str (query)String to perform search for. Minimum of 4 characters published_since date (filter)Narrow search to articles published since the specified date modified_since date (filter)Narrow search to articles modified since the specified date institution int (filter)Filter results for this instritution only group int (filter)Filter results for this institution group only order str (sort)Perform a sort using the order . Valid values are: published_date , modified_date order_direction str (sort)How to sort. Descending or ascending. Valid values are: desc , asc resource_id str only return collections with this resource_id resource_doi str only return collections with this resource_doi To search by resource title include it in the search_for parameter as such: \"search_for\":\":resource_title: title\" Alternatively, instead of page and page_size , one can use the following params for pagination: Name Type Description offset int The first entry to return. The offset of the initial entry is 0 (not 1). limit int The number of returned entries. Default is 10. Success Response (list of articles) Status: 200 OK [ CollectionPresenter ] Error Response (invalid input) Status: 400 Bad request { message : Invalid value received for order } Error Response (Max page number reached) Status: 400 Bad request { message : Max page reached. Please narrow down your search } ========================== Create a new collection POST /v2/account/collections Request Name Type Description title str The title for this collection - mandatory description str The collection description. In a publisher case, usually this is the resource article description articles array of int List of articles to be associated with the collection (e.g [1, 4] ) authors array of dictionaries {\"id\": int} or {\"name\": str} List of new authors to be assosciated with the collection. Each element identifies an author by id OR name (e.g [{\"id\":1212}, {\"name\":\"John Doe\"}] ) categories array of int List of category ids to be associated with the collection (e.g [5, 7, 9] ) tags array of str List of tags to be associated with the collection (e.g [\"tag1\", \"tag2\"] ). Keywords can be used instead keywords array of str List of keywords to be associated with the article (e.g [\"tag1\", \"tag2\", \"tagn\"]). Tags can be used instead references array of str List of references to be associated with the collection (e.g [\"http://figshare.com\", \"http://figshare.com/articles/browse\"] ) resource_id str Not applicable to regular users. In a publisher case, this is the publisher article id resource_doi str Not applicable to regular users. In a publisher case, this is the publisher article DOI resource_link str Not applicable to regular users. In a publisher case, this is the publisher article link resource_title str Not applicable to regular users. In a publisher case, this is the publisher article title resource_version int Not applicable to regular users. In a publisher case, this is the publisher article version custom_fields dict List of key, values pairs to be associated with the collection. Similar to custom article fields Response Status: 201 Created Headers: Location: https://api.figshare.com/v2/account/collections/123 Body: CollectionPresenter (detailed) Errors Standard error responses . ======================= Read own collection GET /v2/account/collections/{id} Response Status: 200 OK Body: CollectionPresenter (detailed) Errors Standard error responses . Update collection PUT /v2/account/collections/{id} Input Name Type Description title str The title for this collection description str The collection description. In a publisher case, usually this is the resource article description articles array of int List of articles to be associated with the collection (e.g [1, 4] ) authors array of dictionaries {\"id\": int} or {\"name\": str} List of new authors to be assosciated with the collection. Each element identifies an author by id OR name .(e.g [{\"id\":1212}, {\"name\":\"John Doe\"}] ) categories array of int List of category ids to be associated with the collection (e.g [5, 7, 9] ) tags array of str List of tags to be associated with the collection (e.g [\"tag1\", \"tag2\"] ) references array of str List of references to be associated with the collection (e.g [\"http://figshare.com\", \"http://figshare.com/articles/browse\"] ) resource_id str Not applicable to regular users. In a publisher case, this is the publisher article id resource_doi str Not applicable to regular users. In a publisher case, this is the publisher article DOI resource_link str Not applicable to regular users. In a publisher case, this is the publisher article link resource_title str Not applicable to regular users. In a publisher case, this is the publisher article title resource_version int Not applicable to regular users. In a publisher case, this is the publisher article version custom_fields dict List of key, values pairs to be associated with the collection. Similar to custom article fields Success Response Status: 205 Reset Content Location: https://api.figshare.com/v2/account/collections/123 Error Response (Id not found) Status: 404 Not found { message : Collection not found } Delete own private collection DELETE /v2/account/collections/{id} Success Response Status: 204 No content Error Response (Id not found) Status: 404 Not found { message : Collection not found } Reserve DOI for collection** POST /v2/account/collections/{id}/reserve_doi Success Response Status: 200 OK { doi : doi link } Error Response (Id not found) Status: 404 Not found { message : Collection not found } Publish collection POST /v2/account/collections/{id}/publish Note : When a collection is published, a new public version will be generated. Any further updates to the collection will affect the private collection data. In order to make these changes publicly visible, an explicit publish operation is needed. Success Response Status: 201 Created Location: https://api.figshare.com/v2/collections/123 Error Response (Missing mandatory fields for publish (e.g authors)) Status: 428 Precondition failed { message : Collection has no associated authors , code : MissingMandatoryFieldException , data : {} } Collection authors subsection List authors GET /v2/account/collections/{id}/authors To represent the authors, the author's light presenter will be used. Success Response Status: 200 OK [ AuthorPresenter ] Associate new authors with the collection POST /v2/account/collections/{id}/authors Input Name Type Description authors array of dictionaries {'id':int} or {'name':str} List of new authors to be assosciated with the collection. The list can contain author ids or names. Example {\"authors\": [ {\"id\": 1}, {\"name\": \"Joe Doe\"} ] } represents two authors: one identified by id and one by name . Success Response Status: 201 Created Location: https://api.figshare.com/v2/account/collections/123/authors Error Response (Author(s) id not found) Status: 422 Unprocessable Entity { message : Author not found , code : EntityNotFoundException , data : {} } Associate and replace existing authors of this collection PUT /v2/account/collections/{id}/authors Input Name Type Description authors array of dictionaries {'id':int} or {'name':str} List of authors to be assosciated with the collection. The list can contain author ids or names. Example {\"authors\": [ {\"id\": 1}, {\"name\": \"Joe Doe\"} ] } represents two authors: one identified by id and one by name . To represent the author entity, the light presenter will be used. Success Response Status: 205 Reset Content Location: https://api.figshare.com/v2/account/collections/123/authors Error Response (Author(s) id not found) Status: 422 Unprocessable Entity { message : Author not found , code : EntityNotFoundException , data : {} } De-associate author from collection DELETE /v2/account/collections/{id}/authors/{author_id} Success Response Status: 204 No content Error Response (Author id not found) Status: 422 Unprocessable Entity { message : Author not found , code : EntityNotFoundException , data : {} } Collection categories subsection List categories GET /v2/account/collections/{id}/categories Success Response Status: 200 OK [ CategoryPresenter ] Associate new categories with the collection POST /v2/account/collections/{id}/categories Input Name Type Description categories array of int List of new categories to be assosciated with the collection Success Response Status: 201 Created Location: https://api.figshare.com/v2/account/collections/123/categories Error Response (Category ID not found) Status: 422 Unprocessable Entity { message : Category not found , code : EntityNotFoundException , data : {} } Associate and replace existing categories of this collection PUT /v2/account/collections/{id}/categories Input Name Type Description categories array of int List of categories to be assosciated with the collection. Existing categories will be replaced Success Response Status: 205 Reset Content Location: https://api.figshare.com/v2/account/collections/123/categories Error Response (Category ID not found) Status: 422 Unprocessable Entity { message : Category not found , code : EntityNotFoundException , data : {} } De-associate category from collection DELETE /v2/account/collections/{id}/categories/{category_id} Success Response Status: 204 No Content Error Response (Category id not found) Status: 404 Not found { message : Category not found , code : EntityNotFoundException , data : {} } Collection articles subsection List articles GET /v2/account/collections/{id}/articles Success Response Status: 200 OK [ ArticlePresenter ] Associate new articles with the collection POST /v2/account/collections/{id}/articles Input Name Type Description articles array of int List of new articles to be assosciated with the collection. No more then 10 article IDs per request Success Response Status: 201 Created Location: https://api.figshare.com/v2/account/collections/123/articles Error Response (Article ID not found) Status: 422 Unprocessable Entity { message : Article not found , code : EntityNotFoundException , data : {} } Associate and replace existing articles of this collection PUT /v2/account/collections/{id}/articles Input Name Type Description articles array of int List of articles to be assosciated with the collection. Existing articles will be replaced. No more then 10 article IDs To represent the article entity, the light presenter will be used. Success Response Status: 205 Reset Content Location: https://api.figshare.com/v2/account/collections/123/articles Error Response (Article ID not found in collection) Status: 422 Unprocessable Entity { message : Article not found , code : EntityNotFoundException , data : {} } De-associate article from collection DELETE /v2/account/collections/{id}/articles/{article_id} Success Response Status: 204 No content Error Response (Article ID not found in collection) Status: 404 Not found { message : Private link not found in collection , code : EntityNotFoundException , data : {} } Collection private links subsection List private links GET /v2/account/collections/{id}/private_links Success Response Status: 200 OK [ PrivateLinkPresenter ] Create new private link for this collection POST /v2/account/collections/{id}/private_links Input Name Type Description read_only bool Optional, default true . Set to false to give private link users editing rights for this collection. expires_date date Date when this private link should expire - optional. By default private links expire in 365 days. Success Response Status: 201 Created Location: https://api.figshare.com/v2/account/collections/123/private_links Update existing private link for this collection PUT /v2/account/collections/{id}/private_links/{p_id} Input Name Type Description expires_date date Date when this private link should expire - optional. By default private links expire in 365 days. Success Response Status: 205 Reset Content Location: https://api.figshare.com/v2/account/collections/123/private_links Error Response (Private Link ID not found) Status: 404 Not found { message : Private link not found , code : EntityNotFoundException , data : {} } Disable/delete private link for collection DELETE /v2/account/collections/{id}/private_links/{private_link_id} Success Response Status: 204 No content Error Response (Private link ID not found) Status: 404 Not found { message : Private link not found , code : EntityNotFoundException , data : {} }","title":"Collection endpoints"},{"location":"api/collections/#collection-endpoints","text":"Public list collections search collections read collection list collection articles list public collection versions read public collection version Private list own collections search own collections create new collection read own collection update collection delete own private collection reserve doi for collection publish collection collection authors list authors associate new authors associate and replace authors de-associate author collection categories list categories associate new categories associate and replace categories de-associate category collection articles list articles associate new articles associate and replace articles de-associate article private links list private links create new private link update existing private link disable/delete private link","title":"Collection endpoints"},{"location":"api/collections/#public-endpoints","text":"The following public endpoints don't require authentication/authorization. ===========================","title":"Public endpoints"},{"location":"api/collections/#list-public-collections","text":"","title":"List public collections"},{"location":"api/collections/#request","text":"GET /v2/collections Accepts pagination , sorting , filtering params. See API feature list for details. Accepted filters: field type notes institution int only return collections from this institution group int only return collections from this group published_since date (ISO 8601) Only collections published after the date modified_since date (ISO 8601) Only collections published after the date Defaults: field value order published_date order_direction desc page_size 10","title":"Request"},{"location":"api/collections/#response","text":"Status: 200 OK Body: List of CollectionPresenter","title":"Response"},{"location":"api/collections/#errors","text":"Standard error responses . =============================","title":"Errors"},{"location":"api/collections/#search-public-collections","text":"","title":"Search public collections"},{"location":"api/collections/#request_1","text":"POST /v2/collections/search Search public collections. Accepts pagination , sorting , filtering and search params. See API feature list for details. Filters and defaults are the same as for the list public collections Additional filters: field type notes resource_doi str only return collections with this resource_doi To search by resource title include it in the search_for parameter as such: \"search_for\":\":resource_title: title\" The response body will use the collection light presenter.","title":"Request"},{"location":"api/collections/#response_1","text":"status: 200 OK body: List of CollectionPresenter","title":"Response"},{"location":"api/collections/#errors_1","text":"Standard error responses . ==========================","title":"Errors"},{"location":"api/collections/#read-public-collection","text":"","title":"Read public collection"},{"location":"api/collections/#request_2","text":"GET /v2/collections/{id}","title":"Request"},{"location":"api/collections/#response_2","text":"The collection detailed presenter will be used. Status: 200 OK Body: detailed CollectionPresenter(L1)","title":"Response"},{"location":"api/collections/#errors_2","text":"Standard error responses . ===================================","title":"Errors"},{"location":"api/collections/#list-collection-public-articles","text":"","title":"List collection public articles"},{"location":"api/collections/#request_3","text":"GET /v2/collections/{id}/articles Accepts pagination params. See API feature list for details.","title":"Request"},{"location":"api/collections/#response_3","text":"Status: 200 OK Body: A list of ArticlePresenters","title":"Response"},{"location":"api/collections/#errors_3","text":"Standard error responses . ===================================","title":"Errors"},{"location":"api/collections/#list-public-collection-versions","text":"","title":"List public collection versions"},{"location":"api/collections/#request_4","text":"GET /v2/collections/{id}/versions","title":"Request"},{"location":"api/collections/#response_4","text":"Status: 200 OK Body: List of CollectionVersionPresenter (light)","title":"Response"},{"location":"api/collections/#errors_4","text":"Standard error responses . ===================================","title":"Errors"},{"location":"api/collections/#read-public-collection-version","text":"GET /v2/collections/{id}/versions/{version_number}","title":"Read public collection version"},{"location":"api/collections/#response_5","text":"Status: 200 OK Body: CollectionPresenter (detailed)","title":"Response"},{"location":"api/collections/#errors_5","text":"Standard error responses .","title":"Errors:"},{"location":"api/collections/#private-endpoints","text":"These requests require authorization/authentication. Missing valid auth will result in 403 and 401 errors. The attribute own means resources owned(created or authored) by the authenticated account. ==========================","title":"Private endpoints"},{"location":"api/collections/#list-own-collections","text":"GET /v2/account/collections Almost identical to list public collections , but default sorting is by created_date , not published_date . ==========================","title":"List own collections"},{"location":"api/collections/#search-own-collections","text":"POST /v2/account/collections/search Input Name Type Description page int Show specified page only. Default is 1. Max is 100 page_size int How many entries per page to show. Default is 10. Max is 100 search_for str (query)String to perform search for. Minimum of 4 characters published_since date (filter)Narrow search to articles published since the specified date modified_since date (filter)Narrow search to articles modified since the specified date institution int (filter)Filter results for this instritution only group int (filter)Filter results for this institution group only order str (sort)Perform a sort using the order . Valid values are: published_date , modified_date order_direction str (sort)How to sort. Descending or ascending. Valid values are: desc , asc resource_id str only return collections with this resource_id resource_doi str only return collections with this resource_doi To search by resource title include it in the search_for parameter as such: \"search_for\":\":resource_title: title\" Alternatively, instead of page and page_size , one can use the following params for pagination: Name Type Description offset int The first entry to return. The offset of the initial entry is 0 (not 1). limit int The number of returned entries. Default is 10. Success Response (list of articles) Status: 200 OK [ CollectionPresenter ] Error Response (invalid input) Status: 400 Bad request { message : Invalid value received for order } Error Response (Max page number reached) Status: 400 Bad request { message : Max page reached. Please narrow down your search } ==========================","title":"Search own collections"},{"location":"api/collections/#create-a-new-collection","text":"POST /v2/account/collections","title":"Create a new collection"},{"location":"api/collections/#request_5","text":"Name Type Description title str The title for this collection - mandatory description str The collection description. In a publisher case, usually this is the resource article description articles array of int List of articles to be associated with the collection (e.g [1, 4] ) authors array of dictionaries {\"id\": int} or {\"name\": str} List of new authors to be assosciated with the collection. Each element identifies an author by id OR name (e.g [{\"id\":1212}, {\"name\":\"John Doe\"}] ) categories array of int List of category ids to be associated with the collection (e.g [5, 7, 9] ) tags array of str List of tags to be associated with the collection (e.g [\"tag1\", \"tag2\"] ). Keywords can be used instead keywords array of str List of keywords to be associated with the article (e.g [\"tag1\", \"tag2\", \"tagn\"]). Tags can be used instead references array of str List of references to be associated with the collection (e.g [\"http://figshare.com\", \"http://figshare.com/articles/browse\"] ) resource_id str Not applicable to regular users. In a publisher case, this is the publisher article id resource_doi str Not applicable to regular users. In a publisher case, this is the publisher article DOI resource_link str Not applicable to regular users. In a publisher case, this is the publisher article link resource_title str Not applicable to regular users. In a publisher case, this is the publisher article title resource_version int Not applicable to regular users. In a publisher case, this is the publisher article version custom_fields dict List of key, values pairs to be associated with the collection. Similar to custom article fields","title":"Request"},{"location":"api/collections/#response_6","text":"Status: 201 Created Headers: Location: https://api.figshare.com/v2/account/collections/123 Body: CollectionPresenter (detailed)","title":"Response"},{"location":"api/collections/#errors_6","text":"Standard error responses . =======================","title":"Errors"},{"location":"api/collections/#read-own-collection","text":"GET /v2/account/collections/{id}","title":"Read own collection"},{"location":"api/collections/#response_7","text":"Status: 200 OK Body: CollectionPresenter (detailed)","title":"Response"},{"location":"api/collections/#errors_7","text":"Standard error responses .","title":"Errors"},{"location":"api/collections/#update-collection","text":"PUT /v2/account/collections/{id} Input Name Type Description title str The title for this collection description str The collection description. In a publisher case, usually this is the resource article description articles array of int List of articles to be associated with the collection (e.g [1, 4] ) authors array of dictionaries {\"id\": int} or {\"name\": str} List of new authors to be assosciated with the collection. Each element identifies an author by id OR name .(e.g [{\"id\":1212}, {\"name\":\"John Doe\"}] ) categories array of int List of category ids to be associated with the collection (e.g [5, 7, 9] ) tags array of str List of tags to be associated with the collection (e.g [\"tag1\", \"tag2\"] ) references array of str List of references to be associated with the collection (e.g [\"http://figshare.com\", \"http://figshare.com/articles/browse\"] ) resource_id str Not applicable to regular users. In a publisher case, this is the publisher article id resource_doi str Not applicable to regular users. In a publisher case, this is the publisher article DOI resource_link str Not applicable to regular users. In a publisher case, this is the publisher article link resource_title str Not applicable to regular users. In a publisher case, this is the publisher article title resource_version int Not applicable to regular users. In a publisher case, this is the publisher article version custom_fields dict List of key, values pairs to be associated with the collection. Similar to custom article fields Success Response Status: 205 Reset Content Location: https://api.figshare.com/v2/account/collections/123 Error Response (Id not found) Status: 404 Not found { message : Collection not found }","title":"Update collection"},{"location":"api/collections/#delete-own-private-collection","text":"DELETE /v2/account/collections/{id} Success Response Status: 204 No content Error Response (Id not found) Status: 404 Not found { message : Collection not found }","title":"Delete own private collection"},{"location":"api/collections/#reserve-doi-for-collection","text":"POST /v2/account/collections/{id}/reserve_doi Success Response Status: 200 OK { doi : doi link } Error Response (Id not found) Status: 404 Not found { message : Collection not found }","title":"Reserve DOI for collection**"},{"location":"api/collections/#publish-collection","text":"POST /v2/account/collections/{id}/publish Note : When a collection is published, a new public version will be generated. Any further updates to the collection will affect the private collection data. In order to make these changes publicly visible, an explicit publish operation is needed. Success Response Status: 201 Created Location: https://api.figshare.com/v2/collections/123 Error Response (Missing mandatory fields for publish (e.g authors)) Status: 428 Precondition failed { message : Collection has no associated authors , code : MissingMandatoryFieldException , data : {} }","title":"Publish collection"},{"location":"api/collections/#collection-authors-subsection","text":"","title":"Collection authors subsection"},{"location":"api/collections/#list-authors","text":"GET /v2/account/collections/{id}/authors To represent the authors, the author's light presenter will be used. Success Response Status: 200 OK [ AuthorPresenter ]","title":"List authors"},{"location":"api/collections/#associate-new-authors-with-the-collection","text":"POST /v2/account/collections/{id}/authors Input Name Type Description authors array of dictionaries {'id':int} or {'name':str} List of new authors to be assosciated with the collection. The list can contain author ids or names. Example {\"authors\": [ {\"id\": 1}, {\"name\": \"Joe Doe\"} ] } represents two authors: one identified by id and one by name . Success Response Status: 201 Created Location: https://api.figshare.com/v2/account/collections/123/authors Error Response (Author(s) id not found) Status: 422 Unprocessable Entity { message : Author not found , code : EntityNotFoundException , data : {} }","title":"Associate new authors with the collection"},{"location":"api/collections/#associate-and-replace-existing-authors-of-this-collection","text":"PUT /v2/account/collections/{id}/authors Input Name Type Description authors array of dictionaries {'id':int} or {'name':str} List of authors to be assosciated with the collection. The list can contain author ids or names. Example {\"authors\": [ {\"id\": 1}, {\"name\": \"Joe Doe\"} ] } represents two authors: one identified by id and one by name . To represent the author entity, the light presenter will be used. Success Response Status: 205 Reset Content Location: https://api.figshare.com/v2/account/collections/123/authors Error Response (Author(s) id not found) Status: 422 Unprocessable Entity { message : Author not found , code : EntityNotFoundException , data : {} }","title":"Associate and replace existing authors of this collection"},{"location":"api/collections/#de-associate-author-from-collection","text":"DELETE /v2/account/collections/{id}/authors/{author_id} Success Response Status: 204 No content Error Response (Author id not found) Status: 422 Unprocessable Entity { message : Author not found , code : EntityNotFoundException , data : {} }","title":"De-associate author from collection"},{"location":"api/collections/#collection-categories-subsection","text":"","title":"Collection categories subsection"},{"location":"api/collections/#list-categories","text":"GET /v2/account/collections/{id}/categories Success Response Status: 200 OK [ CategoryPresenter ]","title":"List categories"},{"location":"api/collections/#associate-new-categories-with-the-collection","text":"POST /v2/account/collections/{id}/categories Input Name Type Description categories array of int List of new categories to be assosciated with the collection Success Response Status: 201 Created Location: https://api.figshare.com/v2/account/collections/123/categories Error Response (Category ID not found) Status: 422 Unprocessable Entity { message : Category not found , code : EntityNotFoundException , data : {} }","title":"Associate new categories with the collection"},{"location":"api/collections/#associate-and-replace-existing-categories-of-this-collection","text":"PUT /v2/account/collections/{id}/categories Input Name Type Description categories array of int List of categories to be assosciated with the collection. Existing categories will be replaced Success Response Status: 205 Reset Content Location: https://api.figshare.com/v2/account/collections/123/categories Error Response (Category ID not found) Status: 422 Unprocessable Entity { message : Category not found , code : EntityNotFoundException , data : {} }","title":"Associate and replace existing categories of this collection"},{"location":"api/collections/#de-associate-category-from-collection","text":"DELETE /v2/account/collections/{id}/categories/{category_id} Success Response Status: 204 No Content Error Response (Category id not found) Status: 404 Not found { message : Category not found , code : EntityNotFoundException , data : {} }","title":"De-associate category from collection"},{"location":"api/collections/#collection-articles-subsection","text":"","title":"Collection articles subsection"},{"location":"api/collections/#list-articles","text":"GET /v2/account/collections/{id}/articles Success Response Status: 200 OK [ ArticlePresenter ]","title":"List articles"},{"location":"api/collections/#associate-new-articles-with-the-collection","text":"POST /v2/account/collections/{id}/articles Input Name Type Description articles array of int List of new articles to be assosciated with the collection. No more then 10 article IDs per request Success Response Status: 201 Created Location: https://api.figshare.com/v2/account/collections/123/articles Error Response (Article ID not found) Status: 422 Unprocessable Entity { message : Article not found , code : EntityNotFoundException , data : {} }","title":"Associate new articles with the collection"},{"location":"api/collections/#associate-and-replace-existing-articles-of-this-collection","text":"PUT /v2/account/collections/{id}/articles Input Name Type Description articles array of int List of articles to be assosciated with the collection. Existing articles will be replaced. No more then 10 article IDs To represent the article entity, the light presenter will be used. Success Response Status: 205 Reset Content Location: https://api.figshare.com/v2/account/collections/123/articles Error Response (Article ID not found in collection) Status: 422 Unprocessable Entity { message : Article not found , code : EntityNotFoundException , data : {} }","title":"Associate and replace existing articles of this collection"},{"location":"api/collections/#de-associate-article-from-collection","text":"DELETE /v2/account/collections/{id}/articles/{article_id} Success Response Status: 204 No content Error Response (Article ID not found in collection) Status: 404 Not found { message : Private link not found in collection , code : EntityNotFoundException , data : {} }","title":"De-associate article from collection"},{"location":"api/collections/#collection-private-links-subsection","text":"","title":"Collection private links subsection"},{"location":"api/collections/#list-private-links","text":"GET /v2/account/collections/{id}/private_links Success Response Status: 200 OK [ PrivateLinkPresenter ]","title":"List private links"},{"location":"api/collections/#create-new-private-link-for-this-collection","text":"POST /v2/account/collections/{id}/private_links Input Name Type Description read_only bool Optional, default true . Set to false to give private link users editing rights for this collection. expires_date date Date when this private link should expire - optional. By default private links expire in 365 days. Success Response Status: 201 Created Location: https://api.figshare.com/v2/account/collections/123/private_links","title":"Create new private link for this collection"},{"location":"api/collections/#update-existing-private-link-for-this-collection","text":"PUT /v2/account/collections/{id}/private_links/{p_id} Input Name Type Description expires_date date Date when this private link should expire - optional. By default private links expire in 365 days. Success Response Status: 205 Reset Content Location: https://api.figshare.com/v2/account/collections/123/private_links Error Response (Private Link ID not found) Status: 404 Not found { message : Private link not found , code : EntityNotFoundException , data : {} }","title":"Update existing private link for this  collection"},{"location":"api/collections/#disabledelete-private-link-for-collection","text":"DELETE /v2/account/collections/{id}/private_links/{private_link_id} Success Response Status: 204 No content Error Response (Private link ID not found) Status: 404 Not found { message : Private link not found , code : EntityNotFoundException , data : {} }","title":"Disable/delete private link for collection"},{"location":"api/file_uploader/","text":"Figshare Upload Service Uploads API Upload status An upload status can be: PENDING - waiting for it's parts to be uploaded COMPLETED - all parts were uploaded and the file was assembled on the storage ABORTED - canceled for some reason(user request, timeout, error) Endpoints GET /upload/ token - get upload info Response: Status Code Explanation Body 200 OK all good explained below 500 Internal Server Error internal error empty 404 Not Found unknown upload token empty 200 OK Body: js { token: \"upload-token\", name: \"my-file.zip\", size: 10249281, md5: \"filemd5\", // as provided on upload creation status: \"PENDING\", parts: [ { // upload parts -- see parts API for representation } ] } Parts API Part status PENDING -- part is ready to be uploaded COMPLETE -- part data has been complete and saved to storage Part locking When a part is being uploaded it is being locked, by setting the locked flag to true. No changes/uploads can happen on this part from other requests. Byte ranges The part range is specified by startOffset and endOffset . They indexes zero-based and inclusive. Example: Given: the following file data: \"abcdefghij\" part1 with startOffset=0 and endOffset=3 part2 with startOffset=4 and endOffset=7 Then: part1 is abcd part2 is efgh Endpoints GET /upload/ token / part_no - get part info Responses: Status Code Explanation Body 200 OK all good explained below 500 Internal Server Error internal error empty 404 Not Found unknown upload token or part number empty 200 OK Body: js { partNo: 3, startOffset: 1024, endOffset: 2047, status: \"PENDING\", locked: false } PUT /upload/ token / part_no - receives part data The entire body of the request is piped as-is to S3. It is assumed that the body is the correct piece of the file, from startOffset to endOffset While this requests is being processed the part is going to be in a locked state. The request can end with a 409 status code if a lock for the part could not be obtained. Warning if content length is less than part size the request will timeout Responses: Status Code Explanation Body 200 OK all good explained below 500 Internal Server Error internal error empty 404 Not Found unknown upload token or part number empty 409 Conflict part data cannot be uploaded empty 200 OK DELETE /upload/ token / part_no - reset part data This will reset the part to it's PENDING state and remove any storage meta. Responses: Status Code Explanation Body 200 Accepted all good empty 500 Internal Server Error internal error empty 404 Not Found unknown upload token or part number empty 409 Conflict upload completed or part locked empty","title":"File uploader"},{"location":"api/file_uploader/#figshare-upload-service","text":"","title":"Figshare Upload Service"},{"location":"api/file_uploader/#uploads-api","text":"","title":"Uploads API"},{"location":"api/file_uploader/#upload-status","text":"An upload status can be: PENDING - waiting for it's parts to be uploaded COMPLETED - all parts were uploaded and the file was assembled on the storage ABORTED - canceled for some reason(user request, timeout, error)","title":"Upload status"},{"location":"api/file_uploader/#endpoints","text":"GET /upload/ token - get upload info Response: Status Code Explanation Body 200 OK all good explained below 500 Internal Server Error internal error empty 404 Not Found unknown upload token empty 200 OK Body: js { token: \"upload-token\", name: \"my-file.zip\", size: 10249281, md5: \"filemd5\", // as provided on upload creation status: \"PENDING\", parts: [ { // upload parts -- see parts API for representation } ] }","title":"Endpoints"},{"location":"api/file_uploader/#parts-api","text":"","title":"Parts API"},{"location":"api/file_uploader/#part-status","text":"PENDING -- part is ready to be uploaded COMPLETE -- part data has been complete and saved to storage","title":"Part status"},{"location":"api/file_uploader/#part-locking","text":"When a part is being uploaded it is being locked, by setting the locked flag to true. No changes/uploads can happen on this part from other requests.","title":"Part locking"},{"location":"api/file_uploader/#byte-ranges","text":"The part range is specified by startOffset and endOffset . They indexes zero-based and inclusive. Example: Given: the following file data: \"abcdefghij\" part1 with startOffset=0 and endOffset=3 part2 with startOffset=4 and endOffset=7 Then: part1 is abcd part2 is efgh","title":"Byte ranges"},{"location":"api/file_uploader/#endpoints_1","text":"GET /upload/ token / part_no - get part info Responses: Status Code Explanation Body 200 OK all good explained below 500 Internal Server Error internal error empty 404 Not Found unknown upload token or part number empty 200 OK Body: js { partNo: 3, startOffset: 1024, endOffset: 2047, status: \"PENDING\", locked: false } PUT /upload/ token / part_no - receives part data The entire body of the request is piped as-is to S3. It is assumed that the body is the correct piece of the file, from startOffset to endOffset While this requests is being processed the part is going to be in a locked state. The request can end with a 409 status code if a lock for the part could not be obtained. Warning if content length is less than part size the request will timeout Responses: Status Code Explanation Body 200 OK all good explained below 500 Internal Server Error internal error empty 404 Not Found unknown upload token or part number empty 409 Conflict part data cannot be uploaded empty 200 OK DELETE /upload/ token / part_no - reset part data This will reset the part to it's PENDING state and remove any storage meta. Responses: Status Code Explanation Body 200 Accepted all good empty 500 Internal Server Error internal error empty 404 Not Found unknown upload token or part number empty 409 Conflict upload completed or part locked empty","title":"Endpoints"},{"location":"api/hr_feed/","text":"HR Feed Endpoints Private upload hrfeed file HRFeed Private Endpoints Upload HRFeed File Request POST /v2/institution/hrfeed/upload The request needs to be of type multipart/form-data and have its Content-Type header set to the same value; the body of the file is sent as the form data. A typical request looks like this: POST /v2/institution/hrfeed/upload HTTP/1.1 Host: api.figshare.com Content-Length: 975 Accept-Encoding: gzip, deflate Accept: */* User-Agent: python-requests/2.5.3 CPython/2.7.10 Linux/4.1.4-1-ARCH Connection: keep-alive Content-Type: multipart/form-data; boundary=529448d158064de596afd8f892c84e15 Authorization: token 86bbaa5d6d51fc0ae2f2defd3a474dac77ae27179ff6d04dd37e74c531bd6ed059eda584b41356337c362a259e482eb36a34825c805344e0600bb875a77444df --529448d158064de596afd8f892c84e15 Content-Disposition: form-data; name= hrfeed ; filename= feed.xml ?xml version= 1.0 ? HRFeed Record UniqueID 1234567 /UniqueID FirstName Jane /FirstName LastName Doe /LastName Title Mrs /Title Initials JD /Initials Suffix /Suffix Email j.doe@sillymail.io /Email IsActive Y /IsActive UserQuota 1048576000 /UserQuota UserAssociationCriteria IT /UserAssociationCriteria /Record Record UniqueID 1234568 /UniqueID FirstName John /FirstName LastName Smith /LastName Title Mr /Title Initials /Initials Suffix /Suffix Email js@seriousness.com /Email IsActive Y /IsActive UserQuota 10485760000 /UserQuota UserAssociationCriteria /UserAssociationCriteria /Record /HRFeed --529448d158064de596afd8f892c84e15-- Examples The following examples all have the final goal of generating and issuing the upper HTTP request. Python One of the simpler examples is in python . For this to work one would need to install the requests python package. #!/usr/bin/env python import requests FILE_NAME = 'feed.xml' API_URL = 'https://api.figshare.com/v2/institution/hrfeed/upload' TOKEN = '86bbaa5d6d51fc0ae2f2defd3a474dac77ae27179ff6d04dd37e74c531bd6ed059eda584b41356337c362a259e482eb36a34825c805344e0600bb875a77444df' def main(): headers = { Authorization : token + TOKEN} with open(FILE_NAME, 'rb') as fin: files = {'hrfeed': (FILE_NAME, fin)} resp = requests.post(API_URL, files=files, headers=headers) print(resp.content) resp.raise_for_status() if __name__ == '__main__': main() Java For java one can use apache httpcomponents : import java.io.File; import java.io.FileInputStream; import java.io.IOException; import java.io.OutputStream; import java.lang.Throwable; import org.apache.http.HttpEntity; import org.apache.http.client.methods.CloseableHttpResponse; import org.apache.http.client.methods.HttpPost; import org.apache.http.entity.ContentType; import org.apache.http.entity.mime.MultipartEntityBuilder; import org.apache.http.impl.client.CloseableHttpClient; import org.apache.http.impl.client.HttpClients; public class HRFeedUploaderExample { public static void main(String[] args) { try { HRFeedUploaderExample hfue = new HRFeedUploaderExample(args[0]); hfue.upload(); } catch (Throwable t) { t.printStackTrace(System.err); } } private static final String API_URL = https://api.figshare.com/v2/institution/hrfeed/upload ; private static final String TOKEN = 86bbaa5d6d51fc0ae2f2defd3a474dac77ae27179ff6d04dd37e74c531bd6ed059eda584b41356337c362a259e482eb36a34825c805344e0600bb875a77444df ; private String fileName = null; HRFeedUploaderExample(String fileName) { this.fileName = fileName; } public void upload() throws IOException { CloseableHttpClient httpClient = HttpClients.createDefault(); HttpPost uploadFile = new HttpPost(API_URL); uploadFile.addHeader( Authorization , token + TOKEN); MultipartEntityBuilder builder = MultipartEntityBuilder.create(); File file = new File(fileName); builder.addBinaryBody( hrfeed , new FileInputStream(file), ContentType.TEXT_PLAIN, file.getName()); HttpEntity multipart = builder.build(); uploadFile.setEntity(multipart); CloseableHttpResponse response = httpClient.execute(uploadFile); int status = response.getStatusLine().getStatusCode(); System.out.println( Status code was: + status); } } Or if you don't mind getting down and dirty with raw HTTP : import java.io.File; import java.io.FileInputStream; import java.io.IOException; import java.io.OutputStream; import java.lang.Throwable; import java.net.URL; import java.net.HttpURLConnection; public class HRFeedUploaderExample { public static void main(String[] args) { try { HRFeedUploaderExample hfue = new HRFeedUploaderExample(args[0]); hfue.upload(); } catch (Throwable t) { t.printStackTrace(System.err); } } private static final String API_URL = https://api.figshare.com/v2/institution/hrfeed/upload ; private static final String TOKEN = 86bbaa5d6d51fc0ae2f2defd3a474dac77ae27179ff6d04dd37e74c531bd6ed059eda584b41356337c362a259e482eb36a34825c805344e0600bb875a77444df ; private String fileName = null; HRFeedUploaderExample(String fileName) { this.fileName = fileName; } public void upload() throws IOException { HttpURLConnection con = (HttpURLConnection) new URL(API_URL).openConnection(); String boundary = 123456789boundary987654321 ; byte[] byteBoundary = ( \\n-- + boundary + \\n ).getBytes( UTF-8 ); con.setDoOutput(true); con.setRequestProperty( Content-Type , multipart/form-data; boundary= + boundary); con.setRequestProperty( Authorization , token + TOKEN); File file = new File(fileName); try (OutputStream out = con.getOutputStream()) { out.write(byteBoundary); out.write(( Content-Disposition: form-data; name=\\ hrfeed\\ ; filename=\\ + fileName + \\ \\n\\n ).getBytes( UTF-8 )); try (FileInputStream in = new FileInputStream(file)) { byte[] data = new byte[(int) file.length()]; in.read(data); out.write(data); } out.write(byteBoundary); } int status = con.getResponseCode(); System.out.println( Status code was: + status); } } C# For the .NET / mono users there's this snippet of code: using System; using System.Net.Http; using System.IO; using System.Threading.Tasks; namespace HRFeedUploadExample { class MainClass { private const String API_URL = https://api.figshare.com/v2/institution/hrfeed/upload ; private const String TOKEN = 86bbaa5d6d51fc0ae2f2defd3a474dac77ae27179ff6d04dd37e74c531bd6ed059eda584b41356337c362a259e482eb36a34825c805344e0600bb875a77444df ; private String fileName = null; public static void Main (string[] args) { MainClass app = new MainClass (args [0]); app.Upload (); } MainClass(String fileName) { this.fileName = fileName; } public void Upload() { HttpClient httpClient = new HttpClient (); httpClient.DefaultRequestHeaders.Add ( Authorization , token + MainClass.TOKEN); MultipartFormDataContent form = new MultipartFormDataContent (); using (StreamReader sr = new StreamReader (this.fileName)) { String content = sr.ReadToEnd (); byte[] data = System.Text.Encoding.UTF8.GetBytes (content); form.Add (new ByteArrayContent (data, 0, data.Length), hrfeed , this.fileName); } Task HttpResponseMessage task = httpClient.PostAsync (MainClass.API_URL, form); task.Wait(); HttpResponseMessage response = task.Result; response.EnsureSuccessStatusCode(); Console.WriteLine ( Status code was: + response.StatusCode); httpClient.Dispose(); } } } CURL Probably one of the most versatile ways of uploading an HRFeed is through curl given the possibility of integrating it into any other command line utility on linux/unix. curl -XPOST\\ -H Authorization: token 86bbaa5d6d51fc0ae2f2defd3a474dac77ae27179ff6d04dd37e74c531bd6ed059eda584b41356337c362a259e482eb36a34825c805344e0600bb875a77444df \\ -F hrfeed=@feed.csv \\ https://api.figshare.com/v2/institution/hrfeed/upload Response Status: 200 OK Body: json { \"message\": \"OK\" } Errors Standard error responses Most common: { message : Previous feed import not complete. , data : null, errcode : FigshareAPIException } when the feed has already been submitted within a 24 hour span. Notes The success response doesn't give much information other than the fact that the system has understood the request, has received the file and has initiated the necessary tasks. There are plans for a way to get more in depth information for the state of the HRFeed Process . The token given in the upper examples is a general fig share API personal token of any of the admins at the institution. No other user should be able to access this endpoint, apart from those given the express permission of uploading HR feeds.","title":"HR Feed Endpoints"},{"location":"api/hr_feed/#hr-feed-endpoints","text":"Private upload hrfeed file","title":"HR Feed Endpoints"},{"location":"api/hr_feed/#hrfeed-private-endpoints","text":"","title":"HRFeed Private Endpoints"},{"location":"api/hr_feed/#upload-hrfeed-file","text":"","title":"Upload HRFeed File"},{"location":"api/hr_feed/#request","text":"POST /v2/institution/hrfeed/upload The request needs to be of type multipart/form-data and have its Content-Type header set to the same value; the body of the file is sent as the form data. A typical request looks like this: POST /v2/institution/hrfeed/upload HTTP/1.1 Host: api.figshare.com Content-Length: 975 Accept-Encoding: gzip, deflate Accept: */* User-Agent: python-requests/2.5.3 CPython/2.7.10 Linux/4.1.4-1-ARCH Connection: keep-alive Content-Type: multipart/form-data; boundary=529448d158064de596afd8f892c84e15 Authorization: token 86bbaa5d6d51fc0ae2f2defd3a474dac77ae27179ff6d04dd37e74c531bd6ed059eda584b41356337c362a259e482eb36a34825c805344e0600bb875a77444df --529448d158064de596afd8f892c84e15 Content-Disposition: form-data; name= hrfeed ; filename= feed.xml ?xml version= 1.0 ? HRFeed Record UniqueID 1234567 /UniqueID FirstName Jane /FirstName LastName Doe /LastName Title Mrs /Title Initials JD /Initials Suffix /Suffix Email j.doe@sillymail.io /Email IsActive Y /IsActive UserQuota 1048576000 /UserQuota UserAssociationCriteria IT /UserAssociationCriteria /Record Record UniqueID 1234568 /UniqueID FirstName John /FirstName LastName Smith /LastName Title Mr /Title Initials /Initials Suffix /Suffix Email js@seriousness.com /Email IsActive Y /IsActive UserQuota 10485760000 /UserQuota UserAssociationCriteria /UserAssociationCriteria /Record /HRFeed --529448d158064de596afd8f892c84e15--","title":"Request"},{"location":"api/hr_feed/#examples","text":"The following examples all have the final goal of generating and issuing the upper HTTP request.","title":"Examples"},{"location":"api/hr_feed/#python","text":"One of the simpler examples is in python . For this to work one would need to install the requests python package. #!/usr/bin/env python import requests FILE_NAME = 'feed.xml' API_URL = 'https://api.figshare.com/v2/institution/hrfeed/upload' TOKEN = '86bbaa5d6d51fc0ae2f2defd3a474dac77ae27179ff6d04dd37e74c531bd6ed059eda584b41356337c362a259e482eb36a34825c805344e0600bb875a77444df' def main(): headers = { Authorization : token + TOKEN} with open(FILE_NAME, 'rb') as fin: files = {'hrfeed': (FILE_NAME, fin)} resp = requests.post(API_URL, files=files, headers=headers) print(resp.content) resp.raise_for_status() if __name__ == '__main__': main()","title":"Python"},{"location":"api/hr_feed/#java","text":"For java one can use apache httpcomponents : import java.io.File; import java.io.FileInputStream; import java.io.IOException; import java.io.OutputStream; import java.lang.Throwable; import org.apache.http.HttpEntity; import org.apache.http.client.methods.CloseableHttpResponse; import org.apache.http.client.methods.HttpPost; import org.apache.http.entity.ContentType; import org.apache.http.entity.mime.MultipartEntityBuilder; import org.apache.http.impl.client.CloseableHttpClient; import org.apache.http.impl.client.HttpClients; public class HRFeedUploaderExample { public static void main(String[] args) { try { HRFeedUploaderExample hfue = new HRFeedUploaderExample(args[0]); hfue.upload(); } catch (Throwable t) { t.printStackTrace(System.err); } } private static final String API_URL = https://api.figshare.com/v2/institution/hrfeed/upload ; private static final String TOKEN = 86bbaa5d6d51fc0ae2f2defd3a474dac77ae27179ff6d04dd37e74c531bd6ed059eda584b41356337c362a259e482eb36a34825c805344e0600bb875a77444df ; private String fileName = null; HRFeedUploaderExample(String fileName) { this.fileName = fileName; } public void upload() throws IOException { CloseableHttpClient httpClient = HttpClients.createDefault(); HttpPost uploadFile = new HttpPost(API_URL); uploadFile.addHeader( Authorization , token + TOKEN); MultipartEntityBuilder builder = MultipartEntityBuilder.create(); File file = new File(fileName); builder.addBinaryBody( hrfeed , new FileInputStream(file), ContentType.TEXT_PLAIN, file.getName()); HttpEntity multipart = builder.build(); uploadFile.setEntity(multipart); CloseableHttpResponse response = httpClient.execute(uploadFile); int status = response.getStatusLine().getStatusCode(); System.out.println( Status code was: + status); } } Or if you don't mind getting down and dirty with raw HTTP : import java.io.File; import java.io.FileInputStream; import java.io.IOException; import java.io.OutputStream; import java.lang.Throwable; import java.net.URL; import java.net.HttpURLConnection; public class HRFeedUploaderExample { public static void main(String[] args) { try { HRFeedUploaderExample hfue = new HRFeedUploaderExample(args[0]); hfue.upload(); } catch (Throwable t) { t.printStackTrace(System.err); } } private static final String API_URL = https://api.figshare.com/v2/institution/hrfeed/upload ; private static final String TOKEN = 86bbaa5d6d51fc0ae2f2defd3a474dac77ae27179ff6d04dd37e74c531bd6ed059eda584b41356337c362a259e482eb36a34825c805344e0600bb875a77444df ; private String fileName = null; HRFeedUploaderExample(String fileName) { this.fileName = fileName; } public void upload() throws IOException { HttpURLConnection con = (HttpURLConnection) new URL(API_URL).openConnection(); String boundary = 123456789boundary987654321 ; byte[] byteBoundary = ( \\n-- + boundary + \\n ).getBytes( UTF-8 ); con.setDoOutput(true); con.setRequestProperty( Content-Type , multipart/form-data; boundary= + boundary); con.setRequestProperty( Authorization , token + TOKEN); File file = new File(fileName); try (OutputStream out = con.getOutputStream()) { out.write(byteBoundary); out.write(( Content-Disposition: form-data; name=\\ hrfeed\\ ; filename=\\ + fileName + \\ \\n\\n ).getBytes( UTF-8 )); try (FileInputStream in = new FileInputStream(file)) { byte[] data = new byte[(int) file.length()]; in.read(data); out.write(data); } out.write(byteBoundary); } int status = con.getResponseCode(); System.out.println( Status code was: + status); } }","title":"Java"},{"location":"api/hr_feed/#c","text":"For the .NET / mono users there's this snippet of code: using System; using System.Net.Http; using System.IO; using System.Threading.Tasks; namespace HRFeedUploadExample { class MainClass { private const String API_URL = https://api.figshare.com/v2/institution/hrfeed/upload ; private const String TOKEN = 86bbaa5d6d51fc0ae2f2defd3a474dac77ae27179ff6d04dd37e74c531bd6ed059eda584b41356337c362a259e482eb36a34825c805344e0600bb875a77444df ; private String fileName = null; public static void Main (string[] args) { MainClass app = new MainClass (args [0]); app.Upload (); } MainClass(String fileName) { this.fileName = fileName; } public void Upload() { HttpClient httpClient = new HttpClient (); httpClient.DefaultRequestHeaders.Add ( Authorization , token + MainClass.TOKEN); MultipartFormDataContent form = new MultipartFormDataContent (); using (StreamReader sr = new StreamReader (this.fileName)) { String content = sr.ReadToEnd (); byte[] data = System.Text.Encoding.UTF8.GetBytes (content); form.Add (new ByteArrayContent (data, 0, data.Length), hrfeed , this.fileName); } Task HttpResponseMessage task = httpClient.PostAsync (MainClass.API_URL, form); task.Wait(); HttpResponseMessage response = task.Result; response.EnsureSuccessStatusCode(); Console.WriteLine ( Status code was: + response.StatusCode); httpClient.Dispose(); } } }","title":"C#"},{"location":"api/hr_feed/#curl","text":"Probably one of the most versatile ways of uploading an HRFeed is through curl given the possibility of integrating it into any other command line utility on linux/unix. curl -XPOST\\ -H Authorization: token 86bbaa5d6d51fc0ae2f2defd3a474dac77ae27179ff6d04dd37e74c531bd6ed059eda584b41356337c362a259e482eb36a34825c805344e0600bb875a77444df \\ -F hrfeed=@feed.csv \\ https://api.figshare.com/v2/institution/hrfeed/upload","title":"CURL"},{"location":"api/hr_feed/#response","text":"Status: 200 OK Body: json { \"message\": \"OK\" }","title":"Response"},{"location":"api/hr_feed/#errors","text":"Standard error responses Most common: { message : Previous feed import not complete. , data : null, errcode : FigshareAPIException } when the feed has already been submitted within a 24 hour span.","title":"Errors"},{"location":"api/hr_feed/#notes","text":"The success response doesn't give much information other than the fact that the system has understood the request, has received the file and has initiated the necessary tasks. There are plans for a way to get more in depth information for the state of the HRFeed Process . The token given in the upper examples is a general fig share API personal token of any of the admins at the institution. No other user should be able to access this endpoint, apart from those given the express permission of uploading HR feeds.","title":"Notes"},{"location":"api/institution_and_groups/","text":"Information about institution and groups These are private endpoints, OAuth is required. Get institution info GET /v2/account/institution Success Response Status: 200 OK Body: Institution Presenter List institution articles GET /v2/account/institution/articles Returns the articles from the institution of the account. User must be administrator of the institution. Success Response Status: 200 OK Body: A list of Group Presenter List groups GET /v2/account/institution/groups Returns the groups for which the account has administrative privileges (assigned and inherited). Success Response Status: 200 OK Body: A list of Group Presenter","title":"Information about institution and groups"},{"location":"api/institution_and_groups/#information-about-institution-and-groups","text":"These are private endpoints, OAuth is required.","title":"Information about institution and groups"},{"location":"api/institution_and_groups/#get-institution-info","text":"GET /v2/account/institution Success Response Status: 200 OK Body: Institution Presenter","title":"Get institution info"},{"location":"api/institution_and_groups/#list-institution-articles","text":"GET /v2/account/institution/articles Returns the articles from the institution of the account. User must be administrator of the institution. Success Response Status: 200 OK Body: A list of Group Presenter","title":"List institution articles"},{"location":"api/institution_and_groups/#list-groups","text":"GET /v2/account/institution/groups Returns the groups for which the account has administrative privileges (assigned and inherited). Success Response Status: 200 OK Body: A list of Group Presenter","title":"List groups"},{"location":"api/licenses/","text":"List licenses GET /v2/licenses Public endpoint, does not need OAuth. Success Response Status: 200 OK Body: A list of License Presenters List institution licenses GET /v2/account/licenses This is a private endpoint that requires OAuth. It will return a list with figshare public licenses AND licenses defined for account's institution. Success Response Status: 200 OK A list of License Presenters","title":"List licenses"},{"location":"api/licenses/#list-licenses","text":"GET /v2/licenses Public endpoint, does not need OAuth. Success Response Status: 200 OK Body: A list of License Presenters","title":"List licenses"},{"location":"api/licenses/#list-institution-licenses","text":"GET /v2/account/licenses This is a private endpoint that requires OAuth. It will return a list with figshare public licenses AND licenses defined for account's institution. Success Response Status: 200 OK A list of License Presenters","title":"List institution licenses"},{"location":"api/projects/","text":"Projects API endpoints Public list public projects search public projects view project details list project articles Private list private projects search private projects create new project read project information update project information publish project delete own project articles list articles retrieve article create article delete article move article from project files list article files get article file collaborators list collaborators invite collaborator remove collaborator leave project notes list notes add note update note delete note Public endpoints List public projects GET /v2/projects Input Accepts pagination , sorting , filtering params. See API feature list for details. Accepted filters: Field Type Description institution int Only return projects from this institution group int Only return projects from this group published_since date(ISO 8601) Only projects published after the date Defaults: Field Value order published_date order_direction desc page_size 10 Call example curl \"https://api.figshare.com/v2/projects?page=2 page_size=3 published_since=2016-01-01\" Success Response Status: 200 OK Body: List of Public Project Lite Presenter Search public projects POST /v2/projects/search Input Accepts pagination , sorting , filtering and search params. See API feature list for details. Filters and defaults are the same as for the list public projects endpoint. Success Response Status: 200 OK Body: List of Public Project Lite Presenter View project details GET /v2/projects/{id} Success Response Status: 200 OK Body: Public Project Full Presenter List project articles GET /v2/projects/{id}/articles Accepts pagination params ( page and page_size ). See API feature list for details. Success Response Status: 200 OK Body: List of Article Presenter Private endpoints These endpoints require authorization/authentication. Missing valid auth will result in 403 and 401 errors. List private projects GET /v2/account/projects Input Accepts pagination , sorting and filtering params, sent as request parameters . See API feature list for details. Accepted filters: Field Type Description storage str group or individual . roles str Any combination of owner , collaborator , viewer separated by comma. Examples: \"owner\" or \"owner,collaborator\". Success Response (list of projects) Status: 200 OK Body: List of Private Project Lite Presenter Search private projects POST /v2/account/projects/search Input Accepts pagination , sorting , filtering and search params. See API feature list for details. Accepted filters: Field Type Description storage str group or individual . roles str Any combination of owner , collaborator , viewer separated by comma. Examples: \"owner\" or \"owner,collaborator\". published_since date(ISO 8601) Only projects published after the date modified_since date(ISO 8601) Only projects published after the date status int 1 for public projects, 0 for private projects. Success Response Status: 200 OK Body: List of Private Project Lite Presenter Create a new project POST /v2/account/projects Input Accepted parameters sent as JSON request body: Name Type Description title str The title for this project - mandatory . 3 - 500 characters. description str Project's description funding str Grant number or organization(s) that funded this project. Up to 2000 characters permitted. group_id int Only of project type is group . Success Response Status: 201 Created Headers: Location: https://api.figshare.com/v2/account/projects/123 Get project information GET /v2/account/projects/{id} Success Response Status: 200 OK Body: Private Project Full Presenter Update project information PUT /v2/account/projects/{id} Input Accepted parameters sent as JSON request body: Name Type Description title str The title for this project. description str The project description. funding str Grant number or organization(s) that funded this project. Up to 2000 characters permitted. Success Response Status: 205 Reset Content Headers: Location: https://api.figshare.com/v2/account/projects/123 Publish project POST /v2/account/projects/{id}/publish Success Response Status: 201 Created Body: Project {id} has been published. Delete own project DELETE /v2/account/projects/{id} A project can be deleted only if: - it is not public - it does not have public articles When an individual project is deleted, all the articles are moved to my data of each owner*. When a group project is deleted, all the articles and files are deleted as well. Only project owner, group admin and above can delete a project. Success Response Status: 204 No content Project articles subsection List articles GET /v2/account/projects/{id}/articles Accepts pagination , sorting and filtering params, sent as request parameters . See API feature list for details. Success Response Status: 200 OK Body: List of Project Article Presenter Get article GET /v2/account/projects/{id}/articles/{article_id} Success Response Status: 200 OK Body: ArticlePresenter Create a new project article POST /v2/account/projects/{id}/articles Input Accepted parameters sent as JSON request body: Name Type Description title str Article title - mandatory . description str Article description. tags array of str Tags to be associated with the article (e.g [\"tag1\", \"tag2\", \"tagn\"]) references array of str List of links to be associated with the article (e.g [\"http://link1\", \"http://link2\", \"http://link3\"]) categories array of int List of category ids to be associated with the article (e.g [1, 23, 33, 66]) authors array of dict List of authors to be assosciated with the article. The list can contain author ids or author names [{\"id\": 12121}, {\"id\": 34345}, {\"name\": \"John Doe\"}]. No more then 10 authors. For adding more authors use the specific authors endpoint custom_fields dict List of key, values pairs to be associated with the article defined_type str Article type, one of ['figure', 'media', 'dataset', 'fileset', 'poster', 'paper', 'presentation', 'thesis', 'code', 'metadata'] funding str Grant number of funding authority. Max of 2000 characters permitted. license str Licence id for this article. doi str Not appliable for regular users. In an institutional case, make sure your group supports setting DOIs. This setting is applied by figshare via opening a ticket through our support/helpdesk system. resource_doi str Not applicable to regular users. In a publisher case, this is the publisher article DOI. resource_title str Not applicable to regular users. In a publisher case, this is the publisher article title. Success Response Status: 201 Created Headers: Location: https://api.figshare.com/v2/account/project/1234/articles/456 Delete project article DELETE /v2/account/projects/{id}/articles/{article_id} Success Response Status: 204 No content Move article from project Currently, moving an article to a project or removing an article from a project actions are available only on our website platform https://figshare.com . We plan to deliver this functionality to the API system in the near future. Project files subsection List article files GET /v2/account/projects/{id}/articles/{article_id}/files Accepts pagination , sorting and filtering params, sent as request parameters . See API feature list for details. Success Response Status: 200 OK Body: List of PrivateFilePresenter Get article file GET /v2/account/projects/{id}/articles/{article_id}/files/{file_id} Success Response Status: 200 OK Body: PrivateFilePresenter Project collaborators subsection List collaborators and invited users GET /v2/account/projects/{id}/collaborators Success Response Status: 200 OK Body: A list with CollaboratorPresenter s and InvitedUserPresenter s Invite collaborator POST /v2/account/projects/{id}/collaborators Input Accepted parameters sent as JSON request body: Name Type Description role_name str Valid roles: viewer , collaborator - mandatory user_id int email str comment str Text sent when inviting the user to the project - optional Please note that is mandatory to send either user_id or email JSON parameters. Success Response Status: 201 Created Body: {\"message\": \"User invited to project\"} Remove collaborator DELETE /v2/account/projects/{id}/collaborators/{user_id} Success Response Status: 204 No content Leave project POST /v2/account/projects/{id}/leave Please note: project's owner cannot leave the project. Success Response Status: 204 No content Project notes subsection List notes GET /v2/account/projects/{id}/notes Accepts pagination params ( page and page_size ), sent as request parameters . See API feature list for details. Success Response Status: 200 OK Body: ProjectNotePresenter Get note GET /v2/account/projects/{id}/notes/{note_id} Success Response Status: 200 OK Body: ProjectNotePresenterL1 Add note POST /v2/account/projects/{id}/notes Input Accepted parameter sent as JSON request body: Name Type Description text str Mandatory. At least 3 characters. Success Response Status: 201 Created Headers: Location: https://api.figshare.com/v2/account/projects/1/notes/2 Update note PUT /v2/account/projects/{id}/notes/{note_id} Input Accepted parameter sent as JSON request body: Name Type Description text str Mandatory. At least 3 characters. Success Response Status: 205 Reset Content Headers: Location: https://api.figshare.com/v2/account/projects/1/notes/2 Delete note DELETE /v2/account/projects/{id}/notes/{note_id} Success Response Status: 204 No Content","title":"Projects"},{"location":"api/projects/#projects-api-endpoints","text":"Public list public projects search public projects view project details list project articles Private list private projects search private projects create new project read project information update project information publish project delete own project articles list articles retrieve article create article delete article move article from project files list article files get article file collaborators list collaborators invite collaborator remove collaborator leave project notes list notes add note update note delete note","title":"Projects API endpoints"},{"location":"api/projects/#public-endpoints","text":"","title":"Public endpoints"},{"location":"api/projects/#list-public-projects","text":"GET /v2/projects Input Accepts pagination , sorting , filtering params. See API feature list for details. Accepted filters: Field Type Description institution int Only return projects from this institution group int Only return projects from this group published_since date(ISO 8601) Only projects published after the date Defaults: Field Value order published_date order_direction desc page_size 10 Call example curl \"https://api.figshare.com/v2/projects?page=2 page_size=3 published_since=2016-01-01\" Success Response Status: 200 OK Body: List of Public Project Lite Presenter","title":"List public projects"},{"location":"api/projects/#search-public-projects","text":"POST /v2/projects/search Input Accepts pagination , sorting , filtering and search params. See API feature list for details. Filters and defaults are the same as for the list public projects endpoint. Success Response Status: 200 OK Body: List of Public Project Lite Presenter","title":"Search public projects"},{"location":"api/projects/#view-project-details","text":"GET /v2/projects/{id} Success Response Status: 200 OK Body: Public Project Full Presenter","title":"View project details"},{"location":"api/projects/#list-project-articles","text":"GET /v2/projects/{id}/articles Accepts pagination params ( page and page_size ). See API feature list for details. Success Response Status: 200 OK Body: List of Article Presenter","title":"List project articles"},{"location":"api/projects/#private-endpoints","text":"These endpoints require authorization/authentication. Missing valid auth will result in 403 and 401 errors.","title":"Private endpoints"},{"location":"api/projects/#list-private-projects","text":"GET /v2/account/projects Input Accepts pagination , sorting and filtering params, sent as request parameters . See API feature list for details. Accepted filters: Field Type Description storage str group or individual . roles str Any combination of owner , collaborator , viewer separated by comma. Examples: \"owner\" or \"owner,collaborator\". Success Response (list of projects) Status: 200 OK Body: List of Private Project Lite Presenter","title":"List private projects"},{"location":"api/projects/#search-private-projects","text":"POST /v2/account/projects/search Input Accepts pagination , sorting , filtering and search params. See API feature list for details. Accepted filters: Field Type Description storage str group or individual . roles str Any combination of owner , collaborator , viewer separated by comma. Examples: \"owner\" or \"owner,collaborator\". published_since date(ISO 8601) Only projects published after the date modified_since date(ISO 8601) Only projects published after the date status int 1 for public projects, 0 for private projects. Success Response Status: 200 OK Body: List of Private Project Lite Presenter","title":"Search private projects"},{"location":"api/projects/#create-a-new-project","text":"POST /v2/account/projects Input Accepted parameters sent as JSON request body: Name Type Description title str The title for this project - mandatory . 3 - 500 characters. description str Project's description funding str Grant number or organization(s) that funded this project. Up to 2000 characters permitted. group_id int Only of project type is group . Success Response Status: 201 Created Headers: Location: https://api.figshare.com/v2/account/projects/123","title":"Create a new project"},{"location":"api/projects/#get-project-information","text":"GET /v2/account/projects/{id} Success Response Status: 200 OK Body: Private Project Full Presenter","title":"Get project information"},{"location":"api/projects/#update-project-information","text":"PUT /v2/account/projects/{id} Input Accepted parameters sent as JSON request body: Name Type Description title str The title for this project. description str The project description. funding str Grant number or organization(s) that funded this project. Up to 2000 characters permitted. Success Response Status: 205 Reset Content Headers: Location: https://api.figshare.com/v2/account/projects/123","title":"Update project information"},{"location":"api/projects/#publish-project","text":"POST /v2/account/projects/{id}/publish Success Response Status: 201 Created Body: Project {id} has been published.","title":"Publish project"},{"location":"api/projects/#delete-own-project","text":"DELETE /v2/account/projects/{id} A project can be deleted only if: - it is not public - it does not have public articles When an individual project is deleted, all the articles are moved to my data of each owner*. When a group project is deleted, all the articles and files are deleted as well. Only project owner, group admin and above can delete a project. Success Response Status: 204 No content","title":"Delete own project"},{"location":"api/projects/#project-articles-subsection","text":"","title":"Project articles subsection"},{"location":"api/projects/#list-articles","text":"GET /v2/account/projects/{id}/articles Accepts pagination , sorting and filtering params, sent as request parameters . See API feature list for details. Success Response Status: 200 OK Body: List of Project Article Presenter","title":"List articles"},{"location":"api/projects/#get-article","text":"GET /v2/account/projects/{id}/articles/{article_id} Success Response Status: 200 OK Body: ArticlePresenter","title":"Get article"},{"location":"api/projects/#create-a-new-project-article","text":"POST /v2/account/projects/{id}/articles Input Accepted parameters sent as JSON request body: Name Type Description title str Article title - mandatory . description str Article description. tags array of str Tags to be associated with the article (e.g [\"tag1\", \"tag2\", \"tagn\"]) references array of str List of links to be associated with the article (e.g [\"http://link1\", \"http://link2\", \"http://link3\"]) categories array of int List of category ids to be associated with the article (e.g [1, 23, 33, 66]) authors array of dict List of authors to be assosciated with the article. The list can contain author ids or author names [{\"id\": 12121}, {\"id\": 34345}, {\"name\": \"John Doe\"}]. No more then 10 authors. For adding more authors use the specific authors endpoint custom_fields dict List of key, values pairs to be associated with the article defined_type str Article type, one of ['figure', 'media', 'dataset', 'fileset', 'poster', 'paper', 'presentation', 'thesis', 'code', 'metadata'] funding str Grant number of funding authority. Max of 2000 characters permitted. license str Licence id for this article. doi str Not appliable for regular users. In an institutional case, make sure your group supports setting DOIs. This setting is applied by figshare via opening a ticket through our support/helpdesk system. resource_doi str Not applicable to regular users. In a publisher case, this is the publisher article DOI. resource_title str Not applicable to regular users. In a publisher case, this is the publisher article title. Success Response Status: 201 Created Headers: Location: https://api.figshare.com/v2/account/project/1234/articles/456","title":"Create a new project article"},{"location":"api/projects/#delete-project-article","text":"DELETE /v2/account/projects/{id}/articles/{article_id} Success Response Status: 204 No content","title":"Delete project article"},{"location":"api/projects/#move-article-from-project","text":"Currently, moving an article to a project or removing an article from a project actions are available only on our website platform https://figshare.com . We plan to deliver this functionality to the API system in the near future.","title":"Move article from project"},{"location":"api/projects/#project-files-subsection","text":"","title":"Project files subsection"},{"location":"api/projects/#list-article-files","text":"GET /v2/account/projects/{id}/articles/{article_id}/files Accepts pagination , sorting and filtering params, sent as request parameters . See API feature list for details. Success Response Status: 200 OK Body: List of PrivateFilePresenter","title":"List article files"},{"location":"api/projects/#get-article-file","text":"GET /v2/account/projects/{id}/articles/{article_id}/files/{file_id} Success Response Status: 200 OK Body: PrivateFilePresenter","title":"Get article file"},{"location":"api/projects/#project-collaborators-subsection","text":"","title":"Project collaborators subsection"},{"location":"api/projects/#list-collaborators-and-invited-users","text":"GET /v2/account/projects/{id}/collaborators Success Response Status: 200 OK Body: A list with CollaboratorPresenter s and InvitedUserPresenter s","title":"List collaborators and invited users"},{"location":"api/projects/#invite-collaborator","text":"POST /v2/account/projects/{id}/collaborators Input Accepted parameters sent as JSON request body: Name Type Description role_name str Valid roles: viewer , collaborator - mandatory user_id int email str comment str Text sent when inviting the user to the project - optional Please note that is mandatory to send either user_id or email JSON parameters. Success Response Status: 201 Created Body: {\"message\": \"User invited to project\"}","title":"Invite collaborator"},{"location":"api/projects/#remove-collaborator","text":"DELETE /v2/account/projects/{id}/collaborators/{user_id} Success Response Status: 204 No content","title":"Remove collaborator"},{"location":"api/projects/#leave-project","text":"POST /v2/account/projects/{id}/leave Please note: project's owner cannot leave the project. Success Response Status: 204 No content","title":"Leave project"},{"location":"api/projects/#project-notes-subsection","text":"","title":"Project notes subsection"},{"location":"api/projects/#list-notes","text":"GET /v2/account/projects/{id}/notes Accepts pagination params ( page and page_size ), sent as request parameters . See API feature list for details. Success Response Status: 200 OK Body: ProjectNotePresenter","title":"List notes"},{"location":"api/projects/#get-note","text":"GET /v2/account/projects/{id}/notes/{note_id} Success Response Status: 200 OK Body: ProjectNotePresenterL1","title":"Get note"},{"location":"api/projects/#add-note","text":"POST /v2/account/projects/{id}/notes Input Accepted parameter sent as JSON request body: Name Type Description text str Mandatory. At least 3 characters. Success Response Status: 201 Created Headers: Location: https://api.figshare.com/v2/account/projects/1/notes/2","title":"Add note"},{"location":"api/projects/#update-note","text":"PUT /v2/account/projects/{id}/notes/{note_id} Input Accepted parameter sent as JSON request body: Name Type Description text str Mandatory. At least 3 characters. Success Response Status: 205 Reset Content Headers: Location: https://api.figshare.com/v2/account/projects/1/notes/2","title":"Update note"},{"location":"api/projects/#delete-note","text":"DELETE /v2/account/projects/{id}/notes/{note_id} Success Response Status: 204 No Content","title":"Delete note"},{"location":"api/upload_example/","text":"Example Upload on fig share To upload a file to the fig share , one needs to use the standard fig share API , coupled with the fig share upload system API . A full script that lists articles before and after the new article and file are created would look like this: #!/usr/bin/env python import hashlib import json import os import requests from requests.exceptions import HTTPError BASE_URL = 'https://api.figshare.com/v2/{endpoint}' TOKEN = ' insert access token here ' CHUNK_SIZE = 1048576 FILE_PATH = '/path/to/work/directory/cat.obj' TITLE = 'A 3D cat object model' def raw_issue_request(method, url, data=None, binary=False): headers = {'Authorization': 'token ' + TOKEN} if data is not None and not binary: data = json.dumps(data) response = requests.request(method, url, headers=headers, data=data) try: response.raise_for_status() try: data = json.loads(response.content) except ValueError: data = response.content except HTTPError as error: print 'Caught an HTTPError: {}'.format(error.message) print 'Body:\\n', response.content raise return data def issue_request(method, endpoint, *args, **kwargs): return raw_issue_request(method, BASE_URL.format(endpoint=endpoint), *args, **kwargs) def list_articles(): result = issue_request('GET', 'account/articles') print 'Listing current articles:' if result: for item in result: print u' {url} - {title}'.format(**item) else: print ' No articles.' print def create_article(title): data = { 'title': title # You may add any other information about the article here as you wish. } result = issue_request('POST', 'account/articles', data=data) print 'Created article:', result['location'], '\\n' result = raw_issue_request('GET', result['location']) return result['id'] def list_files_of_article(article_id): result = issue_request('GET', 'account/articles/{}/files'.format(article_id)) print 'Listing files for article {}:'.format(article_id) if result: for item in result: print ' {id} - {name}'.format(**item) else: print ' No files.' print def get_file_check_data(file_name): with open(file_name, 'rb') as fin: md5 = hashlib.md5() size = 0 data = fin.read(CHUNK_SIZE) while data: size += len(data) md5.update(data) data = fin.read(CHUNK_SIZE) return md5.hexdigest(), size def initiate_new_upload(article_id, file_name): endpoint = 'account/articles/{}/files' endpoint = endpoint.format(article_id) md5, size = get_file_check_data(file_name) data = {'name': os.path.basename(file_name), 'md5': md5, 'size': size} result = issue_request('POST', endpoint, data=data) print 'Initiated file upload:', result['location'], '\\n' result = raw_issue_request('GET', result['location']) return result def complete_upload(article_id, file_id): issue_request('POST', 'account/articles/{}/files/{}'.format(article_id, file_id)) def upload_parts(file_info): url = '{upload_url}'.format(**file_info) result = raw_issue_request('GET', url) print 'Uploading parts:' with open(FILE_PATH, 'rb') as fin: for part in result['parts']: upload_part(file_info, fin, part) print def upload_part(file_info, stream, part): udata = file_info.copy() udata.update(part) url = '{upload_url}/{partNo}'.format(**udata) stream.seek(part['startOffset']) data = stream.read(part['endOffset'] - part['startOffset'] + 1) raw_issue_request('PUT', url, data=data, binary=True) print ' Uploaded part {partNo} from {startOffset} to {endOffset}'.format(**part) def main(): # We first create the article list_articles() article_id = create_article(TITLE) list_articles() list_files_of_article(article_id) # Then we upload the file. file_info = initiate_new_upload(article_id, FILE_PATH) # Until here we used the figshare API; following lines use the figshare upload service API. upload_parts(file_info) # We return to the figshare API to complete the file upload process. complete_upload(article_id, file_info['id']) list_files_of_article(article_id) if __name__ == '__main__': main() Output of Script This is an example of how the script would output on an account with no added articles or files yet. Listing current articles: No articles. Created article: https://api.figshare.com/v2/account/articles/2012182 Listing current articles: https://api.figshare.com/v2/articles/2012182 - A 3D cat object model Listing files for article 2012182: No files. Initiated file upload: https://api.figshare.com/v2/account/articles/2012182/files/3008150 Uploading parts: Uploaded part 1 from 0 to 213325 Listing files for article 2012182: 3008150 - cat.obj","title":"Example Upload on fig**share**"},{"location":"api/upload_example/#example-upload-on-figshare","text":"To upload a file to the fig share , one needs to use the standard fig share API , coupled with the fig share upload system API . A full script that lists articles before and after the new article and file are created would look like this: #!/usr/bin/env python import hashlib import json import os import requests from requests.exceptions import HTTPError BASE_URL = 'https://api.figshare.com/v2/{endpoint}' TOKEN = ' insert access token here ' CHUNK_SIZE = 1048576 FILE_PATH = '/path/to/work/directory/cat.obj' TITLE = 'A 3D cat object model' def raw_issue_request(method, url, data=None, binary=False): headers = {'Authorization': 'token ' + TOKEN} if data is not None and not binary: data = json.dumps(data) response = requests.request(method, url, headers=headers, data=data) try: response.raise_for_status() try: data = json.loads(response.content) except ValueError: data = response.content except HTTPError as error: print 'Caught an HTTPError: {}'.format(error.message) print 'Body:\\n', response.content raise return data def issue_request(method, endpoint, *args, **kwargs): return raw_issue_request(method, BASE_URL.format(endpoint=endpoint), *args, **kwargs) def list_articles(): result = issue_request('GET', 'account/articles') print 'Listing current articles:' if result: for item in result: print u' {url} - {title}'.format(**item) else: print ' No articles.' print def create_article(title): data = { 'title': title # You may add any other information about the article here as you wish. } result = issue_request('POST', 'account/articles', data=data) print 'Created article:', result['location'], '\\n' result = raw_issue_request('GET', result['location']) return result['id'] def list_files_of_article(article_id): result = issue_request('GET', 'account/articles/{}/files'.format(article_id)) print 'Listing files for article {}:'.format(article_id) if result: for item in result: print ' {id} - {name}'.format(**item) else: print ' No files.' print def get_file_check_data(file_name): with open(file_name, 'rb') as fin: md5 = hashlib.md5() size = 0 data = fin.read(CHUNK_SIZE) while data: size += len(data) md5.update(data) data = fin.read(CHUNK_SIZE) return md5.hexdigest(), size def initiate_new_upload(article_id, file_name): endpoint = 'account/articles/{}/files' endpoint = endpoint.format(article_id) md5, size = get_file_check_data(file_name) data = {'name': os.path.basename(file_name), 'md5': md5, 'size': size} result = issue_request('POST', endpoint, data=data) print 'Initiated file upload:', result['location'], '\\n' result = raw_issue_request('GET', result['location']) return result def complete_upload(article_id, file_id): issue_request('POST', 'account/articles/{}/files/{}'.format(article_id, file_id)) def upload_parts(file_info): url = '{upload_url}'.format(**file_info) result = raw_issue_request('GET', url) print 'Uploading parts:' with open(FILE_PATH, 'rb') as fin: for part in result['parts']: upload_part(file_info, fin, part) print def upload_part(file_info, stream, part): udata = file_info.copy() udata.update(part) url = '{upload_url}/{partNo}'.format(**udata) stream.seek(part['startOffset']) data = stream.read(part['endOffset'] - part['startOffset'] + 1) raw_issue_request('PUT', url, data=data, binary=True) print ' Uploaded part {partNo} from {startOffset} to {endOffset}'.format(**part) def main(): # We first create the article list_articles() article_id = create_article(TITLE) list_articles() list_files_of_article(article_id) # Then we upload the file. file_info = initiate_new_upload(article_id, FILE_PATH) # Until here we used the figshare API; following lines use the figshare upload service API. upload_parts(file_info) # We return to the figshare API to complete the file upload process. complete_upload(article_id, file_info['id']) list_files_of_article(article_id) if __name__ == '__main__': main()","title":"Example Upload on figshare"},{"location":"api/upload_example/#output-of-script","text":"This is an example of how the script would output on an account with no added articles or files yet. Listing current articles: No articles. Created article: https://api.figshare.com/v2/account/articles/2012182 Listing current articles: https://api.figshare.com/v2/articles/2012182 - A 3D cat object model Listing files for article 2012182: No files. Initiated file upload: https://api.figshare.com/v2/account/articles/2012182/files/3008150 Uploading parts: Uploaded part 1 from 0 to 213325 Listing files for article 2012182: 3008150 - cat.obj","title":"Output of Script"},{"location":"api/presenters/article/","text":"Important : Please use a presenter as an associative array - a collection of (key, value) pairs, not as a class with a fixed number of fields. The presenters should be interpreted as a guarantee of what data would be presented by our API. While we avoid removing key value pairs, we reserve the right to add new data at any time and eventually commit to the new fields by documenting and guaranteeing them. ArticlePresenter { id : 1434614, title : Test article title , doi : 10.6084/m9.figshare.1434614 , group_id : 1234, url : http://api.figshare.com/articles/1434614 , url_public_html : https://figshare.com/articles/Test_article_title/1434614 , url_public_api : https://api.figshare.com/articles/1434614 , url_private_html : https://figshare.com/account/articles/1434614 , url_private_api : https://api.figshare.com/account/articles/1434614 , published_date : 2015-12-31T23:59:59Z , thumb : https://ndownloader.figshare.com/files/123456789/preview/12345678/thumb.png , defined_type : 3 } Note: url will eventually be deprecated in favour of the url_(private|public)_(api|html) flavours. It is here for backwards compatibility. ArticlePresenter.L1 CategoryPresenter LicensePresenter ArticlePresenter + { citation : Hand, Demario; (): title1. figshare.\\n\\n Retrieved 12:32, Jun 03, 2015 (GMT) , confidential_reason : , embargo_type : file , is_confidential : false, size : 0, funding : , tags : [ t1 , t2 ], version : 0, is_active : true, is_metadata_record : false, metadata_reason : , status : draft , description : desc2 , is_embargoed : false, embargo_date : null, is_public : false, modified_date : null, created_date : 2015-06-03T09:09:39 , has_linked_file : false, categories : [CategoryPresenter], license : LicensePresenter, published_date : null, embargo_reason : , references : [ http://link1 , http://link2 , http://link3 ] } ArticlePresenter.L2 PublicFilePresenter AuthorPresenter ArticleVersionPresenter CustomArticleFieldPresenter ArticlePresenter.L1 + { figshare_url : https://figshare.com/articles/article_title/123456789 , files : [PublicFilePresenter], authors : [AuthorPresenter], custom_fields : [CustomArticleFieldPresenter], resource_title : Resource title , resource_doi : 10.1000/xyz123 } Notes : On public endpoints, if the article is under file embargo , or is confidential , the files field will be missing from the JSON. resource_title and resource_doi are the title and doi of the published item which is supplemented by this figshare item ArticleVersionPresenter { version : 3, url : http://api.figshare.com/v2/articles/6547/versions/3 } ArticleEmbargoPresenter { is_embargoed : 1, embargo_date : null, embargo_type : file , embargo_reason : privacy requirements } ArticleConfidentialityPresenter { is_confidential : true, reason : privacy requirements }","title":"Article"},{"location":"api/presenters/article/#articlepresenter","text":"{ id : 1434614, title : Test article title , doi : 10.6084/m9.figshare.1434614 , group_id : 1234, url : http://api.figshare.com/articles/1434614 , url_public_html : https://figshare.com/articles/Test_article_title/1434614 , url_public_api : https://api.figshare.com/articles/1434614 , url_private_html : https://figshare.com/account/articles/1434614 , url_private_api : https://api.figshare.com/account/articles/1434614 , published_date : 2015-12-31T23:59:59Z , thumb : https://ndownloader.figshare.com/files/123456789/preview/12345678/thumb.png , defined_type : 3 } Note: url will eventually be deprecated in favour of the url_(private|public)_(api|html) flavours. It is here for backwards compatibility.","title":"ArticlePresenter"},{"location":"api/presenters/article/#articlepresenterl1","text":"CategoryPresenter LicensePresenter ArticlePresenter + { citation : Hand, Demario; (): title1. figshare.\\n\\n Retrieved 12:32, Jun 03, 2015 (GMT) , confidential_reason : , embargo_type : file , is_confidential : false, size : 0, funding : , tags : [ t1 , t2 ], version : 0, is_active : true, is_metadata_record : false, metadata_reason : , status : draft , description : desc2 , is_embargoed : false, embargo_date : null, is_public : false, modified_date : null, created_date : 2015-06-03T09:09:39 , has_linked_file : false, categories : [CategoryPresenter], license : LicensePresenter, published_date : null, embargo_reason : , references : [ http://link1 , http://link2 , http://link3 ] }","title":"ArticlePresenter.L1"},{"location":"api/presenters/article/#articlepresenterl2","text":"PublicFilePresenter AuthorPresenter ArticleVersionPresenter CustomArticleFieldPresenter ArticlePresenter.L1 + { figshare_url : https://figshare.com/articles/article_title/123456789 , files : [PublicFilePresenter], authors : [AuthorPresenter], custom_fields : [CustomArticleFieldPresenter], resource_title : Resource title , resource_doi : 10.1000/xyz123 } Notes : On public endpoints, if the article is under file embargo , or is confidential , the files field will be missing from the JSON. resource_title and resource_doi are the title and doi of the published item which is supplemented by this figshare item","title":"ArticlePresenter.L2"},{"location":"api/presenters/article/#articleversionpresenter","text":"{ version : 3, url : http://api.figshare.com/v2/articles/6547/versions/3 }","title":"ArticleVersionPresenter"},{"location":"api/presenters/article/#articleembargopresenter","text":"{ is_embargoed : 1, embargo_date : null, embargo_type : file , embargo_reason : privacy requirements }","title":"ArticleEmbargoPresenter"},{"location":"api/presenters/article/#articleconfidentialitypresenter","text":"{ is_confidential : true, reason : privacy requirements }","title":"ArticleConfidentialityPresenter"},{"location":"api/presenters/author/","text":"AuthorPresenter { id : 97657, full_name : John Doe , is_active : 1, url_name : John_Doe , orcid_id : 1234-5678-91234-1234 }","title":"AuthorPresenter"},{"location":"api/presenters/author/#authorpresenter","text":"{ id : 97657, full_name : John Doe , is_active : 1, url_name : John_Doe , orcid_id : 1234-5678-91234-1234 }","title":"AuthorPresenter"},{"location":"api/presenters/category/","text":"CategoryPresenter { parent_id : 48, id : 1, title : Biophysics }","title":"CategoryPresenter"},{"location":"api/presenters/category/#categorypresenter","text":"{ parent_id : 48, id : 1, title : Biophysics }","title":"CategoryPresenter"},{"location":"api/presenters/collaborator/","text":"CollaboratorPresenter { role_name : Owner , user_id : 1, name : Joe Doe } InvitedUserPresenter { status : invited , user_id : 1, name : Joe Doe }","title":"Collaborator"},{"location":"api/presenters/collaborator/#collaboratorpresenter","text":"{ role_name : Owner , user_id : 1, name : Joe Doe }","title":"CollaboratorPresenter"},{"location":"api/presenters/collaborator/#inviteduserpresenter","text":"{ status : invited , user_id : 1, name : Joe Doe }","title":"InvitedUserPresenter"},{"location":"api/presenters/collection/","text":"Important : Please use a presenter as an associative array - a collection of (key, value) pairs, not as a class with a fixed number of fields. The presenters should be interpreted as a guarantee of what data would be presented by our API. While we avoid removing key value pairs, we reserve the right to add new data at any time and eventually commit to the new fields by documenting and guaranteeing them. CollectionPresenter { id : 123, title : Sample collection , doi : http://dx.doi.org/10.6084/m9.figshare.123 , url : https://figshare.com/v2/collections/123 , published_date : 2015-08-12T00:39:55 } CollectionVersionPresenter { version : 1, url : } CollectionPresenter.L1 CategoryPresenter AuthorPresenter ArticlePresenter CollectionPresenter + { resource_id : AS124056 , resource_doi : http://dx.doi.org/10.608/m9.pub.7481 , resource_title : demo title , resource_link : http://dx.doi.org/10.321/m9.pub.1231 , resource_version : 1 , version : 1, description : Sample description , categories : [CategoryPresenter], references : [ http://link1 , http://link2 ], tags : [ tag1 , tag2 ], authors : [AuthorPresenter], institution_id : 154, group_id : 445, articles_count : 100, public : 1, custom_metadata : [ { location : Paris }, { size : 1 feet } ], citation : citation string }","title":"Collection"},{"location":"api/presenters/collection/#collectionpresenter","text":"{ id : 123, title : Sample collection , doi : http://dx.doi.org/10.6084/m9.figshare.123 , url : https://figshare.com/v2/collections/123 , published_date : 2015-08-12T00:39:55 }","title":"CollectionPresenter"},{"location":"api/presenters/collection/#collectionversionpresenter","text":"{ version : 1, url : }","title":"CollectionVersionPresenter"},{"location":"api/presenters/collection/#collectionpresenterl1","text":"CategoryPresenter AuthorPresenter ArticlePresenter CollectionPresenter + { resource_id : AS124056 , resource_doi : http://dx.doi.org/10.608/m9.pub.7481 , resource_title : demo title , resource_link : http://dx.doi.org/10.321/m9.pub.1231 , resource_version : 1 , version : 1, description : Sample description , categories : [CategoryPresenter], references : [ http://link1 , http://link2 ], tags : [ tag1 , tag2 ], authors : [AuthorPresenter], institution_id : 154, group_id : 445, articles_count : 100, public : 1, custom_metadata : [ { location : Paris }, { size : 1 feet } ], citation : citation string }","title":"CollectionPresenter.L1"},{"location":"api/presenters/custom_field/","text":"CustomArticleFieldPresenter { name : location , value : Amsterdam , is_mandatory : 1 }","title":"CustomArticleFieldPresenter"},{"location":"api/presenters/custom_field/#customarticlefieldpresenter","text":"{ name : location , value : Amsterdam , is_mandatory : 1 }","title":"CustomArticleFieldPresenter"},{"location":"api/presenters/file/","text":"Public File Presenter { id : 3000002, name : test.xls , size : 14848, is_link_only : False, download_url : https://ndownloader.figshare.com/files/3000002 } Private File Presenter Public File Presenter + { status : created , viewer_type : , preview_state : preview_not_available , upload_url : https://uploads.figshare.com , upload_token : 9dfc5fe3-d617-4d93-ac11-8afe7e984a4b , supplied_md5 : 043a51806d646e88cafbf19e7b82846f , computed_md5 : 043a51806d646e88cafbf19e7b82846f } For linked files ( is_link_only: true ), the upload_url and upload_token fields are missing (as the files will not be uploaded to figshare).","title":"Public File Presenter"},{"location":"api/presenters/file/#public-file-presenter","text":"{ id : 3000002, name : test.xls , size : 14848, is_link_only : False, download_url : https://ndownloader.figshare.com/files/3000002 }","title":"Public File Presenter"},{"location":"api/presenters/file/#private-file-presenter","text":"Public File Presenter + { status : created , viewer_type : , preview_state : preview_not_available , upload_url : https://uploads.figshare.com , upload_token : 9dfc5fe3-d617-4d93-ac11-8afe7e984a4b , supplied_md5 : 043a51806d646e88cafbf19e7b82846f , computed_md5 : 043a51806d646e88cafbf19e7b82846f } For linked files ( is_link_only: true ), the upload_url and upload_token fields are missing (as the files will not be uploaded to figshare).","title":"Private File Presenter"},{"location":"api/presenters/group/","text":"GroupPresenter { id : 1, name : Group Name , resource_id : , parent_id : 0 } resource_id is the group identifier used by the institution. parent_id is the ID of the group that this group is under or 0 if this is a top level group.","title":"GroupPresenter"},{"location":"api/presenters/group/#grouppresenter","text":"{ id : 1, name : Group Name , resource_id : , parent_id : 0 } resource_id is the group identifier used by the institution. parent_id is the ID of the group that this group is under or 0 if this is a top level group.","title":"GroupPresenter"},{"location":"api/presenters/institution/","text":"InstitutionPresenter { id : 1, name : Institution Name }","title":"InstitutionPresenter"},{"location":"api/presenters/institution/#institutionpresenter","text":"{ id : 1, name : Institution Name }","title":"InstitutionPresenter"},{"location":"api/presenters/license/","text":"LicensePresenter { value : 1, name : CC-BY , url : http://creativecommons.org/licenses/by/3.0/us/ }","title":"LicensePresenter"},{"location":"api/presenters/license/#licensepresenter","text":"{ value : 1, name : CC-BY , url : http://creativecommons.org/licenses/by/3.0/us/ }","title":"LicensePresenter"},{"location":"api/presenters/note/","text":"ProjectNotePresenter { id : 1, user_id : 2, user_name : Joe Dow , abstract : Short/truncated content , created_date : 2015-12-31T23:59:59Z , modified_date : 2015-12-31T23:59:59Z } ProjectNotePresenterL1 { id : 1, user_id : 2, user_name : Joe Dow , abstract : Short/truncated content , created_date : 2015-12-31T23:59:59Z , modified_date : 2015-12-31T23:59:59Z , text : full note content }","title":"Note"},{"location":"api/presenters/note/#projectnotepresenter","text":"{ id : 1, user_id : 2, user_name : Joe Dow , abstract : Short/truncated content , created_date : 2015-12-31T23:59:59Z , modified_date : 2015-12-31T23:59:59Z }","title":"ProjectNotePresenter"},{"location":"api/presenters/note/#projectnotepresenterl1","text":"{ id : 1, user_id : 2, user_name : Joe Dow , abstract : Short/truncated content , created_date : 2015-12-31T23:59:59Z , modified_date : 2015-12-31T23:59:59Z , text : full note content }","title":"ProjectNotePresenterL1"},{"location":"api/presenters/private_link/","text":"PrivateLinkPresenter { id : 0cfb0dbeac92df445df4aba45f63fdc85fa0b9a888b64e157ce3c93b576aa300fb3621ef3a219515dd482 , is_active : true, expires_date : 2015-07-03T00:00:00 }","title":"PrivateLinkPresenter"},{"location":"api/presenters/private_link/#privatelinkpresenter","text":"{ id : 0cfb0dbeac92df445df4aba45f63fdc85fa0b9a888b64e157ce3c93b576aa300fb3621ef3a219515dd482 , is_active : true, expires_date : 2015-07-03T00:00:00 }","title":"PrivateLinkPresenter"},{"location":"api/presenters/project/","text":"Note: Public and Private reffer to the kind of endpoint used for obtaining the JSON, not the status (private/published) of the project. Public Project Lite Presenter { id : 1, title : example , published_date : 2016-05-04T19:40:57Z , url : https://api.figshare.com/v2/projects/5070 } Private Project Lite Presenter { id : 1, title : example , role : Owner , storage : individual , published_date : 2016-05-04T19:40:57Z , url : https://api.figshare.com/v2/projects/5070 } role can be: Owner , Collaborator , or Viewer storage can be: individual or group Public Project Full Presenter { id : 1, title : example , description : example description , published_date : 2016-05-04T19:40:57Z , funding : no funding , url : https://api.figshare.com/v2/projects/1 , figshare_url : https://figshare.com/projects/example/1 , collaborators : [ { role_name : Owner , user_id : 1, name : test }, { role_name : Collaborator , user_id : 2, name : other } ] } Private Project Full Presenter { id : 1, title : example , description : example description , created_date : 2016-02-03T12:39:46Z , modified_date : 2016-02-03T12:42:27Z , published_date : 2016-05-04T19:40:57Z , funding : no funding , url : https://api.figshare.com/v2/projects/1 , figshare_url : https://figshare.com/projects/example/1 , collaborators : [ { role_name : Owner , user_id : 1, name : test }, { role_name : Collaborator , user_id : 2, name : other } ], storage : individual , group_id : 0, quota : 0, used_quota : 166164, used_quota_private : 166164, used_quota_public : 0, role : Owner }","title":"Project"},{"location":"api/presenters/project/#public-project-lite-presenter","text":"{ id : 1, title : example , published_date : 2016-05-04T19:40:57Z , url : https://api.figshare.com/v2/projects/5070 }","title":"Public Project Lite Presenter"},{"location":"api/presenters/project/#private-project-lite-presenter","text":"{ id : 1, title : example , role : Owner , storage : individual , published_date : 2016-05-04T19:40:57Z , url : https://api.figshare.com/v2/projects/5070 } role can be: Owner , Collaborator , or Viewer storage can be: individual or group","title":"Private Project Lite Presenter"},{"location":"api/presenters/project/#public-project-full-presenter","text":"{ id : 1, title : example , description : example description , published_date : 2016-05-04T19:40:57Z , funding : no funding , url : https://api.figshare.com/v2/projects/1 , figshare_url : https://figshare.com/projects/example/1 , collaborators : [ { role_name : Owner , user_id : 1, name : test }, { role_name : Collaborator , user_id : 2, name : other } ] }","title":"Public Project Full Presenter"},{"location":"api/presenters/project/#private-project-full-presenter","text":"{ id : 1, title : example , description : example description , created_date : 2016-02-03T12:39:46Z , modified_date : 2016-02-03T12:42:27Z , published_date : 2016-05-04T19:40:57Z , funding : no funding , url : https://api.figshare.com/v2/projects/1 , figshare_url : https://figshare.com/projects/example/1 , collaborators : [ { role_name : Owner , user_id : 1, name : test }, { role_name : Collaborator , user_id : 2, name : other } ], storage : individual , group_id : 0, quota : 0, used_quota : 166164, used_quota_private : 166164, used_quota_public : 0, role : Owner }","title":"Private Project Full Presenter"},{"location":"api/presenters/project_article/","text":"ProjectArticlePresenter { id : 456, title : Test article title , doi : 10.6084/m9.figshare.456 , url : http://api.figshare.com/v1/account/projects/123/articles/456 , created_date : 2015-12-31T23:59:59Z , modified_date : 2015-12-31T23:59:59Z , published_date : 2015-12-31T23:59:59Z }","title":"ProjectArticlePresenter"},{"location":"api/presenters/project_article/#projectarticlepresenter","text":"{ id : 456, title : Test article title , doi : 10.6084/m9.figshare.456 , url : http://api.figshare.com/v1/account/projects/123/articles/456 , created_date : 2015-12-31T23:59:59Z , modified_date : 2015-12-31T23:59:59Z , published_date : 2015-12-31T23:59:59Z }","title":"ProjectArticlePresenter"}]}