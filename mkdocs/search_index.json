{
    "docs": [
        {
            "location": "/", 
            "text": "figshare Documentation\n\n\nfigshare user documentation:\n\n\nAPI\n\n\n\n\nv2\n\n\noauth", 
            "title": "Home"
        }, 
        {
            "location": "/#figshare-documentation", 
            "text": "figshare user documentation:", 
            "title": "figshare Documentation"
        }, 
        {
            "location": "/#api", 
            "text": "v2  oauth", 
            "title": "API"
        }, 
        {
            "location": "/Search/search/", 
            "text": "figshare SEARCH\n\n\nIntroductory considerations\n\n\nSearching the figshare website can be performed either by using the front-end interface or by using the API we provide. Either way, the search query will be analyzed and sent to a search engine built by figshare on top of the open source \nElasticsearch\n server. \nIn the following document, we will try to detail the type of searches one may perform and the results one should expect from the search engine. The environment used for demonstrating the figshare search feature is comprised of six research documents, scraped for this purpose from the archives of the \nPublic Library of Open Science\n. For reference purposes, we provide the links to the articles below:\n\n \nArticle 1\n\n\n \nArticle 2\n\n\n \nArticle 3\n\n\n \nArticle 4\n\n\n \nArticle 5\n\n\n \nArticle 6\n\n\nThe actual article content is indexed and analyzed from the first part of each article's introduction, the tags are the subject areas, and the categories are parsed from the article's .xml file, and are the same as the categories that appear on the figshare page corresponding to the article.\n\n\n=========================\n\n\nGeneral search engine features/characteristics\n\n\n\n\nStemming\n of words:\n\n\nAll indexed words are stemmed, so, search queries like \nprocess\n/\nprocesses\n/\nprocessing\n are equivalent.\n\n\nStopword\n elimination:\n\n\nStopwords like prepositions for instance are not indexed by the search engine, so, search queries like \"just in time\"/\"just on time\"/\"just of time\" are equivalent.\n\n\n\n\n\n\nPlease note however that, even if the stopwords do not get indexed, in the case of the phrase search detailed below, the fact that a stopword exists somewhere in the actual phrase does matter. Thus, search queries like \"standing on the table\"/\"standing table\" are not equivalent. \n\n\n\n\n=========================\n\n\nSearch types and expected results\n\n\nGeneral term search\n\n\nThis is the basic type of search one can perform on the figshare website or API, and it works pretty much as expected, with documents returned in the order of relevance as follows: documents where the query term appears more times are ranked higher. All article fields (in this case: title, description, tags, categories) are taken into consideration.\n\n\nExample:\n\n\nQuery string: \"therapy\"\n\n\nReturn results with relevant paragraphs/tags/categories:\n\n\n\n\nArticle 4\n\n\nTitle\n: A National Survey of Teachers on Antiretroviral \nTherapy\n in Malawi: Access, Retention in \nTherapy\n and Survival\n\n\nDescription\n: [...] Malawi is scaling up antiretroviral \ntherapy\n (ART) (...)\n\n\nDescription\n: [...] retention in \ntherapy\n and survival (...)\n\n\nTags\n: Antiretroviral \ntherapy\n\n\nArticle 2\n\n\nTitle\n: Uptake of WHO Recommendations for First-Line Antiretroviral \nTherapy\n in Kenya, Uganda, and Zambia\n\n\nDescription\n: [...] first-line antiretroviral \ntherapies\n (ART) (...)\n\n\nDescription\n: [...] TDF combined \ntherapy\n offers (...) \n\n\nDescription\n: [...] TDF-based \ntherapy\n as the preferred option with AZT-based \ntherapies\n listed as alternatives. (...)\n\n\nDescription\n: [...] triple combination \ntherapies\n containing AZT and TDF. (...)\n\n\nDescription\n: [...] lower prices for AZT and TDF combination \ntherapy\n, (...)\n\n\nDescription\n: [...] more expensive than d4T-based \ntherapies\n, respectively.  (...)\n\n\nDescription\n: [...] AZT- and TDF-based \ntherapies\n, (...)\n\n\nTags\n: Antiretroviral \ntherapy\n\n\nArticle 3\n\n\nDescription\n: [...] access to antiretroviral \ntherapy\n (ART) (...)\n\n\nDescription\n: [...] life-long HIV \ntherapy\n with limited (...)\n\n\nTags\n: Antiretroviral \ntherapy\n\n\nArticle 5\n\n\nDescription\n: [...] Antiretroviral \ntherapy\n (ART) is effective (...)\n\n\nTags\n: Antiretroviral \ntherapy\n\n\nArticle 1\n\n\nTags\n: Antiretroviral \ntherapy\n\n\n\n\n\n\nPlease note that \nArticle 4\n is ranked higher than \nArticle 2\n, even though the latter has more occurences of our search term. The reason for this is that the former has two of those occurences in the title, and the scoring is weighed rather heavily towards the title field. \n\n\n\n\n\n\nField term search\n\n\nThis works exactly as the general term search described above, however, it is a bit more specialized, in that it allows selecting the field(s) in which to perform the search. As in the general term search above, documents where the query term appears more times are ranked higher. This type of search works on the figshare website, as well as in the API.\n\n\nExample:\n\n\nQuery string: \"title: therapy\"\n\n\nReturn results with relevant paragraphs/tags/categories:\n\n\n\n\nArticle 4\n\n\nTitle\n: A National Survey of Teachers on Antiretroviral \nTherapy\n in Malawi: Access, Retention in \nTherapy\n and Survival\n\n\nArticle 2\n\n\nTitle\n: Uptake of WHO Recommendations for First-Line Antiretroviral \nTherapy\n in Kenya, Uganda, and Zambia\n\n\n\n\n\n\nPlease note that articles 1, 3 and 5 do not appear in the search results anymore, as just the items with the word \ntherapy\n in the title are returned.\n\n\n\n\n\n\nGeneral multi-term search\n\n\nThis is the general multi-word search that returns documents that contain at least one of the query terms. This works like a boolean \"OR\" search, and ranking rules are the same as the types of searches listed above. This type of search works on the figshare website, as well as in the API.\n\n\nExample:\n\n\nQuery string: \"verticality endorse progress\"\n\n\nReturn results with relevant paragraphs/tags/categories:\n\n\n\n\nArticle 1\n\n\nDescription\n: [...] Initially, the South African National Department of Health \nendorsed\n a \nvertical\n ART (...)\n\n\nDescription\n: [...] system able to signpost programme \nprogress\n and performance (...)\n\n\nDescription\n: [...] These \nvertical\n M\nE systems ran parallel (...)\n\n\nDescription\n: [...] Kawonga and colleagues discuss the limitations inherent to such a \nvertical\n (...)\n\n\nArticle 2\n\n\nDescription\n: [...] this recommendation, stating that countries should take steps to \nprogressively\n reduce (...)\n\n\n\n\n\n\nField multi-term search\n\n\nThis works like the general multi-term search described above, only it allows specifying the field(s) on which to perform the search. Ranking rules are the same as the types of searches listed above. This type of search works on the figshare website, as well as in the API.\n\n\nExample:\n\n\nQuery string: \"title: antiretroviral therapies\"\n\n\nReturn results with relevant paragraphs/tags/categories:\n\n\n\n\nArticle 4\n\n\nTitle\n: A National Survey of Teachers on \nAntiretroviral Therapy\n in Malawi: Access, Retention in \nTherapy\n and Survival\n\n\nArticle 2\n\n\nTitle\n: Uptake of WHO Recommendations for First-Line \nAntiretroviral Therapy\n in Kenya, Uganda, and Zambia\n\n\nArticle 1\n\n\nTitle\n: Implementation of an Electronic Monitoring and Evaluation System for the \nAntiretroviral\n Treatment Programme in the Cape Winelands District, South Africa: A Qualitative Evaluation\n\n\nArticle 3\n\n\nTitle\n: Diminishing Availability of Publicly Funded Slots for \nAntiretroviral\n Initiation among HIV-Infected ART-Eligible Patients in Uganda\n\n\n\n\n\n\nGeneral compound term search\n\n\nThis is the equivalent of a boolean \"AND\" search and returns only the documents with occurences of all of the words contained in the search string. Ranking rules are unchanged with regard to the search types described above. This type of search works on the figshare website, as well as in the API.\n\n\nExample:\n\n\nQuery string: \"antiretroviral, therapies\"\n\n\nReturn results with relevant paragraphs/tags/categories:\n\n\n\n\nArticle 4\n\n\nTitle\n: A National Survey of Teachers on \nAntiretroviral Therapy\n in Malawi: Access, Retention in \nTherapy\n and Survival\n\n\nDescription\n: [...] \nantiretroviral therapy\n (ART) (...)\n\n\nDescription\n: [...] access, retention in \ntherapy\n and survival for subgroups of the population. We have (...)\n\n\nTags\n: \nAntiretroviral therapy\n\n\nArticle 2\n\n\nTitle\n: Uptake of WHO Recommendations for First-Line \nAntiretroviral Therapy\n in Kenya, Uganda, and Zambia\n\n\nDescription\n: [...] to transition away from first-line \nantiretroviral therapies\n (ART) containing stavudine (...)\n\n\nDescription\n: [...] the likelihood of drug resistance. TDF combined \ntherapy\n offers an additional benefit (...)\n\n\nDescription\n: [...] WHO consolidated guidelines on the use of ART named a TDF-based \ntherapy\n (...)\n\n\nDescription\n: [...] AZT-based \ntherapies\n listed as alternatives (...)\n\n\nDescription\n: [...] combination \ntherapies\n containing AZT and TDF\n\n\nTags\n: \nAntiretroviral therapy\n\n\nArticle 1\n\n\nTitle\n: Implementation of an Electronic Monitoring and Evaluation System for the \nAntiretroviral\n Treatment Programme in the Cape Winelands District, South Africa: A Qualitative Evaluation\n\n\nDescription\n: [...] South Africa's \nantiretroviral\n treatment (ART) programme (...)\n\n\nTags\n: \nAntiretroviral therapy\n\n\nTags\n: \nantiretrovirals\n\n\nArticle 3\n\n\nTitle\n: Diminishing Availability of Publicly Funded Slots for \nAntiretroviral\n Initiation among HIV-Infected ART-Eligible Patients in Uganda\n\n\nDescription\n: [...] about the future of access to \nantiretroviral therapy\n (...)\n\n\nDescription\n: [...] the feasibility of implementing life-long HIV \ntherapy\n with limited health care infrastructure (...)\n\n\nTags\n: \nAntiretroviral therapy\n\n\nArticle 5\n\n\nDescription\n: [...] \nAntiretroviral therapy\n (ART) is effective in reducing maternal (...)\n\n\nTags\n: \nAntiretroviral therapy\n\n\n\n\n\n\nPlease note that, just like in the case of the general term search, \nArticle 4\n is ranked higher than \nArticle 2\n, even though we can see more occurences of the query string words in the latter. The reason, just like above, is the weighing applied on the title field, deemed more important than the description field.\n\n\n\n\n\n\nField compound term search\n\n\nThis works like the general compound term search above, only it allows specifying the field(s) on which to perform the search. Ranking rules are unchanged with regard to the search types described above. This type of search works on the figshare website, as well as in the API.\n\n\nExample:\n\n\nQuery string: \"title: antiretroviral, therapies\"\n\n\nReturn results with relevant paragraphs/tags/categories:\n\n\n\n\nArticle 4\n\n\nTitle\n: A National Survey of Teachers on \nAntiretroviral Therapy\n in Malawi: Access, Retention in \nTherapy\n and Survival\n\n\nArticle 2\n\n\nTitle\n: Uptake of WHO Recommendations for First-Line \nAntiretroviral Therapy\n in Kenya, Uganda, and Zambia\n\n\n\n\n\n\nGeneral phrase search\n\n\nThis is the most restrictive type of search, as it returns only those documents in which an occurence of the full query string (word ordering matters) is found. Ranking rules are unchanged with regard to the search types described above. This type of search works on the figshare website, as well as in the API.\n\n\nExample:\n\n\nQuery string: \" 'antiretroviral therapy (ART)' \"\n\n\nReturn results with relevant paragraphs/tags/categories:\n\n\n\n\nArticle 4\n\n\nDescription\n: [...] \nantiretroviral therapy (ART)\n [6]. Data on all ART patients (...)\n\n\nArticle 2\n\n\nDescription\n: [...] to transition away from first-line \nantiretroviral therapies (ART)\n containing stavudine (...)\n\n\nArticle 5\n\n\nDescription\n: [...] service needs. \nAntiretroviral therapy (ART)\n is effective in reducing maternal (...)\n\n\nArticle 3\n\n\nDescription\n: [...] have raised uncertainty about the future of access to \nantiretroviral therapy (ART)\n and the goal of universal access. (...)\n\n\n\n\n\n\nPlease note that the ranking, in this case, takes into consideration individual term occurences in the documents, hence the ordering (remarkably similar to the ordering in the case of the general term search)\n\n\n\n\n\n\nField phrase search\n\n\nThis works like the general phrase search above, only it allows specifying the field(s) on which to perform the search. Ranking rules are unchanged with regard to the search types described above. This type of search works on the figshare website, as well as in the API.\n\n\nExample:\n\n\nQuery string: \"title 'therapy and survival' \"\n\n\nReturn results with relevant paragraphs/tags/categories:\n\n\n\n\nArticle 4\n\n\nTitle\n: A National Survey of Teachers on Antiretroviral Therapy in Malawi: Access, Retention in \nTherapy and Survival", 
            "title": "Search"
        }, 
        {
            "location": "/Search/search/#figshare-search", 
            "text": "", 
            "title": "figshare SEARCH"
        }, 
        {
            "location": "/Search/search/#introductory-considerations", 
            "text": "Searching the figshare website can be performed either by using the front-end interface or by using the API we provide. Either way, the search query will be analyzed and sent to a search engine built by figshare on top of the open source  Elasticsearch  server. \nIn the following document, we will try to detail the type of searches one may perform and the results one should expect from the search engine. The environment used for demonstrating the figshare search feature is comprised of six research documents, scraped for this purpose from the archives of the  Public Library of Open Science . For reference purposes, we provide the links to the articles below:   Article 1    Article 2    Article 3    Article 4    Article 5    Article 6  The actual article content is indexed and analyzed from the first part of each article's introduction, the tags are the subject areas, and the categories are parsed from the article's .xml file, and are the same as the categories that appear on the figshare page corresponding to the article.  =========================", 
            "title": "Introductory considerations"
        }, 
        {
            "location": "/Search/search/#general-search-engine-featurescharacteristics", 
            "text": "Stemming  of words:  All indexed words are stemmed, so, search queries like  process / processes / processing  are equivalent.  Stopword  elimination:  Stopwords like prepositions for instance are not indexed by the search engine, so, search queries like \"just in time\"/\"just on time\"/\"just of time\" are equivalent.    Please note however that, even if the stopwords do not get indexed, in the case of the phrase search detailed below, the fact that a stopword exists somewhere in the actual phrase does matter. Thus, search queries like \"standing on the table\"/\"standing table\" are not equivalent.    =========================", 
            "title": "General search engine features/characteristics"
        }, 
        {
            "location": "/Search/search/#search-types-and-expected-results", 
            "text": "General term search  This is the basic type of search one can perform on the figshare website or API, and it works pretty much as expected, with documents returned in the order of relevance as follows: documents where the query term appears more times are ranked higher. All article fields (in this case: title, description, tags, categories) are taken into consideration.  Example:  Query string: \"therapy\"  Return results with relevant paragraphs/tags/categories:   Article 4  Title : A National Survey of Teachers on Antiretroviral  Therapy  in Malawi: Access, Retention in  Therapy  and Survival  Description : [...] Malawi is scaling up antiretroviral  therapy  (ART) (...)  Description : [...] retention in  therapy  and survival (...)  Tags : Antiretroviral  therapy  Article 2  Title : Uptake of WHO Recommendations for First-Line Antiretroviral  Therapy  in Kenya, Uganda, and Zambia  Description : [...] first-line antiretroviral  therapies  (ART) (...)  Description : [...] TDF combined  therapy  offers (...)   Description : [...] TDF-based  therapy  as the preferred option with AZT-based  therapies  listed as alternatives. (...)  Description : [...] triple combination  therapies  containing AZT and TDF. (...)  Description : [...] lower prices for AZT and TDF combination  therapy , (...)  Description : [...] more expensive than d4T-based  therapies , respectively.  (...)  Description : [...] AZT- and TDF-based  therapies , (...)  Tags : Antiretroviral  therapy  Article 3  Description : [...] access to antiretroviral  therapy  (ART) (...)  Description : [...] life-long HIV  therapy  with limited (...)  Tags : Antiretroviral  therapy  Article 5  Description : [...] Antiretroviral  therapy  (ART) is effective (...)  Tags : Antiretroviral  therapy  Article 1  Tags : Antiretroviral  therapy    Please note that  Article 4  is ranked higher than  Article 2 , even though the latter has more occurences of our search term. The reason for this is that the former has two of those occurences in the title, and the scoring is weighed rather heavily towards the title field.     Field term search  This works exactly as the general term search described above, however, it is a bit more specialized, in that it allows selecting the field(s) in which to perform the search. As in the general term search above, documents where the query term appears more times are ranked higher. This type of search works on the figshare website, as well as in the API.  Example:  Query string: \"title: therapy\"  Return results with relevant paragraphs/tags/categories:   Article 4  Title : A National Survey of Teachers on Antiretroviral  Therapy  in Malawi: Access, Retention in  Therapy  and Survival  Article 2  Title : Uptake of WHO Recommendations for First-Line Antiretroviral  Therapy  in Kenya, Uganda, and Zambia    Please note that articles 1, 3 and 5 do not appear in the search results anymore, as just the items with the word  therapy  in the title are returned.    General multi-term search  This is the general multi-word search that returns documents that contain at least one of the query terms. This works like a boolean \"OR\" search, and ranking rules are the same as the types of searches listed above. This type of search works on the figshare website, as well as in the API.  Example:  Query string: \"verticality endorse progress\"  Return results with relevant paragraphs/tags/categories:   Article 1  Description : [...] Initially, the South African National Department of Health  endorsed  a  vertical  ART (...)  Description : [...] system able to signpost programme  progress  and performance (...)  Description : [...] These  vertical  M E systems ran parallel (...)  Description : [...] Kawonga and colleagues discuss the limitations inherent to such a  vertical  (...)  Article 2  Description : [...] this recommendation, stating that countries should take steps to  progressively  reduce (...)    Field multi-term search  This works like the general multi-term search described above, only it allows specifying the field(s) on which to perform the search. Ranking rules are the same as the types of searches listed above. This type of search works on the figshare website, as well as in the API.  Example:  Query string: \"title: antiretroviral therapies\"  Return results with relevant paragraphs/tags/categories:   Article 4  Title : A National Survey of Teachers on  Antiretroviral Therapy  in Malawi: Access, Retention in  Therapy  and Survival  Article 2  Title : Uptake of WHO Recommendations for First-Line  Antiretroviral Therapy  in Kenya, Uganda, and Zambia  Article 1  Title : Implementation of an Electronic Monitoring and Evaluation System for the  Antiretroviral  Treatment Programme in the Cape Winelands District, South Africa: A Qualitative Evaluation  Article 3  Title : Diminishing Availability of Publicly Funded Slots for  Antiretroviral  Initiation among HIV-Infected ART-Eligible Patients in Uganda    General compound term search  This is the equivalent of a boolean \"AND\" search and returns only the documents with occurences of all of the words contained in the search string. Ranking rules are unchanged with regard to the search types described above. This type of search works on the figshare website, as well as in the API.  Example:  Query string: \"antiretroviral, therapies\"  Return results with relevant paragraphs/tags/categories:   Article 4  Title : A National Survey of Teachers on  Antiretroviral Therapy  in Malawi: Access, Retention in  Therapy  and Survival  Description : [...]  antiretroviral therapy  (ART) (...)  Description : [...] access, retention in  therapy  and survival for subgroups of the population. We have (...)  Tags :  Antiretroviral therapy  Article 2  Title : Uptake of WHO Recommendations for First-Line  Antiretroviral Therapy  in Kenya, Uganda, and Zambia  Description : [...] to transition away from first-line  antiretroviral therapies  (ART) containing stavudine (...)  Description : [...] the likelihood of drug resistance. TDF combined  therapy  offers an additional benefit (...)  Description : [...] WHO consolidated guidelines on the use of ART named a TDF-based  therapy  (...)  Description : [...] AZT-based  therapies  listed as alternatives (...)  Description : [...] combination  therapies  containing AZT and TDF  Tags :  Antiretroviral therapy  Article 1  Title : Implementation of an Electronic Monitoring and Evaluation System for the  Antiretroviral  Treatment Programme in the Cape Winelands District, South Africa: A Qualitative Evaluation  Description : [...] South Africa's  antiretroviral  treatment (ART) programme (...)  Tags :  Antiretroviral therapy  Tags :  antiretrovirals  Article 3  Title : Diminishing Availability of Publicly Funded Slots for  Antiretroviral  Initiation among HIV-Infected ART-Eligible Patients in Uganda  Description : [...] about the future of access to  antiretroviral therapy  (...)  Description : [...] the feasibility of implementing life-long HIV  therapy  with limited health care infrastructure (...)  Tags :  Antiretroviral therapy  Article 5  Description : [...]  Antiretroviral therapy  (ART) is effective in reducing maternal (...)  Tags :  Antiretroviral therapy    Please note that, just like in the case of the general term search,  Article 4  is ranked higher than  Article 2 , even though we can see more occurences of the query string words in the latter. The reason, just like above, is the weighing applied on the title field, deemed more important than the description field.    Field compound term search  This works like the general compound term search above, only it allows specifying the field(s) on which to perform the search. Ranking rules are unchanged with regard to the search types described above. This type of search works on the figshare website, as well as in the API.  Example:  Query string: \"title: antiretroviral, therapies\"  Return results with relevant paragraphs/tags/categories:   Article 4  Title : A National Survey of Teachers on  Antiretroviral Therapy  in Malawi: Access, Retention in  Therapy  and Survival  Article 2  Title : Uptake of WHO Recommendations for First-Line  Antiretroviral Therapy  in Kenya, Uganda, and Zambia    General phrase search  This is the most restrictive type of search, as it returns only those documents in which an occurence of the full query string (word ordering matters) is found. Ranking rules are unchanged with regard to the search types described above. This type of search works on the figshare website, as well as in the API.  Example:  Query string: \" 'antiretroviral therapy (ART)' \"  Return results with relevant paragraphs/tags/categories:   Article 4  Description : [...]  antiretroviral therapy (ART)  [6]. Data on all ART patients (...)  Article 2  Description : [...] to transition away from first-line  antiretroviral therapies (ART)  containing stavudine (...)  Article 5  Description : [...] service needs.  Antiretroviral therapy (ART)  is effective in reducing maternal (...)  Article 3  Description : [...] have raised uncertainty about the future of access to  antiretroviral therapy (ART)  and the goal of universal access. (...)    Please note that the ranking, in this case, takes into consideration individual term occurences in the documents, hence the ordering (remarkably similar to the ordering in the case of the general term search)    Field phrase search  This works like the general phrase search above, only it allows specifying the field(s) on which to perform the search. Ranking rules are unchanged with regard to the search types described above. This type of search works on the figshare website, as well as in the API.  Example:  Query string: \"title 'therapy and survival' \"  Return results with relevant paragraphs/tags/categories:   Article 4  Title : A National Survey of Teachers on Antiretroviral Therapy in Malawi: Access, Retention in  Therapy and Survival", 
            "title": "Search types and expected results"
        }, 
        {
            "location": "/APIv2/articles/", 
            "text": "Article endpoints\n\n\n\n\nPublic\n\n\nlist public articles\n\n\nsearch public articles\n\n\nread public article\n\n\n\n\narticle versions\n\n\n\n\nlist versions\n\n\nread public article version\n\n\nread public article version embargo\n\n\nread public article version confidentiality\n\n\n\n\n\n\n\n\nPrivate\n\n\n\n\nget own articles\n\n\nsearch own articles\n\n\ncreate a new article\n\n\nread own article\n\n\nupdate article\n\n\ndelete own private article\n\n\nreserve doi for article\n\n\npublish article\n\n\narticle authors\n\n\nlist authors\n\n\nassociate new authors\n\n\nassociate and replace authors\n\n\nde-associate author\n\n\n\n\n\n\narticle categories\n\n\nlist categories\n\n\nassociate new categories\n\n\nassociate and replace categories\n\n\nde-associate category\n\n\n\n\n\n\narticle files\n\n\nlist files\n\n\ninitiate new file upload\n\n\nupload file content\n\n\ncomplete file upload\n\n\nview file information\n\n\ndelete file from article\n\n\n\n\n\n\narticle private links\n\n\nlist private links\n\n\ncreate new private link\n\n\nupdate existing private link\n\n\ndisable/delete private link\n\n\n\n\n\n\narticle embargo\n\n\nview embargo settings\n\n\nupdate embargo settings\n\n\ndelete embargo settings\n\n\n\n\n\n\narticle confidentiality\n\n\nview confidentiality settings\n\n\nupdate confidentiality settings\n\n\ndelete confidentiality settings\n\n\n\n\n\n\n\n\nArticle public endpoints\n\n\nList public articles\n\n\nGET /v2/articles\n\n\n\nInput\n\n\nAccepts \npagination\n, \nsorting\n, \nfiltering\n params. See \nAPI feature list\n for details.\n\n\nAccepted filters:\n\n\n\n\n\n\n\n\nfield\n\n\ntype\n\n\nnotes\n\n\n\n\n\n\n\n\n\n\ninstitution\n\n\nint\n\n\nonly return collections from this institution\n\n\n\n\n\n\ngroup\n\n\nint\n\n\nonly return collections from this group\n\n\n\n\n\n\npublished_since\n\n\ndate(ISO 8601)\n\n\nOnly collections published after the date\n\n\n\n\n\n\nmodified_since\n\n\ndate(ISO 8601)\n\n\nOnly collections published after the date\n\n\n\n\n\n\n\n\nDefaults:\n\n\n\n\n\n\n\n\nfield\n\n\nvalue\n\n\n\n\n\n\n\n\n\n\norder\n\n\npublished_date\n\n\n\n\n\n\norder_direction\n\n\ndesc\n\n\n\n\n\n\npage_size\n\n\n10\n\n\n\n\n\n\n\n\nSuccess Response (list of articles)\n\nStatus: 200 OK\n\n\n[\nArticlePresenter\n]\n\n\nError Response (Max page number reached)\n\n\nStatus: 400 Bad request\n\n\n\n\n{\nmessage\n: \nMax page reached. Please narrow down your search\n}\n\n\n\n\nSearch public articles\n\n\nPOST /v2/articles/search\n\n\n\nInput\n\n\nAccepts \npagination\n, \nsorting\n, \nfiltering\n and \nsearch\n params. See \nAPI feature list\n for details.\n\n\nFilters and defaults are the same as for  the\n\nlist public articles\n\n\nSuccess Response (list of articles)\n\nStatus: 200 OK\n\n\n[\nArticlePresenter\n]\n\n\nError Response (invalid input)\n\n\nStatus: 400 Bad request\n\n\n\n\n{\nmessage\n: \nInvalid value received for order\n}\n\n\n\n\nError Response (Max page number reached)\n\n\nStatus: 400 Bad request\n\n\n\n\n{\nmessage\n: \nMax page reached. Please narrow down your search\n}\n\n\n\n\nRead public article\n\n\nGET /v2/articles/{id}\n\n\n\nSuccess Response (article object)\n\nStatus: 200 OK\n\n\nArticlePresenter.L2\n\n\nError Response (article not found)\n\n\nStatus: 404 Not Found\n\n\n\n\n{\nmessage\n: \nArticle with specified ID does not exist\n}\n\n\n\n\nArticle versions subsection\n\n\nList versions\n\n\nGET /v2/articles/{id}/versions\n\n\n\nSuccess Response\n\n\nStatus: 200 OK\n\n\n[\nArticleVersionPresenter\n]\n\n\nError Response (article ID not found)\n\n\nStatus: 404 Not found\n\n\n\n\n{\nmessage\n: \narticle with ID not found\n}\n\n\n\n\nRead public article version\n\n\nRead public article that has {id} and {v_number}\n\n\nGET /v2/articles/{id}/versions/{v_number}\n\n\n\nSuccess Response (article object for specified version)\n\n\nStatus: 200 OK\n\n\nArticlePresenter.L2\n\n\nError Response (Version not found)\n\n\nStatus: 404 Not Found\n\n\n\n\n{\nmessage\n: \nVersion does not exist\n}\n\n\n\n\nRead public article version embargo\n\n\nRead public article embargo that has {id} and {v_number}\n\n\nGET /v2/articles/{id}/versions/{v_number}/embargo\n\n\n\nSuccess Response (article object for specified version)\n\n\nStatus: 200 OK\n\n\nArticleEmbargoPresenter\n\n\nError Response (Version not found)\n\n\nStatus: 404 Not Found\n\n\n\n\n{\nmessage\n: \nVersion does not exist\n}\n\n\n\n\nRead public article version confidentiality\n\n\nRead public article confidentiality that has {id} and {v_number}\n\n\nGET /v2/articles/{id}/versions/{v_number}/confidentiality\n\n\n\nSuccess Response (article object for specified version)\n\n\nStatus: 200 OK\n\n\nArticleConfidentialityPresenter\n\n\nError Response (Version not found)\n\n\nStatus: 404 Not Found\n\n\n\n\n{\nmessage\n: \nVersion does not exist\n}\n\n\n\n\nArticle private endpoints (OAuth required)\n\n\nGet own articles\n\n\nGET /v2/account/articles\n\n\n\nInput\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npage\n\n\nint\n\n\nShow specified page only. Default is 1. Max page is 100. To see more then 100 pages, the search endpoint must be used to narrow down the results\n\n\n\n\n\n\npage_size\n\n\nint\n\n\nHow many entries per page to show. Default is 10.\n\n\n\n\n\n\n\n\nOR\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noffset\n\n\nint\n\n\nThe first entry to return. The offset of the initial entry is 0 (not 1).\n\n\n\n\n\n\nlimit\n\n\nint\n\n\nThe number of returned entries. Default is 10.\n\n\n\n\n\n\n\n\nBy default the items are sorted by \ncreated_date\n, not \npublished_date\n.\n\n\nSuccess Response (list of articles)\n\nStatus: 200 OK\n\n\n[\nArticlePresenter\n]\n\n\nError Response (Max page number reached)\n\n\nStatus: 400 Bad request\n\n\n\n\n{\nmessage\n: \nMax page reached. Please narrow down your search\n}\n\n\n\n\nSearch own articles\n\n\nPOST /v2/account/articles/search\n\n\n\nInput\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npage\n\n\nint\n\n\nShow specified page only. Default is 1. Max is 100\n\n\n\n\n\n\npage_size\n\n\nint\n\n\nHow many entries per page to show. Default is 10. Max is 100\n\n\n\n\n\n\nsearch_for\n\n\nstr\n\n\n(query)String to perform search for. Minimum of 4 characters\n\n\n\n\n\n\npublished_since\n\n\ndate\n\n\n(filter)Narrow search  to articles published since the specified date\n\n\n\n\n\n\nmodified_since\n\n\ndate\n\n\n(filter)Narrow search  to articles modified since the specified date\n\n\n\n\n\n\ninstitution\n\n\nint\n\n\n(filter)Filter results for this instritution only\n\n\n\n\n\n\ngroup\n\n\nint\n\n\n(filter)Filter results for this institution group only\n\n\n\n\n\n\norder\n\n\nstr\n\n\n(sort)Perform a sort using the \norder\n. Valid values are: \npublished_date\n, \nmodified_date\n\n\n\n\n\n\norder_direction\n\n\nstr\n\n\n(sort)How to sort. Descending or ascending. Valid values are: \ndesc\n, \nasc\n\n\n\n\n\n\n\n\nAlternatively, instead of \npage\n and \npage_size\n, one can use the following params for pagination:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noffset\n\n\nint\n\n\nThe first entry to return. The offset of the initial entry is 0 (not 1).\n\n\n\n\n\n\nlimit\n\n\nint\n\n\nThe number of returned entries. Default is 10.\n\n\n\n\n\n\n\n\nSuccess Response (list of articles)\n\n\nStatus: 200 OK\n\n\n\n\n[\nArticlePresenter\n]\n\n\nError Response (invalid input)\n\n\nStatus: 400 Bad request\n\n\n\n\n{\nmessage\n: \nInvalid value received for order\n}\n\n\n\n\nError Response (Max page number reached)\n\n\nStatus: 400 Bad request\n\n\n\n\n{\nmessage\n: \nMax page reached. Please narrow down your search\n}\n\n\n\n\nCreate a new article\n\n\nPOST /v2/account/articles\n\n\n\nInput\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntitle\n\n\nstr\n\n\nThe title for this article\n\n\n\n\n\n\ndescription\n\n\nstr\n\n\nThe article description. In a publisher case, usually this is the remote article description\n\n\n\n\n\n\ntags\n\n\narray of str\n\n\nList of tags to be associated with the article (e.g ['tag1', 'tag2', 'tagn'])\n\n\n\n\n\n\nreferences\n\n\narray of str\n\n\nList of links to be associated with the article (e.g ['http://link1', 'http://link2', 'http://link3'])\n\n\n\n\n\n\ncategories\n\n\narray of int\n\n\nList of category ids to be associated with the article(e.g [1, 23, 33, 66])\n\n\n\n\n\n\nauthors\n\n\narray\n\n\nList of authors to be assosciated with the article. The list can contain author ids or author names [{\"id\": 12121}, {\"id\": 34345}, {\"name\": \"John Doe\"}]. No more then 10 authors. For adding more authors use the specific authors endpoint\n\n\n\n\n\n\ncustom_fields\n\n\ndict\n\n\nList of key, values pairs to be associated with the article\n\n\n\n\n\n\ndefined_type\n\n\nstr\n\n\nArticle type, one of ['figure', 'media', 'dataset', 'fileset', 'poster', 'paper', 'presentation', 'thesis', 'code', 'metadata']\n\n\n\n\n\n\nfunding\n\n\nstr\n\n\nGrant number or funding authority\n\n\n\n\n\n\nlicense\n\n\nint\n\n\nLicense id for this article. Licenses listing endpoints are described \nhere\n.\n\n\n\n\n\n\n\n\nSuccess Response\n\n\nStatus: 201 Created\nLocation: https://api.figshare.com/v2/account/articles/123\n\n\n\n\nRead own article\n\n\nGET /v2/account/articles/{id}\n\n\n\nSuccess Response\n\nStatus: 200 OK\n\n\nArticlePresenterL2\n\n\nError Response (Id not found)\n\n\nStatus: 404 Not found\n\n\n\n\n{\nmessage\n: \nArticle not found\n}\n\n\n\n\nUpdate article\n\n\nPUT /v2/account/articles/{id}\n\n\n\nInput\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntitle\n\n\nstr\n\n\nThe title for this article - \nmandatory\n\n\n\n\n\n\ndescription\n\n\nstr\n\n\nThe article description. In a publisher case, usually this is the remote article description\n\n\n\n\n\n\ntags\n\n\narray of str\n\n\nList of tags to be associated with the article (e.g ['tag1', 'tag2', 'tagn'])\n\n\n\n\n\n\nreferences\n\n\narray of str\n\n\nList of links to be associated with the article (e.g ['http://link1', 'http://link2', 'http://link3'])\n\n\n\n\n\n\ncategories\n\n\narray of int\n\n\nList of category ids to be associated with the article(e.g [1, 23, 33, 66])\n\n\n\n\n\n\nauthors\n\n\narray\n\n\nList of authors to be assosciated with the article. The list can contain author ids or author names [{\"id\": 12121}, {\"id\": 34345}, {\"name\": \"John Doe\"}]. No more then 10 authors. For adding more authors use the specific authors endpoint\n\n\n\n\n\n\ncustom_fields\n\n\ndict\n\n\nList of key, values pairs to be associated with the article\n\n\n\n\n\n\ndefined_type\n\n\nstr\n\n\nArticle type, one of ['figure', 'media', 'dataset', 'fileset', 'poster', 'paper', 'presentation', 'thesis', 'code', 'stub', 'metadata']\n\n\n\n\n\n\nfunding\n\n\nstr\n\n\nGrant number or funding authority\n\n\n\n\n\n\nlicense\n\n\nint\n\n\nLicense id for this article. Licenses listing endpoints are described \nhere\n.\n\n\n\n\n\n\n\n\nSuccess Response\n\n\nStatus: 205 Reset Content\nLocation: https://api.figshare.com/v2/account/articles/123\n\n\n\n\nError Response (Id not found)\n\n\nStatus: 404 Not found\n\n\n\n\n    {\nmessage\n: \nArticle not found\n}\n\n\n\n\nDelete own private article\n\n\nDELETE /v2/account/articles/{id}\n\n\n\nSuccess Response\n\n\nStatus: 204 No Content\n\n\n\n\nError Response (Id not found)\n\n\nStatus: 404 Not found\n\n\n\n\n    {\nmessage\n: \narticle not found\n}\n\n\n\n\nReserve DOI for article**\n\n\nPOST /v2/account/articles/{id}/reserve_doi\n\n\n\nSuccess Response\n\n\nStatus: 200 OK\n\n\n\n\n{\ndoi\n: \n10.5072/FK2.FIGSHARE.20345\n}\n\n\n\n\nError Response (Id not found)\n\n\nStatus: 404 Not found\n\n\n\n\n{\nmessage\n: \narticle not found\n}\n\n\n\n\nPublish article\n\n\nPOST /v2/account/articles/{id}/publish\n\n\n\nNotes\n: \n- If the whole article is under \nembargo\n, it will not be published immediatly, but when the embargo expires or is lifted.\n\n- When an article is published, a new public version will be generated.\nAny further updates to the article will affect the private article data.\nIn order to make these changes publicly visible, an explicit publish operation is needed.\n\n\nSuccess Response\n\n\nStatus: 201 Created\nLocation: https://api.figshare.com/v2/articles/123\n\n\n\n\nError Response (Id not found)\n\n\nStatus: 404 Not found\n\n\n\n\n{\nmessage\n: \narticle not found\n}\n\n\n\n\nError Response (Missing mandatory fields for publish (e.g authors))\n\n\nStatus: 400 Bad request\n\n\n\n\n{\nmessage\n: \nMissing mandatory field for publication - authors\n}\n\n\n\n\narticle authors subsection\n\n\nList authors\n\n\nGET /v2/account/articles/{id}/authors\n\n\n\nSuccess Response\n\n\nStatus: 200 OK\n\n\n[\nAuthorPresenter\n]\n\n\nError Response (article Id not found)\n\n\nStatus: 404 Not found\n\n\n\n\n{\nmessage\n: \narticle not found\n}\n\n\n\n\nAssociate new authors with the article\n\n\nPOST /v2/account/articles/{id}/authors\n\n\n\nInput\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nauthors\n\n\narray\n\n\nList of authors to be assosciated with the article. The list can contain author ids or author names [{\"id\": 12121}, {\"id\": 34345}, {\"name\": \"John Doe\"}]. No more then 10 authors. For adding more authors use the specific authors endpoint\n\n\n\n\n\n\n\n\nSuccess Response\n\n\nStatus: 205 Reset Content\nLocation: https://api.figshare.com/v2/account/articles/123/authors\n\n\n\n\nError Response (Author(s) id not found)\n\n\nStatus: 400 Bad request\n\n\n\n\n{\nmessage\n: \nAuthor with ID not found\n}\n\n\n\n\nAssociate and replace existing authors of this article\n\n\nPUT /v2/account/articles/{id}/authors\n\n\n\nInput\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nauthors\n\n\narray\n\n\nList of authors to be assosciated with the article. The list can contain author ids or author names [{\"id\": 12121}, {\"id\": 34345}, {\"name\": \"John Doe\"}]. No more then 10 authors. For adding more authors use the specific authors endpoint\n\n\n\n\n\n\n\n\nSuccess Response\n\n\nStatus: 205 Reset Content\nLocation: https://api.figshare.com/v2/account/articles/123/authors\n\n\n\n\nError Response (Author(s) id not found)\n\n\nStatus: 400 Bad request\n\n\n\n\n{\nmessage\n: \nAuthor with ID  not found\n}\n\n\n\n\nDe-associate author from article\n\n\nDELETE /v2/account/articles/{id}/authors/{author_id}\n\n\n\nSuccess Response\n\n\nStatus: 204 No Content\n\n\n\n\nError Response (Author(s) id not found)\n\n\nStatus: 400 Bad request\n\n\n\n\n{\nmessage\n: \nAuthor with ID  not found\n}\n\n\n\n\narticle categories subsection\n\n\nList categories\n\n\nGET /v2/account/articles/{id}/categories\n\n\n\nSuccess Response\n\n\nStatus: 200 OK\n\n\n[\nCategoryPresenter\n]\n\n\nAssociate new categories with the article\n\n\nPOST /v2/account/articles/{id}/categories\n\n\n\nInput\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncategories\n\n\narray of int\n\n\nList of new categories to be assosciated with the article\n\n\n\n\n\n\n\n\nSuccess Response\n\n\nStatus: 205 Reset Content\n\n\nCategoryPresenter\n\n\nError Response (Category ID not found)\n\n\nStatus: 400 Bad request\n\n\n\n\n{\nmessage\n: \nCategory with ID not found\n}\n\n\n\n\nAssociate and replace existing categories of this article\n\n\nPUT /v2/account/articles/{id}/categories\n\n\n\nInput\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncategories\n\n\narray of int\n\n\nList of categories to be assosciated with the article. Existing categories will be replaced\n\n\n\n\n\n\n\n\nSuccess Response\n\n\nStatus: 205 Reset Content\n\n\nCategoryPresenter\n\n\nError Response (Catgeory ID not found)\n\n\nStatus: 400 Bad request\n\n\n\n\n{\nmessage\n: \nCategory with ID  not found\n}\n\n\n\n\nDe-associate category from article\n\n\nDELETE /v2/account/articles/{id}/categories/{category_id}\n\n\n\nSuccess Response\n\n\nStatus: 204 No Content\n\n\n\n\nError Response (Category id not found)\n\n\nStatus: 404 Bad request\n\n\n\n\n{\nmessage\n: \nCategory with ID  not found\n}\n\n\n\n\nArticle files subsection\n\n\nSteps to upload file\n\n\n\n\nInitiate file upload\n - this request returns an endpoint with file data\n\n\nSend a \nGET\n request to the \nUploader Service\n with the \nupload_url\n and \nupload_token\n provided in previous step and receive the number of file parts\n\n\nUpload / Delete / Retry uploading file parts until all parts are uploaded successfully\n\n\nComplete file upload\n\n\n\n\nList files\n\n\nGET /v2/account/articles/{id}/files\n\n\n\nSuccess Response\n\n\nStatus: 200 OK\n\n\n[\nFilePresenter\n]\n\n\nInitiate new file upload within the article\n\n\nPOST /v2/account/articles/{id}/files\n\n\n\nInput\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlink\n\n\nstr\n\n\nUrl for an existing file that will not be uploaded on figshare\n\n\n\n\n\n\n\n\nor\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmd5\n\n\nstr\n\n\nMD5 sum pre computed on the client side\n\n\n\n\n\n\nname\n\n\nstr\n\n\nFile name including the exception\n\n\n\n\n\n\nsize\n\n\nint\n\n\nFile size in bytes\n\n\n\n\n\n\n\n\nSuccess Response\n\n\nStatus: 201 Created\nLocation: /v2/account/articles/{id}/files/{file_id}\n\n\n\n\nUpload file content\n\n\nFigshare Upload Service\n\n\nComplete file upload\n\n\nPOST /v2/account/articles/{id}/files/{file_id}\n\n\n\nSuccess Response\n\n\nStatus: 202 Accepted\n\n\n\n\nError Response (File_id not found)\n\n\nStatus: 404 Not found\n\n\n\n\n{\nmessage\n: \nFile not found\n}\n\n\n\n\nView file information\n\n\nGET /v2/account/articles/{id}/files/{file_id}\n\n\n\nSuccess Response\n\n\nStatus: 200 OK\n\n\nFilePresenter.L1\n\n\nError Response (File_id not found)\n\n\nStatus: 404 Not found\n\n\n\n\n{\nmessage\n: \nFile not found\n}\n\n\n\n\nDelete file  from article\n\n\nDELETE /v2/account/articles/{id}/files/{file_id}\n\n\n\nSuccess Response\n\n\nStatus: 204 No Content\n\n\n\n\nError Response (File_id not found)\n\n\nStatus: 404 Not found\n\n\n\n\n{\nmessage\n: \nFile not found\n}\n\n\n\n\nArticle private links subsection\n\n\nList private links\n\n\nGET /v2/account/articles/{id}/private_links\n\n\n\nSuccess Response\n\n\nStatus: 200 OK\n\n\n[\nPrivateLinkPresenter\n]\n\n\nCreate new private link for this article\n\n\nPOST /v2/account/articles/{id}/private_links\n\n\n\nInput\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nexpires_date\n\n\ndate\n\n\nDate when this private link should expire - optional.  By default private links expire in 365 days.\n\n\n\n\n\n\n\n\nSuccess Response\n\n\nStatus: 201 OK\nLocation: https://api.figshare.com/v2/account/articles/123/private_links/kjkjhg234k53o4i45p2o3i456..\n\n\n\n\nUpdate existing private link for this  article\n\n\nPUT /v2/account/articles/{id}/private_links/{private_link_token}\n\n\n\nInput\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nexpires_date\n\n\ndate\n\n\nDate when this private link should expire - optional. By default private links expire in 365 days.\n\n\n\n\n\n\n\n\nSuccess Response\n\n\nStatus: 205 Reset Content\nLocation: https://api.figshare.com/v2/account/articles/123/private_links/kjkjhg234k53o4i45p2o3i456..\n\n\n\n\nError Response (Private Link ID not found)\n\n\nStatus: 404 Not found\n\n\n\n\n{\nmessage\n: \nPrivate Link with ID  not found\n}\n\n\n\n\nDisable/delete private link for article\n\n\nDELETE /v2/account/articles/{id}/private_links/{private_link_id}\n\n\n\nSuccess Response\n\n\nStatus: 204 No Content\n\n\n\n\nError Response (Private link ID not found)\n\n\nStatus: 404 Not found\n\n\n\n\n{\nmessage\n: \nPrivate link with ID not in article\n}\n\n\n\n\nArticle embargo subsection\n\n\nView embargo settings\n\n\nGET /v2/account/articles/{id}/embargo\n\n\n\nSuccess Response\n\n\nStatus: 200 OK\n\n\nArticleEmbargoPresenter\n\n\nUpdate embargo settings\n\n\nPUT /v2/account/articles/{id}/embargo\n\n\n\nNote\n: setting an article under \nwhole embargo\n does not imply that the article will be published when the embargo will expire. You must explicitly call the \npublish\n endpoint to enable this functionality.\n\n\nInput\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nis_embargoed\n\n\nbool\n\n\nConfidentiality status. True, False\n\n\n\n\n\n\nembargo_type\n\n\nstr\n\n\nEmbargo can be enabled at the \narticle\n or the \nfile\n level. Possible values: \narticle\n, \nfile\n\n\n\n\n\n\nembargo_date\n\n\ndate\n\n\nDate when the embargo expires and the article gets published\n\n\n\n\n\n\nembargo_reason\n\n\nstr\n\n\nReason for setting embargo\n\n\n\n\n\n\n\n\nSuccess Response\n\n\nStatus: 205 Reset Content\nLocation: http://api.figshare.com/v2/account/articles/2000688/embargo\n\n\n\n\nInput error\n\n\nStatus: 400 Bad request\n\n\n\n\n{\nmessage\n: \nInvalid expires date\n}\n\n\n\n\nDelete embargo settings\n\n\nDELETE /v2/account/articles/{id}/embargo\n\n\n\nSuccess Response\n\n\nStatus: 204 No Content\n\n\n\n\nArticle confidentiality subsection\n\n\nView confidentiality settings\n\n\nGET /v2/account/articles/{id}/confidentiality\n\n\n\nSuccess Response\n\n\nStatus: 200 OK\n\n\nArticleConfidentialityPresenter\n\n\nUpdate confidentiality settings\n\n\nPUT /v2/account/articles/{id}/confidentiality\n\n\n\nInput\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nreason\n\n\nstr\n\n\nConfidentiality reason\n\n\n\n\n\n\n\n\nSuccess Response\n\n\nStatus: 200 OK\nLocation: http://api.figshare.com/v2/account/articles/2000688/confidentiality\n\n\n\n\nDelete confidentiality settings\n\n\nDELETE /v2/account/articles/{id}/confidentiality\n\n\n\nSuccess Response\n\n\nStatus: 204 No Content", 
            "title": "Articles"
        }, 
        {
            "location": "/APIv2/articles/#article-endpoints", 
            "text": "Public  list public articles  search public articles  read public article   article versions   list versions  read public article version  read public article version embargo  read public article version confidentiality     Private   get own articles  search own articles  create a new article  read own article  update article  delete own private article  reserve doi for article  publish article  article authors  list authors  associate new authors  associate and replace authors  de-associate author    article categories  list categories  associate new categories  associate and replace categories  de-associate category    article files  list files  initiate new file upload  upload file content  complete file upload  view file information  delete file from article    article private links  list private links  create new private link  update existing private link  disable/delete private link    article embargo  view embargo settings  update embargo settings  delete embargo settings    article confidentiality  view confidentiality settings  update confidentiality settings  delete confidentiality settings", 
            "title": "Article endpoints"
        }, 
        {
            "location": "/APIv2/articles/#article-public-endpoints", 
            "text": "", 
            "title": "Article public endpoints"
        }, 
        {
            "location": "/APIv2/articles/#list-public-articles", 
            "text": "GET /v2/articles  Input  Accepts  pagination ,  sorting ,  filtering  params. See  API feature list  for details.  Accepted filters:     field  type  notes      institution  int  only return collections from this institution    group  int  only return collections from this group    published_since  date(ISO 8601)  Only collections published after the date    modified_since  date(ISO 8601)  Only collections published after the date     Defaults:     field  value      order  published_date    order_direction  desc    page_size  10     Success Response (list of articles) \nStatus: 200 OK  [ ArticlePresenter ]  Error Response (Max page number reached)  Status: 400 Bad request  { message :  Max page reached. Please narrow down your search }", 
            "title": "List public articles"
        }, 
        {
            "location": "/APIv2/articles/#search-public-articles", 
            "text": "POST /v2/articles/search  Input  Accepts  pagination ,  sorting ,  filtering  and  search  params. See  API feature list  for details.  Filters and defaults are the same as for  the list public articles  Success Response (list of articles) \nStatus: 200 OK  [ ArticlePresenter ]  Error Response (invalid input)  Status: 400 Bad request  { message :  Invalid value received for order }  Error Response (Max page number reached)  Status: 400 Bad request  { message :  Max page reached. Please narrow down your search }", 
            "title": "Search public articles"
        }, 
        {
            "location": "/APIv2/articles/#read-public-article", 
            "text": "GET /v2/articles/{id}  Success Response (article object) \nStatus: 200 OK  ArticlePresenter.L2  Error Response (article not found)  Status: 404 Not Found  { message :  Article with specified ID does not exist }", 
            "title": "Read public article"
        }, 
        {
            "location": "/APIv2/articles/#article-versions-subsection", 
            "text": "List versions  GET /v2/articles/{id}/versions  Success Response  Status: 200 OK  [ ArticleVersionPresenter ]  Error Response (article ID not found)  Status: 404 Not found  { message :  article with ID not found }", 
            "title": "Article versions subsection"
        }, 
        {
            "location": "/APIv2/articles/#read-public-article-version", 
            "text": "Read public article that has {id} and {v_number}  GET /v2/articles/{id}/versions/{v_number}  Success Response (article object for specified version)  Status: 200 OK  ArticlePresenter.L2  Error Response (Version not found)  Status: 404 Not Found  { message :  Version does not exist }", 
            "title": "Read public article version"
        }, 
        {
            "location": "/APIv2/articles/#read-public-article-version-embargo", 
            "text": "Read public article embargo that has {id} and {v_number}  GET /v2/articles/{id}/versions/{v_number}/embargo  Success Response (article object for specified version)  Status: 200 OK  ArticleEmbargoPresenter  Error Response (Version not found)  Status: 404 Not Found  { message :  Version does not exist }", 
            "title": "Read public article version embargo"
        }, 
        {
            "location": "/APIv2/articles/#read-public-article-version-confidentiality", 
            "text": "Read public article confidentiality that has {id} and {v_number}  GET /v2/articles/{id}/versions/{v_number}/confidentiality  Success Response (article object for specified version)  Status: 200 OK  ArticleConfidentialityPresenter  Error Response (Version not found)  Status: 404 Not Found  { message :  Version does not exist }", 
            "title": "Read public article version confidentiality"
        }, 
        {
            "location": "/APIv2/articles/#article-private-endpoints-oauth-required", 
            "text": "", 
            "title": "Article private endpoints (OAuth required)"
        }, 
        {
            "location": "/APIv2/articles/#get-own-articles", 
            "text": "GET /v2/account/articles  Input     Name  Type  Description      page  int  Show specified page only. Default is 1. Max page is 100. To see more then 100 pages, the search endpoint must be used to narrow down the results    page_size  int  How many entries per page to show. Default is 10.     OR     Name  Type  Description      offset  int  The first entry to return. The offset of the initial entry is 0 (not 1).    limit  int  The number of returned entries. Default is 10.     By default the items are sorted by  created_date , not  published_date .  Success Response (list of articles) \nStatus: 200 OK  [ ArticlePresenter ]  Error Response (Max page number reached)  Status: 400 Bad request  { message :  Max page reached. Please narrow down your search }", 
            "title": "Get own articles"
        }, 
        {
            "location": "/APIv2/articles/#search-own-articles", 
            "text": "POST /v2/account/articles/search  Input     Name  Type  Description      page  int  Show specified page only. Default is 1. Max is 100    page_size  int  How many entries per page to show. Default is 10. Max is 100    search_for  str  (query)String to perform search for. Minimum of 4 characters    published_since  date  (filter)Narrow search  to articles published since the specified date    modified_since  date  (filter)Narrow search  to articles modified since the specified date    institution  int  (filter)Filter results for this instritution only    group  int  (filter)Filter results for this institution group only    order  str  (sort)Perform a sort using the  order . Valid values are:  published_date ,  modified_date    order_direction  str  (sort)How to sort. Descending or ascending. Valid values are:  desc ,  asc     Alternatively, instead of  page  and  page_size , one can use the following params for pagination:     Name  Type  Description      offset  int  The first entry to return. The offset of the initial entry is 0 (not 1).    limit  int  The number of returned entries. Default is 10.     Success Response (list of articles)  Status: 200 OK  [ ArticlePresenter ]  Error Response (invalid input)  Status: 400 Bad request  { message :  Invalid value received for order }  Error Response (Max page number reached)  Status: 400 Bad request  { message :  Max page reached. Please narrow down your search }", 
            "title": "Search own articles"
        }, 
        {
            "location": "/APIv2/articles/#create-a-new-article", 
            "text": "POST /v2/account/articles  Input     Name  Type  Description      title  str  The title for this article    description  str  The article description. In a publisher case, usually this is the remote article description    tags  array of str  List of tags to be associated with the article (e.g ['tag1', 'tag2', 'tagn'])    references  array of str  List of links to be associated with the article (e.g ['http://link1', 'http://link2', 'http://link3'])    categories  array of int  List of category ids to be associated with the article(e.g [1, 23, 33, 66])    authors  array  List of authors to be assosciated with the article. The list can contain author ids or author names [{\"id\": 12121}, {\"id\": 34345}, {\"name\": \"John Doe\"}]. No more then 10 authors. For adding more authors use the specific authors endpoint    custom_fields  dict  List of key, values pairs to be associated with the article    defined_type  str  Article type, one of ['figure', 'media', 'dataset', 'fileset', 'poster', 'paper', 'presentation', 'thesis', 'code', 'metadata']    funding  str  Grant number or funding authority    license  int  License id for this article. Licenses listing endpoints are described  here .     Success Response  Status: 201 Created\nLocation: https://api.figshare.com/v2/account/articles/123", 
            "title": "Create a new article"
        }, 
        {
            "location": "/APIv2/articles/#read-own-article", 
            "text": "GET /v2/account/articles/{id}  Success Response \nStatus: 200 OK  ArticlePresenterL2  Error Response (Id not found)  Status: 404 Not found  { message :  Article not found }", 
            "title": "Read own article"
        }, 
        {
            "location": "/APIv2/articles/#update-article", 
            "text": "PUT /v2/account/articles/{id}  Input     Name  Type  Description      title  str  The title for this article -  mandatory    description  str  The article description. In a publisher case, usually this is the remote article description    tags  array of str  List of tags to be associated with the article (e.g ['tag1', 'tag2', 'tagn'])    references  array of str  List of links to be associated with the article (e.g ['http://link1', 'http://link2', 'http://link3'])    categories  array of int  List of category ids to be associated with the article(e.g [1, 23, 33, 66])    authors  array  List of authors to be assosciated with the article. The list can contain author ids or author names [{\"id\": 12121}, {\"id\": 34345}, {\"name\": \"John Doe\"}]. No more then 10 authors. For adding more authors use the specific authors endpoint    custom_fields  dict  List of key, values pairs to be associated with the article    defined_type  str  Article type, one of ['figure', 'media', 'dataset', 'fileset', 'poster', 'paper', 'presentation', 'thesis', 'code', 'stub', 'metadata']    funding  str  Grant number or funding authority    license  int  License id for this article. Licenses listing endpoints are described  here .     Success Response  Status: 205 Reset Content\nLocation: https://api.figshare.com/v2/account/articles/123  Error Response (Id not found)  Status: 404 Not found      { message :  Article not found }", 
            "title": "Update article"
        }, 
        {
            "location": "/APIv2/articles/#delete-own-private-article", 
            "text": "DELETE /v2/account/articles/{id}  Success Response  Status: 204 No Content  Error Response (Id not found)  Status: 404 Not found      { message :  article not found }", 
            "title": "Delete own private article"
        }, 
        {
            "location": "/APIv2/articles/#reserve-doi-for-article", 
            "text": "POST /v2/account/articles/{id}/reserve_doi  Success Response  Status: 200 OK  { doi :  10.5072/FK2.FIGSHARE.20345 }  Error Response (Id not found)  Status: 404 Not found  { message :  article not found }", 
            "title": "Reserve DOI for article**"
        }, 
        {
            "location": "/APIv2/articles/#publish-article", 
            "text": "POST /v2/account/articles/{id}/publish  Notes : \n- If the whole article is under  embargo , it will not be published immediatly, but when the embargo expires or is lifted. \n- When an article is published, a new public version will be generated.\nAny further updates to the article will affect the private article data.\nIn order to make these changes publicly visible, an explicit publish operation is needed.  Success Response  Status: 201 Created\nLocation: https://api.figshare.com/v2/articles/123  Error Response (Id not found)  Status: 404 Not found  { message :  article not found }  Error Response (Missing mandatory fields for publish (e.g authors))  Status: 400 Bad request  { message :  Missing mandatory field for publication - authors }", 
            "title": "Publish article"
        }, 
        {
            "location": "/APIv2/articles/#article-authors-subsection", 
            "text": "List authors  GET /v2/account/articles/{id}/authors  Success Response  Status: 200 OK  [ AuthorPresenter ]  Error Response (article Id not found)  Status: 404 Not found  { message :  article not found }  Associate new authors with the article  POST /v2/account/articles/{id}/authors  Input     Name  Type  Description      authors  array  List of authors to be assosciated with the article. The list can contain author ids or author names [{\"id\": 12121}, {\"id\": 34345}, {\"name\": \"John Doe\"}]. No more then 10 authors. For adding more authors use the specific authors endpoint     Success Response  Status: 205 Reset Content\nLocation: https://api.figshare.com/v2/account/articles/123/authors  Error Response (Author(s) id not found)  Status: 400 Bad request  { message :  Author with ID not found }  Associate and replace existing authors of this article  PUT /v2/account/articles/{id}/authors  Input     Name  Type  Description      authors  array  List of authors to be assosciated with the article. The list can contain author ids or author names [{\"id\": 12121}, {\"id\": 34345}, {\"name\": \"John Doe\"}]. No more then 10 authors. For adding more authors use the specific authors endpoint     Success Response  Status: 205 Reset Content\nLocation: https://api.figshare.com/v2/account/articles/123/authors  Error Response (Author(s) id not found)  Status: 400 Bad request  { message :  Author with ID  not found }  De-associate author from article  DELETE /v2/account/articles/{id}/authors/{author_id}  Success Response  Status: 204 No Content  Error Response (Author(s) id not found)  Status: 400 Bad request  { message :  Author with ID  not found }", 
            "title": "article authors subsection"
        }, 
        {
            "location": "/APIv2/articles/#article-categories-subsection", 
            "text": "List categories  GET /v2/account/articles/{id}/categories  Success Response  Status: 200 OK  [ CategoryPresenter ]  Associate new categories with the article  POST /v2/account/articles/{id}/categories  Input     Name  Type  Description      categories  array of int  List of new categories to be assosciated with the article     Success Response  Status: 205 Reset Content  CategoryPresenter  Error Response (Category ID not found)  Status: 400 Bad request  { message :  Category with ID not found }  Associate and replace existing categories of this article  PUT /v2/account/articles/{id}/categories  Input     Name  Type  Description      categories  array of int  List of categories to be assosciated with the article. Existing categories will be replaced     Success Response  Status: 205 Reset Content  CategoryPresenter  Error Response (Catgeory ID not found)  Status: 400 Bad request  { message :  Category with ID  not found }  De-associate category from article  DELETE /v2/account/articles/{id}/categories/{category_id}  Success Response  Status: 204 No Content  Error Response (Category id not found)  Status: 404 Bad request  { message :  Category with ID  not found }", 
            "title": "article categories subsection"
        }, 
        {
            "location": "/APIv2/articles/#article-files-subsection", 
            "text": "Steps to upload file   Initiate file upload  - this request returns an endpoint with file data  Send a  GET  request to the  Uploader Service  with the  upload_url  and  upload_token  provided in previous step and receive the number of file parts  Upload / Delete / Retry uploading file parts until all parts are uploaded successfully  Complete file upload   List files  GET /v2/account/articles/{id}/files  Success Response  Status: 200 OK  [ FilePresenter ]  Initiate new file upload within the article  POST /v2/account/articles/{id}/files  Input     Name  Type  Description      link  str  Url for an existing file that will not be uploaded on figshare     or     Name  Type  Description      md5  str  MD5 sum pre computed on the client side    name  str  File name including the exception    size  int  File size in bytes     Success Response  Status: 201 Created\nLocation: /v2/account/articles/{id}/files/{file_id}  Upload file content  Figshare Upload Service  Complete file upload  POST /v2/account/articles/{id}/files/{file_id}  Success Response  Status: 202 Accepted  Error Response (File_id not found)  Status: 404 Not found  { message :  File not found }  View file information  GET /v2/account/articles/{id}/files/{file_id}  Success Response  Status: 200 OK  FilePresenter.L1  Error Response (File_id not found)  Status: 404 Not found  { message :  File not found }  Delete file  from article  DELETE /v2/account/articles/{id}/files/{file_id}  Success Response  Status: 204 No Content  Error Response (File_id not found)  Status: 404 Not found  { message :  File not found }", 
            "title": "Article files subsection"
        }, 
        {
            "location": "/APIv2/articles/#article-private-links-subsection", 
            "text": "List private links  GET /v2/account/articles/{id}/private_links  Success Response  Status: 200 OK  [ PrivateLinkPresenter ]  Create new private link for this article  POST /v2/account/articles/{id}/private_links  Input     Name  Type  Description      expires_date  date  Date when this private link should expire - optional.  By default private links expire in 365 days.     Success Response  Status: 201 OK\nLocation: https://api.figshare.com/v2/account/articles/123/private_links/kjkjhg234k53o4i45p2o3i456..  Update existing private link for this  article  PUT /v2/account/articles/{id}/private_links/{private_link_token}  Input     Name  Type  Description      expires_date  date  Date when this private link should expire - optional. By default private links expire in 365 days.     Success Response  Status: 205 Reset Content\nLocation: https://api.figshare.com/v2/account/articles/123/private_links/kjkjhg234k53o4i45p2o3i456..  Error Response (Private Link ID not found)  Status: 404 Not found  { message :  Private Link with ID  not found }  Disable/delete private link for article  DELETE /v2/account/articles/{id}/private_links/{private_link_id}  Success Response  Status: 204 No Content  Error Response (Private link ID not found)  Status: 404 Not found  { message :  Private link with ID not in article }", 
            "title": "Article private links subsection"
        }, 
        {
            "location": "/APIv2/articles/#article-embargo-subsection", 
            "text": "View embargo settings  GET /v2/account/articles/{id}/embargo  Success Response  Status: 200 OK  ArticleEmbargoPresenter  Update embargo settings  PUT /v2/account/articles/{id}/embargo  Note : setting an article under  whole embargo  does not imply that the article will be published when the embargo will expire. You must explicitly call the  publish  endpoint to enable this functionality.  Input     Name  Type  Description      is_embargoed  bool  Confidentiality status. True, False    embargo_type  str  Embargo can be enabled at the  article  or the  file  level. Possible values:  article ,  file    embargo_date  date  Date when the embargo expires and the article gets published    embargo_reason  str  Reason for setting embargo     Success Response  Status: 205 Reset Content\nLocation: http://api.figshare.com/v2/account/articles/2000688/embargo  Input error  Status: 400 Bad request  { message :  Invalid expires date }  Delete embargo settings  DELETE /v2/account/articles/{id}/embargo  Success Response  Status: 204 No Content", 
            "title": "Article embargo subsection"
        }, 
        {
            "location": "/APIv2/articles/#article-confidentiality-subsection", 
            "text": "View confidentiality settings  GET /v2/account/articles/{id}/confidentiality  Success Response  Status: 200 OK  ArticleConfidentialityPresenter  Update confidentiality settings  PUT /v2/account/articles/{id}/confidentiality  Input     Name  Type  Description      reason  str  Confidentiality reason     Success Response  Status: 200 OK\nLocation: http://api.figshare.com/v2/account/articles/2000688/confidentiality  Delete confidentiality settings  DELETE /v2/account/articles/{id}/confidentiality  Success Response  Status: 204 No Content", 
            "title": "Article confidentiality subsection"
        }, 
        {
            "location": "/APIv2/categories/", 
            "text": "List categories\n\n\nGET /v2/categories\n\n\n\nSuccess Response\n\n\nStatus: 200 OK\n\n\nA list of \nCategory Presenters", 
            "title": "Categories"
        }, 
        {
            "location": "/APIv2/categories/#list-categories", 
            "text": "GET /v2/categories  Success Response  Status: 200 OK  A list of  Category Presenters", 
            "title": "List categories"
        }, 
        {
            "location": "/APIv2/collections/", 
            "text": "Collection endpoints\n\n\n\n\nPublic\n\n\nlist collections\n\n\nsearch collections\n\n\nread collection\n\n\nlist collection articles\n\n\nlist public collection versions\n\n\n\n\nread public collection version\n\n\n\n\n\n\nPrivate\n\n\n\n\nlist own collections\n\n\ncreate new collection\n\n\nread own collection\n\n\nupdate collection\n\n\ndelete own private collection\n\n\nreserve doi for collection\n\n\npublish collection\n\n\ncollection authors\n\n\nlist authors\n\n\nassociate new authors\n\n\nassociate and replace authors\n\n\nde-associate author\n\n\n\n\n\n\ncollection categories\n\n\nlist categories\n\n\nassociate new categories\n\n\nassociate and replace categories\n\n\nde-associate category\n\n\n\n\n\n\ncollection articles\n\n\nlist articles\n\n\nassociate new articles\n\n\nassociate and replace articles\n\n\nde-associate article\n\n\n\n\n\n\nprivate links\n\n\nlist private links\n\n\ncreate new private link\n\n\nupdate existing private link\n\n\ndisable/delete private link\n\n\n\n\n\n\n\n\nPublic endpoints\n\n\nThe following \npublic\n endpoints don't require\nauthentication/authorization.\n\n\n===========================\n\n\nList public collections\n\n\nRequest\n\n\nGET /v2/collections\n\n\n\nAccepts \npagination\n, \nsorting\n, \nfiltering\n params. See \nAPI feature list\n for details.\n\n\nAccepted filters:\n\n\n\n\n\n\n\n\nfield\n\n\ntype\n\n\nnotes\n\n\n\n\n\n\n\n\n\n\ninstitution\n\n\nint\n\n\nonly return collections from this institution\n\n\n\n\n\n\ngroup\n\n\nint\n\n\nonly return collections from this group\n\n\n\n\n\n\npublished_since\n\n\ndate (ISO 8601)\n\n\nOnly collections published after the date\n\n\n\n\n\n\nmodified_since\n\n\ndate (ISO 8601)\n\n\nOnly collections published after the date\n\n\n\n\n\n\n\n\nDefaults:\n\n\n\n\n\n\n\n\nfield\n\n\nvalue\n\n\n\n\n\n\n\n\n\n\norder\n\n\npublished_date\n\n\n\n\n\n\norder_direction\n\n\ndesc\n\n\n\n\n\n\npage_size\n\n\n10\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nStatus: \n200 OK\n\n\nBody: List of \nCollectionPresenter\n\n\n\n\nErrors\n\n\nStandard \nerror responses\n.\n\n\n=============================\n\n\nSearch public collections\n\n\nRequest\n\n\nPOST /v2/collections/search\n\n\n\nSearch public collections. Accepts \npagination\n, \nsorting\n, \nfiltering\n\nand \nsearch\n params.  See \nAPI feature list\n for details.\n\n\nFilters and defaults are the same as for  the\n\nlist public collections\n\n\nThe response body will use the collection \nlight\n presenter.\n\n\nResponse\n\n\n\n\nstatus: \n200 OK\n\n\nbody: List of \nCollectionPresenter\n\n\n\n\nErrors\n\n\nStandard \nerror responses\n.\n\n\n==========================\n\n\nRead public collection\n\n\nRequest\n\n\nGET /v2/collections/{id}\n\n\n\nResponse\n\n\nThe collection \ndetailed\n presenter will be used.\n\n\n\n\nStatus: \n200 OK\n\n\nBody: \ndetailed CollectionPresenter(L1)\n\n\n\n\nErrors\n\n\nStandard \nerror responses\n.\n\n\n===================================\n\n\nList collection public articles\n\n\nRequest\n\n\nGET /v2/collections/{id}/articles\n\n\n\nAccepts \npagination\n params. See \nAPI feature list\n for details.\n\n\nResponse\n\n\n\n\nStatus: \n200 OK\n\n\nBody: A list of \nArticlePresenters\n\n\n\n\nErrors\n\n\nStandard \nerror responses\n.\n\n\n===================================\n\n\nList public collection versions\n\n\nRequest\n\n\nGET /v2/collections/{id}/versions\n\n\n\nResponse\n\n\n\n\nStatus: \n200 OK\n\n\nBody: List of \nCollectionVersionPresenter (light)\n\n\n\n\nErrors\n\n\nStandard \nerror responses\n.\n\n\n===================================\n\n\nRead public collection version\n\n\nGET /v2/collections/{id}/versions/{version_number}\n\n\n\nResponse\n\n\n\n\nStatus: \n200 OK\n\n\nBody: \nCollectionPresenter (detailed)\n\n\n\n\nErrors:\n\n\nStandard \nerror responses\n.\n\n\nPrivate endpoints\n\n\nThese requests require authorization/authentication. Missing valid auth\nwill result in 403 and 401 errors.\n\n\nThe attribute \nown\n means resources owned(created or authored) by the\nauthenticated account.\n\n\n==========================\n\n\nList \nown\n collections\n\n\nGET /v2/account/collections\n\n\n\nAlmost identical to \nlist public collections\n, but default sorting is by \ncreated_date\n, not \npublished_date\n.\n\n\n==========================\n\n\nCreate a new collection\n\n\nPOST /v2/account/collections\n\n\n\nRequest\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntitle\n\n\nstr\n\n\nThe title for this collection - \nmandatory\n\n\n\n\n\n\ndescription\n\n\nstr\n\n\nThe collection description. In a publisher case, usually this is the resource article description\n\n\n\n\n\n\ndoi\n\n\nstr\n\n\nDigital Object Identifier\n\n\n\n\n\n\narticles\n\n\narray of int\n\n\nList of articles to be associated with the collection (e.g \n[1, 4]\n)\n\n\n\n\n\n\nauthors\n\n\narray of dictionaries {'id':int} or {'name':str}\n\n\nList of new authors to be assosciated with the collection. Each element identifies an author by \nid\n or \nname\n: \n[{\"id\":1212}, \"name\":\"John Doe\"}]\n)\n\n\n\n\n\n\ncategories\n\n\narray of int\n\n\nList of category ids to be associated with the collection (e.g \n[5, 7, 9]\n)\n\n\n\n\n\n\ntags\n\n\narray of str\n\n\nList of tags to be associated with the collection (e.g \n[\"tag1\", \"tag2\"]\n)\n\n\n\n\n\n\nreferences\n\n\narray of str\n\n\nList of references to be associated with the collection (e.g \n[\"http://figshare.com\", \"http://figshare.com/articles/browse\"]\n)\n\n\n\n\n\n\nresource_id\n\n\nstr\n\n\nNot applicable to regular users. In a publisher case, this is the publisher article id\n\n\n\n\n\n\nresource_doi\n\n\nstr\n\n\nNot applicable to regular users. In a publisher case, this is the publisher article DOI\n\n\n\n\n\n\nresource_link\n\n\nstr\n\n\nNot applicable to regular users. In a publisher case, this is the publisher article link\n\n\n\n\n\n\nresource_title\n\n\nstr\n\n\nNot applicable to regular users. In a publisher case, this is the publisher article title\n\n\n\n\n\n\nresource_version\n\n\nint\n\n\nNot applicable to regular users. In a publisher case, this is the publisher article version\n\n\n\n\n\n\ncustom_fields\n\n\ndict\n\n\nList of key, values pairs to be associated with the collection. Similar to custom article fields\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nStatus: \n201 Created\n\n\nHeaders:\n    \nLocation: https://api.figshare.com/v2/account/collections/123\n\n\nBody: \nCollectionPresenter (detailed)\n\n\n\n\nErrors\n\n\nStandard \nerror responses\n.\n\n\n=======================\n\n\nRead \nown\n collection\n\n\nGET /v2/account/collections/{id}\n\n\n\nResponse\n\n\n\n\nStatus: \n200 OK\n\n\nBody: \nCollectionPresenter (detailed)\n\n\n\n\nErrors\n\n\nStandard \nerror responses\n.\n\n\nUpdate collection\n\n\nPUT /v2/account/collections/{id}\n\n\n\nInput\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntitle\n\n\nstr\n\n\nThe title for this collection\n\n\n\n\n\n\ndescription\n\n\nstr\n\n\nThe collection description. In a publisher case, usually this is the resource article description\n\n\n\n\n\n\ndoi\n\n\nstr\n\n\nDigital Object Identifier\n\n\n\n\n\n\narticles\n\n\narray of int\n\n\nList of articles to be associated with the collection (e.g \n[1, 4]\n)\n\n\n\n\n\n\nauthors\n\n\narray of dictionaries {'id':int} or {'name':str}\n\n\nList of new authors to be assosciated with the collection. Each element identifies an author by \nid\n or \nname\n: \n[{\"id\":1212}, \"name\":\"John Doe\"}]\n)\n\n\n\n\n\n\ncategories\n\n\narray of int\n\n\nList of category ids to be associated with the collection (e.g \n[5, 7, 9]\n)\n\n\n\n\n\n\ntags\n\n\narray of str\n\n\nList of tags to be associated with the collection (e.g \n[\"tag1\", \"tag2\"]\n)\n\n\n\n\n\n\nreferences\n\n\narray of str\n\n\nList of references to be associated with the collection (e.g \n[\"http://figshare.com\", \"http://figshare.com/articles/browse\"]\n)\n\n\n\n\n\n\nresource_id\n\n\nstr\n\n\nNot applicable to regular users. In a publisher case, this is the publisher article id\n\n\n\n\n\n\nresource_doi\n\n\nstr\n\n\nNot applicable to regular users. In a publisher case, this is the publisher article DOI\n\n\n\n\n\n\nresource_link\n\n\nstr\n\n\nNot applicable to regular users. In a publisher case, this is the publisher article link\n\n\n\n\n\n\nresource_title\n\n\nstr\n\n\nNot applicable to regular users. In a publisher case, this is the publisher article title\n\n\n\n\n\n\nresource_version\n\n\nint\n\n\nNot applicable to regular users. In a publisher case, this is the publisher article version\n\n\n\n\n\n\ncustom_fields\n\n\ndict\n\n\nList of key, values pairs to be associated with the collection. Similar to custom article fields\n\n\n\n\n\n\n\n\nSuccess Response\n\n\nStatus: 205 Reset Content\nLocation: https://api.figshare.com/v2/account/collections/123\n\n\n\n\nError Response (Id not found)\n\n\nStatus: 404 Not found\n\n\n\n\n{\nmessage\n: \nCollection not found\n}\n\n\n\n\nDelete own private collection\n\n\nDELETE /v2/account/collections/{id}\n\n\n\nSuccess Response\n\n\nStatus: 204 No content\n\n\n\n\nError Response (Id not found)\n\n\nStatus: 404 Not found\n\n\n\n\n{\nmessage\n: \nCollection not found\n}\n\n\n\n\nReserve DOI for collection**\n\n\nPOST /v2/account/collections/{id}/reserve_doi\n\n\n\nSuccess Response\n\n\nStatus: 200 OK\n\n\n\n\n{\ndoi\n: \ndoi link\n}\n\n\n\n\nError Response (Id not found)\n\n\nStatus: 404 Not found\n\n\n\n\n{\nmessage\n: \nCollection not found\n}\n\n\n\n\nPublish collection\n\n\nPOST /v2/account/collections/{id}/publish\n\n\n\nNote\n:\n\nWhen a collection is published, a new public version will be generated.\n\nAny further updates to the collection will affect the private collection data.\n\nIn order to make these changes publicly visible, an explicit \npublish\n operation is needed.  \n\n\nSuccess Response\n\n\nStatus: 201 Created\nLocation: https://api.figshare.com/v2/collections/123\n\n\n\n\nError Response (Missing mandatory fields for publish (e.g authors))\n\n\nStatus: 428 Precondition failed\n\n\n\n\n{\n    \nmessage\n: \nCollection has no associated authors\n,\n    \ncode\n: \nMissingMandatoryFieldException\n,\n    \ndata\n: {}\n}\n\n\n\n\nCollection authors subsection\n\n\nList authors\n\n\nGET /v2/account/collections/{id}/authors\n\n\n\nTo represent the authors, the author's \nlight\n presenter will be used.\n\n\nSuccess Response\n\n\nStatus: 200 OK\n\n\n\n\n[\nAuthorPresenter\n]\n\n\nAssociate new authors with the collection\n\n\nPOST /v2/account/collections/{id}/authors\n\n\n\nInput\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nauthors\n\n\narray of dictionaries {'id':int} or {'name':str}\n\n\nList of new authors to be assosciated with the collection. The list can contain author ids or names. Example \n{\"authors\": [ {\"id\": 1}, {\"name\": \"Joe Doe\"} ] }\n represents two authors: one identified by \nid\n and one by \nname\n.\n\n\n\n\n\n\n\n\nSuccess Response\n\n\nStatus: 201 Created\nLocation: https://api.figshare.com/v2/account/collections/123/authors\n\n\n\n\nError Response (Author(s) id not found)\n\n\nStatus: 422 Unprocessable Entity\n\n\n\n\n{\n    \nmessage\n: \nAuthor not found\n,\n    \ncode\n: \nEntityNotFoundException\n,\n    \ndata\n: {}\n}\n\n\n\n\nAssociate and replace existing authors of this collection\n\n\nPUT /v2/account/collections/{id}/authors\n\n\n\nInput\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nauthors\n\n\narray of dictionaries {'id':int} or {'name':str}\n\n\nList of authors to be assosciated with the collection. The list can contain author ids or names. Example \n{\"authors\": [ {\"id\": 1}, {\"name\": \"Joe Doe\"} ] }\n represents two authors: one identified by \nid\n and one by \nname\n.\n\n\n\n\n\n\n\n\nTo represent the author entity, the \nlight\n presenter will be used.\n\n\nSuccess Response\n\n\nStatus: 205 Reset Content\nLocation: https://api.figshare.com/v2/account/collections/123/authors\n\n\n\n\nError Response (Author(s) id not found)\n\n\nStatus: 422 Unprocessable Entity\n\n\n\n\n{\n    \nmessage\n: \nAuthor not found\n,\n    \ncode\n: \nEntityNotFoundException\n,\n    \ndata\n: {}\n}\n\n\n\n\nDe-associate author from collection\n\n\nDELETE /v2/account/collections/{id}/authors/{author_id}\n\n\n\nSuccess Response\n\n\nStatus: 204 No content\n\n\n\n\nError Response (Author id not found)\n\n\nStatus: 422 Unprocessable Entity\n\n\n\n\n{\n    \nmessage\n: \nAuthor not found\n,\n    \ncode\n: \nEntityNotFoundException\n,\n    \ndata\n: {}\n}\n\n\n\n\nCollection categories subsection\n\n\nList categories\n\n\nGET /v2/account/collections/{id}/categories\n\n\n\nSuccess Response\n\n\nStatus: 200 OK\n\n\n\n\n[\nCategoryPresenter\n]\n\n\nAssociate new categories with the collection\n\n\nPOST /v2/account/collections/{id}/categories\n\n\n\nInput\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncategories\n\n\narray of int\n\n\nList of new categories to be assosciated with the collection\n\n\n\n\n\n\n\n\nSuccess Response\n\n\nStatus: 201 Created\nLocation: https://api.figshare.com/v2/account/collections/123/categories\n\n\n\n\nError Response (Category ID not found)\n\n\nStatus: 422 Unprocessable Entity\n\n\n\n\n{\n    \nmessage\n: \nCategory not found\n,\n    \ncode\n: \nEntityNotFoundException\n,\n    \ndata\n: {}\n}\n\n\n\n\nAssociate and replace existing categories of this collection\n\n\nPUT /v2/account/collections/{id}/categories\n\n\n\nInput\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncategories\n\n\narray of int\n\n\nList of categories to be assosciated with the collection. Existing categories will be replaced\n\n\n\n\n\n\n\n\nSuccess Response\n\n\nStatus: 205 Reset Content\nLocation: https://api.figshare.com/v2/account/collections/123/categories\n\n\n\n\nError Response (Category ID not found)\n\n\nStatus: 422 Unprocessable Entity\n\n\n\n\n{\n    \nmessage\n: \nCategory not found\n,\n    \ncode\n: \nEntityNotFoundException\n,\n    \ndata\n: {}\n}\n\n\n\n\nDe-associate category from collection\n\n\nDELETE /v2/account/collections/{id}/categories/{category_id}\n\n\n\nSuccess Response\n\n\nStatus: 204 No Content\n\n\n\n\nError Response (Category id not found)\n\n\nStatus: 404 Not found\n\n\n\n\n{\n    \nmessage\n: \nCategory not found\n,\n    \ncode\n: \nEntityNotFoundException\n,\n    \ndata\n: {}\n}\n\n\n\n\nCollection articles subsection\n\n\nList articles\n\n\nGET /v2/account/collections/{id}/articles\n\n\n\nSuccess Response\n\n\nStatus: 200 OK\n\n\n\n\n[\nArticlePresenter\n]\n\n\nAssociate new articles with the collection\n\n\nPOST /v2/account/collections/{id}/articles\n\n\n\nInput\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narticles\n\n\narray of int\n\n\nList of new articles to be assosciated with the collection. No more then 10 article IDs per request\n\n\n\n\n\n\n\n\nSuccess Response\n\n\nStatus: 201 Created\nLocation: https://api.figshare.com/v2/account/collections/123/articles\n\n\n\n\nError Response (Article ID not found)\n\n\nStatus: 422 Unprocessable Entity\n\n\n\n\n{\n    \nmessage\n: \nArticle not found\n,\n    \ncode\n: \nEntityNotFoundException\n,\n    \ndata\n: {}\n}\n\n\n\n\nAssociate and replace existing articles of this collection\n\n\nPUT /v2/account/collections/{id}/articles\n\n\n\nInput\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narticles\n\n\narray of int\n\n\nList of articles to be assosciated with the collection. Existing articles will be replaced. No more then 10 article IDs\n\n\n\n\n\n\n\n\nTo represent the article entity, the \nlight\n presenter will be used.\n\n\nSuccess Response\n\n\nStatus: 205 Reset Content\nLocation: https://api.figshare.com/v2/account/collections/123/articles\n\n\n\n\nError Response (Article ID not found in collection)\n\n\nStatus: 422 Unprocessable Entity\n\n\n\n\n{\n    \nmessage\n: \nArticle not found\n,\n    \ncode\n: \nEntityNotFoundException\n,\n    \ndata\n: {}\n}\n\n\n\n\nDe-associate article from collection\n\n\nDELETE /v2/account/collections/{id}/articles/{article_id}\n\n\n\nSuccess Response\n\n\nStatus: 204 No content\n\n\n\n\nError Response (Article ID not found in collection)\n\n\nStatus: 404 Not found\n\n\n\n\n{\n    \nmessage\n: \nPrivate link not found in collection\n,\n    \ncode\n: \nEntityNotFoundException\n,\n    \ndata\n: {}\n}\n\n\n\n\nCollection private links subsection\n\n\nList private links\n\n\nGET /v2/account/collections/{id}/private_links\n\n\n\nSuccess Response\n\n\nStatus: 200 OK\n\n\n\n\n[\nPrivateLinkPresenter\n]\n\n\nCreate new private link for this collection\n\n\nPOST /v2/account/collections/{id}/private_links\n\n\n\nInput\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nread_only\n\n\nbool\n\n\nOptional, default \ntrue\n. Set to \nfalse\n to give private link users editing rights for this collection.\n\n\n\n\n\n\nexpires_date\n\n\ndate\n\n\nDate when this private link should expire - optional.  By default private links expire in 365 days.\n\n\n\n\n\n\n\n\nSuccess Response\n\n\nStatus: 201 Created\nLocation: https://api.figshare.com/v2/account/collections/123/private_links\n\n\n\n\nUpdate existing private link for this  collection\n\n\nPUT /v2/account/collections/{id}/private_links/{p_id}\n\n\n\nInput\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nexpires_date\n\n\ndate\n\n\nDate when this private link should expire - optional. By default private links expire in 365 days.\n\n\n\n\n\n\n\n\nSuccess Response\n\n\nStatus: 205 Reset Content\nLocation: https://api.figshare.com/v2/account/collections/123/private_links\n\n\n\n\nError Response (Private Link ID not found)\n\n\nStatus: 404 Not found\n\n\n\n\n{\n    \nmessage\n: \nPrivate link not found\n,\n    \ncode\n: \nEntityNotFoundException\n,\n    \ndata\n: {}\n}\n\n\n\n\nDisable/delete private link for collection\n\n\nDELETE /v2/account/collections/{id}/private_links/{private_link_id}\n\n\n\nSuccess Response\n\n\nStatus: 204 No content\n\n\n\n\nError Response (Private link ID not found)\n\n\nStatus: 404 Not found\n\n\n\n\n{\n    \nmessage\n: \nPrivate link not found\n,\n    \ncode\n: \nEntityNotFoundException\n,\n    \ndata\n: {}\n}", 
            "title": "Collections"
        }, 
        {
            "location": "/APIv2/collections/#collection-endpoints", 
            "text": "Public  list collections  search collections  read collection  list collection articles  list public collection versions   read public collection version    Private   list own collections  create new collection  read own collection  update collection  delete own private collection  reserve doi for collection  publish collection  collection authors  list authors  associate new authors  associate and replace authors  de-associate author    collection categories  list categories  associate new categories  associate and replace categories  de-associate category    collection articles  list articles  associate new articles  associate and replace articles  de-associate article    private links  list private links  create new private link  update existing private link  disable/delete private link", 
            "title": "Collection endpoints"
        }, 
        {
            "location": "/APIv2/collections/#public-endpoints", 
            "text": "The following  public  endpoints don't require\nauthentication/authorization.  ===========================  List public collections  Request  GET /v2/collections  Accepts  pagination ,  sorting ,  filtering  params. See  API feature list  for details.  Accepted filters:     field  type  notes      institution  int  only return collections from this institution    group  int  only return collections from this group    published_since  date (ISO 8601)  Only collections published after the date    modified_since  date (ISO 8601)  Only collections published after the date     Defaults:     field  value      order  published_date    order_direction  desc    page_size  10     Response   Status:  200 OK  Body: List of  CollectionPresenter   Errors  Standard  error responses .  =============================  Search public collections  Request  POST /v2/collections/search  Search public collections. Accepts  pagination ,  sorting ,  filtering \nand  search  params.  See  API feature list  for details.  Filters and defaults are the same as for  the list public collections  The response body will use the collection  light  presenter.  Response   status:  200 OK  body: List of  CollectionPresenter   Errors  Standard  error responses .  ==========================  Read public collection  Request  GET /v2/collections/{id}  Response  The collection  detailed  presenter will be used.   Status:  200 OK  Body:  detailed CollectionPresenter(L1)   Errors  Standard  error responses .  ===================================  List collection public articles  Request  GET /v2/collections/{id}/articles  Accepts  pagination  params. See  API feature list  for details.  Response   Status:  200 OK  Body: A list of  ArticlePresenters   Errors  Standard  error responses .  ===================================  List public collection versions  Request  GET /v2/collections/{id}/versions  Response   Status:  200 OK  Body: List of  CollectionVersionPresenter (light)   Errors  Standard  error responses .  ===================================  Read public collection version  GET /v2/collections/{id}/versions/{version_number}  Response   Status:  200 OK  Body:  CollectionPresenter (detailed)   Errors:  Standard  error responses .", 
            "title": "Public endpoints"
        }, 
        {
            "location": "/APIv2/collections/#private-endpoints", 
            "text": "These requests require authorization/authentication. Missing valid auth\nwill result in 403 and 401 errors.  The attribute  own  means resources owned(created or authored) by the\nauthenticated account.  ==========================  List  own  collections  GET /v2/account/collections  Almost identical to  list public collections , but default sorting is by  created_date , not  published_date .  ==========================  Create a new collection  POST /v2/account/collections  Request     Name  Type  Description      title  str  The title for this collection -  mandatory    description  str  The collection description. In a publisher case, usually this is the resource article description    doi  str  Digital Object Identifier    articles  array of int  List of articles to be associated with the collection (e.g  [1, 4] )    authors  array of dictionaries {'id':int} or {'name':str}  List of new authors to be assosciated with the collection. Each element identifies an author by  id  or  name :  [{\"id\":1212}, \"name\":\"John Doe\"}] )    categories  array of int  List of category ids to be associated with the collection (e.g  [5, 7, 9] )    tags  array of str  List of tags to be associated with the collection (e.g  [\"tag1\", \"tag2\"] )    references  array of str  List of references to be associated with the collection (e.g  [\"http://figshare.com\", \"http://figshare.com/articles/browse\"] )    resource_id  str  Not applicable to regular users. In a publisher case, this is the publisher article id    resource_doi  str  Not applicable to regular users. In a publisher case, this is the publisher article DOI    resource_link  str  Not applicable to regular users. In a publisher case, this is the publisher article link    resource_title  str  Not applicable to regular users. In a publisher case, this is the publisher article title    resource_version  int  Not applicable to regular users. In a publisher case, this is the publisher article version    custom_fields  dict  List of key, values pairs to be associated with the collection. Similar to custom article fields     Response   Status:  201 Created  Headers:\n     Location: https://api.figshare.com/v2/account/collections/123  Body:  CollectionPresenter (detailed)   Errors  Standard  error responses .  =======================  Read  own  collection  GET /v2/account/collections/{id}  Response   Status:  200 OK  Body:  CollectionPresenter (detailed)   Errors  Standard  error responses .", 
            "title": "Private endpoints"
        }, 
        {
            "location": "/APIv2/collections/#update-collection", 
            "text": "PUT /v2/account/collections/{id}  Input     Name  Type  Description      title  str  The title for this collection    description  str  The collection description. In a publisher case, usually this is the resource article description    doi  str  Digital Object Identifier    articles  array of int  List of articles to be associated with the collection (e.g  [1, 4] )    authors  array of dictionaries {'id':int} or {'name':str}  List of new authors to be assosciated with the collection. Each element identifies an author by  id  or  name :  [{\"id\":1212}, \"name\":\"John Doe\"}] )    categories  array of int  List of category ids to be associated with the collection (e.g  [5, 7, 9] )    tags  array of str  List of tags to be associated with the collection (e.g  [\"tag1\", \"tag2\"] )    references  array of str  List of references to be associated with the collection (e.g  [\"http://figshare.com\", \"http://figshare.com/articles/browse\"] )    resource_id  str  Not applicable to regular users. In a publisher case, this is the publisher article id    resource_doi  str  Not applicable to regular users. In a publisher case, this is the publisher article DOI    resource_link  str  Not applicable to regular users. In a publisher case, this is the publisher article link    resource_title  str  Not applicable to regular users. In a publisher case, this is the publisher article title    resource_version  int  Not applicable to regular users. In a publisher case, this is the publisher article version    custom_fields  dict  List of key, values pairs to be associated with the collection. Similar to custom article fields     Success Response  Status: 205 Reset Content\nLocation: https://api.figshare.com/v2/account/collections/123  Error Response (Id not found)  Status: 404 Not found  { message :  Collection not found }", 
            "title": "Update collection"
        }, 
        {
            "location": "/APIv2/collections/#delete-own-private-collection", 
            "text": "DELETE /v2/account/collections/{id}  Success Response  Status: 204 No content  Error Response (Id not found)  Status: 404 Not found  { message :  Collection not found }", 
            "title": "Delete own private collection"
        }, 
        {
            "location": "/APIv2/collections/#reserve-doi-for-collection", 
            "text": "POST /v2/account/collections/{id}/reserve_doi  Success Response  Status: 200 OK  { doi :  doi link }  Error Response (Id not found)  Status: 404 Not found  { message :  Collection not found }", 
            "title": "Reserve DOI for collection**"
        }, 
        {
            "location": "/APIv2/collections/#publish-collection", 
            "text": "POST /v2/account/collections/{id}/publish  Note : \nWhen a collection is published, a new public version will be generated. \nAny further updates to the collection will affect the private collection data. \nIn order to make these changes publicly visible, an explicit  publish  operation is needed.    Success Response  Status: 201 Created\nLocation: https://api.figshare.com/v2/collections/123  Error Response (Missing mandatory fields for publish (e.g authors))  Status: 428 Precondition failed  {\n     message :  Collection has no associated authors ,\n     code :  MissingMandatoryFieldException ,\n     data : {}\n}", 
            "title": "Publish collection"
        }, 
        {
            "location": "/APIv2/collections/#collection-authors-subsection", 
            "text": "List authors  GET /v2/account/collections/{id}/authors  To represent the authors, the author's  light  presenter will be used.  Success Response  Status: 200 OK  [ AuthorPresenter ]  Associate new authors with the collection  POST /v2/account/collections/{id}/authors  Input     Name  Type  Description      authors  array of dictionaries {'id':int} or {'name':str}  List of new authors to be assosciated with the collection. The list can contain author ids or names. Example  {\"authors\": [ {\"id\": 1}, {\"name\": \"Joe Doe\"} ] }  represents two authors: one identified by  id  and one by  name .     Success Response  Status: 201 Created\nLocation: https://api.figshare.com/v2/account/collections/123/authors  Error Response (Author(s) id not found)  Status: 422 Unprocessable Entity  {\n     message :  Author not found ,\n     code :  EntityNotFoundException ,\n     data : {}\n}  Associate and replace existing authors of this collection  PUT /v2/account/collections/{id}/authors  Input     Name  Type  Description      authors  array of dictionaries {'id':int} or {'name':str}  List of authors to be assosciated with the collection. The list can contain author ids or names. Example  {\"authors\": [ {\"id\": 1}, {\"name\": \"Joe Doe\"} ] }  represents two authors: one identified by  id  and one by  name .     To represent the author entity, the  light  presenter will be used.  Success Response  Status: 205 Reset Content\nLocation: https://api.figshare.com/v2/account/collections/123/authors  Error Response (Author(s) id not found)  Status: 422 Unprocessable Entity  {\n     message :  Author not found ,\n     code :  EntityNotFoundException ,\n     data : {}\n}  De-associate author from collection  DELETE /v2/account/collections/{id}/authors/{author_id}  Success Response  Status: 204 No content  Error Response (Author id not found)  Status: 422 Unprocessable Entity  {\n     message :  Author not found ,\n     code :  EntityNotFoundException ,\n     data : {}\n}", 
            "title": "Collection authors subsection"
        }, 
        {
            "location": "/APIv2/collections/#collection-categories-subsection", 
            "text": "List categories  GET /v2/account/collections/{id}/categories  Success Response  Status: 200 OK  [ CategoryPresenter ]  Associate new categories with the collection  POST /v2/account/collections/{id}/categories  Input     Name  Type  Description      categories  array of int  List of new categories to be assosciated with the collection     Success Response  Status: 201 Created\nLocation: https://api.figshare.com/v2/account/collections/123/categories  Error Response (Category ID not found)  Status: 422 Unprocessable Entity  {\n     message :  Category not found ,\n     code :  EntityNotFoundException ,\n     data : {}\n}  Associate and replace existing categories of this collection  PUT /v2/account/collections/{id}/categories  Input     Name  Type  Description      categories  array of int  List of categories to be assosciated with the collection. Existing categories will be replaced     Success Response  Status: 205 Reset Content\nLocation: https://api.figshare.com/v2/account/collections/123/categories  Error Response (Category ID not found)  Status: 422 Unprocessable Entity  {\n     message :  Category not found ,\n     code :  EntityNotFoundException ,\n     data : {}\n}  De-associate category from collection  DELETE /v2/account/collections/{id}/categories/{category_id}  Success Response  Status: 204 No Content  Error Response (Category id not found)  Status: 404 Not found  {\n     message :  Category not found ,\n     code :  EntityNotFoundException ,\n     data : {}\n}", 
            "title": "Collection categories subsection"
        }, 
        {
            "location": "/APIv2/collections/#collection-articles-subsection", 
            "text": "List articles  GET /v2/account/collections/{id}/articles  Success Response  Status: 200 OK  [ ArticlePresenter ]  Associate new articles with the collection  POST /v2/account/collections/{id}/articles  Input     Name  Type  Description      articles  array of int  List of new articles to be assosciated with the collection. No more then 10 article IDs per request     Success Response  Status: 201 Created\nLocation: https://api.figshare.com/v2/account/collections/123/articles  Error Response (Article ID not found)  Status: 422 Unprocessable Entity  {\n     message :  Article not found ,\n     code :  EntityNotFoundException ,\n     data : {}\n}  Associate and replace existing articles of this collection  PUT /v2/account/collections/{id}/articles  Input     Name  Type  Description      articles  array of int  List of articles to be assosciated with the collection. Existing articles will be replaced. No more then 10 article IDs     To represent the article entity, the  light  presenter will be used.  Success Response  Status: 205 Reset Content\nLocation: https://api.figshare.com/v2/account/collections/123/articles  Error Response (Article ID not found in collection)  Status: 422 Unprocessable Entity  {\n     message :  Article not found ,\n     code :  EntityNotFoundException ,\n     data : {}\n}  De-associate article from collection  DELETE /v2/account/collections/{id}/articles/{article_id}  Success Response  Status: 204 No content  Error Response (Article ID not found in collection)  Status: 404 Not found  {\n     message :  Private link not found in collection ,\n     code :  EntityNotFoundException ,\n     data : {}\n}", 
            "title": "Collection articles subsection"
        }, 
        {
            "location": "/APIv2/collections/#collection-private-links-subsection", 
            "text": "List private links  GET /v2/account/collections/{id}/private_links  Success Response  Status: 200 OK  [ PrivateLinkPresenter ]  Create new private link for this collection  POST /v2/account/collections/{id}/private_links  Input     Name  Type  Description      read_only  bool  Optional, default  true . Set to  false  to give private link users editing rights for this collection.    expires_date  date  Date when this private link should expire - optional.  By default private links expire in 365 days.     Success Response  Status: 201 Created\nLocation: https://api.figshare.com/v2/account/collections/123/private_links  Update existing private link for this  collection  PUT /v2/account/collections/{id}/private_links/{p_id}  Input     Name  Type  Description      expires_date  date  Date when this private link should expire - optional. By default private links expire in 365 days.     Success Response  Status: 205 Reset Content\nLocation: https://api.figshare.com/v2/account/collections/123/private_links  Error Response (Private Link ID not found)  Status: 404 Not found  {\n     message :  Private link not found ,\n     code :  EntityNotFoundException ,\n     data : {}\n}  Disable/delete private link for collection  DELETE /v2/account/collections/{id}/private_links/{private_link_id}  Success Response  Status: 204 No content  Error Response (Private link ID not found)  Status: 404 Not found  {\n     message :  Private link not found ,\n     code :  EntityNotFoundException ,\n     data : {}\n}", 
            "title": "Collection private links subsection"
        }, 
        {
            "location": "/APIv2/file_uploader/", 
            "text": "Figshare Upload Service\n\n\nUploads API\n\n\nUpload status\n\n\nAn upload status ca be:\n\n\n\n\nPENDING\n - waiting for it's parts to be uploaded\n\n\nCOMPLETED\n - all parts were uploaded and the file was assembled on the storage\n\n\nABORTED\n - canceled for some reason(user request, timeout, error)\n\n\n\n\nEndpoints\n\n\n\n\nGET /upload/\ntoken\n - get upload info\n\n\n\n\nResponse:\n\n\n\n\n\n\n\n\nStatus Code\n\n\nExplanation\n\n\nBody\n\n\n\n\n\n\n\n\n\n\n200 OK\n\n\nall good\n\n\nexplained below\n\n\n\n\n\n\n500 Internal Server Error\n\n\ninternal error\n\n\nempty\n\n\n\n\n\n\n404 Not Found\n\n\nunknown upload token\n\n\nempty\n\n\n\n\n\n\n\n\n200 OK\n\n\nBody:\n  \njs\n  {\n    token: \"upload-token\",\n    name: \"my-file.zip\",\n    size: 10249281,\n    md5: \"filemd5\",  // as provided on upload creation\n    status: \"PENDING\",\n    parts: [\n      {\n      // upload parts -- see parts API for representation\n      }\n    ]\n}\n\n\nParts API\n\n\nPart status\n\n\n\n\nPENDING\n -- part is ready to be uploaded\n\n\nCOMPLETE\n -- part data has been complete and saved to storage\n\n\n\n\nPart locking\n\n\nWhen a part is being uploaded it is being locked, by setting the\n\nlocked\n flag to true. No changes/uploads can happen on this part from\nother requests.\n\n\nByte ranges\n\n\nThe part range is specified by \nstartOffset\n and \nendOffset\n. They\nindexes zero-based and inclusive. Example:\n\n\nGiven:\n\n\n\n\nthe following file data: \"abcdefghij\"\n\n\npart1\n with \nstartOffset=0\n and \nendOffset=3\n\n\npart2\n with \nstartOffset=4\n and \nendOffset=7\n\n\n\n\nThen:\n\n\n\n\npart1\n is \nabcd\n\n\npart2\n is \nefgh\n\n\n\n\nEndpoints\n\n\n\n\nGET /upload/\ntoken\n/\npart_no\n - get part info\n\n\n\n\nResponses:\n\n\n\n\n\n\n\n\nStatus Code\n\n\nExplanation\n\n\nBody\n\n\n\n\n\n\n\n\n\n\n200 OK\n\n\nall good\n\n\nexplained below\n\n\n\n\n\n\n500 Internal Server Error\n\n\ninternal error\n\n\nempty\n\n\n\n\n\n\n404 Not Found\n\n\nunknown upload token or part number\n\n\nempty\n\n\n\n\n\n\n\n\n202 Accepted\n\n\nBody:\n  \njs\n  {\n    partNo: 3,\n    uploadToken: \"UPLOAD_TOKEN\",\n    startOffset: 1024,\n    endOffset: 2047,\n    status: \"PENDING\",\n    locked: false,\n    completedAt: null,\n    uploadUrl: \"http://upload.figshare.com/upload/\ntoken\n/3\",\n    infoUrl: \"http://upload.figshare.com/upload/\ntoken\n/3\"\n  }\n\n\n\n\nPUT /upload/\ntoken\n/\npart_no\n - receives part data\n\n\n\n\nThe entire body of the request is piped as-is to S3. It is assumed that the\n  body is the correct pice of the file, from \nstartOffset\n to \nendOffset\n\n\nWhile this requests is being processed the part is going to be in a\n  locked state. The request can end with a \n409\n status code if a\n  lock for the part could not be obtained.\n\n\nWarning\n if content length is less than part size the request will\n  timeout\n\n\nResponses:\n\n\n\n\n\n\n\n\nStatus Code\n\n\nExplanation\n\n\nBody\n\n\n\n\n\n\n\n\n\n\n200 OK\n\n\nall good\n\n\nexplained below\n\n\n\n\n\n\n500 Internal Server Error\n\n\ninternal error\n\n\nempty\n\n\n\n\n\n\n404 Not Found\n\n\nunknown upload token or part number\n\n\nempty\n\n\n\n\n\n\n409 Conflict\n\n\npart data cannot be uploaded\n\n\nempty\n\n\n\n\n\n\n\n\n202 Accepted\n\n\nBody:\n  \njs\n  {\n    md5: \"received part md5\"\n  }\n\n\n\n\nDELETE /upload/\ntoken\n/\npart_no\n - reset part data\n\n\n\n\nThis will reset the part to it's \nPENDING\n state and remove any\n  storage meta.\n\n\nResponses:\n\n\n\n\n\n\n\n\nStatus Code\n\n\nExplanation\n\n\nBody\n\n\n\n\n\n\n\n\n\n\n205 Reset Content\n\n\nall good\n\n\nempty\n\n\n\n\n\n\n500 Internal Server Error\n\n\ninternal error\n\n\nempty\n\n\n\n\n\n\n404 Not Found\n\n\nunknown upload token or part number\n\n\nempty\n\n\n\n\n\n\n409 Conflict\n\n\nupload completed or part locked\n\n\nempty", 
            "title": "File uploader"
        }, 
        {
            "location": "/APIv2/file_uploader/#figshare-upload-service", 
            "text": "Uploads API  Upload status  An upload status ca be:   PENDING  - waiting for it's parts to be uploaded  COMPLETED  - all parts were uploaded and the file was assembled on the storage  ABORTED  - canceled for some reason(user request, timeout, error)   Endpoints   GET /upload/ token  - get upload info   Response:     Status Code  Explanation  Body      200 OK  all good  explained below    500 Internal Server Error  internal error  empty    404 Not Found  unknown upload token  empty     200 OK  Body:\n   js\n  {\n    token: \"upload-token\",\n    name: \"my-file.zip\",\n    size: 10249281,\n    md5: \"filemd5\",  // as provided on upload creation\n    status: \"PENDING\",\n    parts: [\n      {\n      // upload parts -- see parts API for representation\n      }\n    ]\n}  Parts API  Part status   PENDING  -- part is ready to be uploaded  COMPLETE  -- part data has been complete and saved to storage   Part locking  When a part is being uploaded it is being locked, by setting the locked  flag to true. No changes/uploads can happen on this part from\nother requests.  Byte ranges  The part range is specified by  startOffset  and  endOffset . They\nindexes zero-based and inclusive. Example:  Given:   the following file data: \"abcdefghij\"  part1  with  startOffset=0  and  endOffset=3  part2  with  startOffset=4  and  endOffset=7   Then:   part1  is  abcd  part2  is  efgh   Endpoints   GET /upload/ token / part_no  - get part info   Responses:     Status Code  Explanation  Body      200 OK  all good  explained below    500 Internal Server Error  internal error  empty    404 Not Found  unknown upload token or part number  empty     202 Accepted  Body:\n   js\n  {\n    partNo: 3,\n    uploadToken: \"UPLOAD_TOKEN\",\n    startOffset: 1024,\n    endOffset: 2047,\n    status: \"PENDING\",\n    locked: false,\n    completedAt: null,\n    uploadUrl: \"http://upload.figshare.com/upload/ token /3\",\n    infoUrl: \"http://upload.figshare.com/upload/ token /3\"\n  }   PUT /upload/ token / part_no  - receives part data   The entire body of the request is piped as-is to S3. It is assumed that the\n  body is the correct pice of the file, from  startOffset  to  endOffset  While this requests is being processed the part is going to be in a\n  locked state. The request can end with a  409  status code if a\n  lock for the part could not be obtained.  Warning  if content length is less than part size the request will\n  timeout  Responses:     Status Code  Explanation  Body      200 OK  all good  explained below    500 Internal Server Error  internal error  empty    404 Not Found  unknown upload token or part number  empty    409 Conflict  part data cannot be uploaded  empty     202 Accepted  Body:\n   js\n  {\n    md5: \"received part md5\"\n  }   DELETE /upload/ token / part_no  - reset part data   This will reset the part to it's  PENDING  state and remove any\n  storage meta.  Responses:     Status Code  Explanation  Body      205 Reset Content  all good  empty    500 Internal Server Error  internal error  empty    404 Not Found  unknown upload token or part number  empty    409 Conflict  upload completed or part locked  empty", 
            "title": "Figshare Upload Service"
        }, 
        {
            "location": "/APIv2/hr_feed/", 
            "text": "HR Feed Endpoints\n\n\n\n\nPrivate\n\n\nupload hrfeed file\n\n\n\n\nHRFeed Private Endpoints\n\n\nUpload HRFeed File\n\n\nRequest\n\n\nPOST /v2/institution/hrfeed/upload\n\n\n\nThe request needs to be a \nmultipart/form-data\n request where the \nContent-Type\n header is set to the said value and the body of the file is sent as the form data.\nA typical request looks like this:\n\n\nPOST /v2/institution/hrfeed/upload HTTP/1.1\nHost: api.figshare.com\nContent-Length: 975\nAccept-Encoding: gzip, deflate\nAccept: */*\nUser-Agent: python-requests/2.5.3 CPython/2.7.10 Linux/4.1.4-1-ARCH\nConnection: keep-alive\nContent-Type: multipart/form-data; boundary=529448d158064de596afd8f892c84e15\nAuthorization: token 86bbaa5d6d51fc0ae2f2defd3a474dac77ae27179ff6d04dd37e74c531bd6ed059eda584b41356337c362a259e482eb36a34825c805344e0600bb875a77444df\n\n--529448d158064de596afd8f892c84e15\nContent-Disposition: form-data; name=\nhrfeed\n; filename=\nfeed.xml\n\n\n\n?xml version=\n1.0\n?\n\n\nHRFeed\n\n    \nRecord\n\n        \nUniqueID\n1234567\n/UniqueID\n\n        \nFirstName\nJane\n/FirstName\n\n        \nLastName\nDoe\n/LastName\n\n        \nTitle\nMrs\n/Title\n\n        \nInitials\nJD\n/Initials\n\n        \nSuffix\n/Suffix\n\n        \nEmail\nj.doe@sillymail.io\n/Email\n\n        \nIsActive\nY\n/IsActive\n\n        \nUserQuota\n1048576000\n/UserQuota\n\n        \nUserAssociationCriteria\nIT\n/UserAssociationCriteria\n\n    \n/Record\n\n    \nRecord\n\n        \nUniqueID\n1234568\n/UniqueID\n\n        \nFirstName\nJohn\n/FirstName\n\n        \nLastName\nSmith\n/LastName\n\n        \nTitle\nMr\n/Title\n\n        \nInitials\n/Initials\n\n        \nSuffix\n/Suffix\n\n        \nEmail\njs@seriousness.com\n/Email\n\n        \nIsActive\nY\n/IsActive\n\n        \nUserQuota\n10485760000\n/UserQuota\n\n        \nUserAssociationCriteria\n/UserAssociationCriteria\n\n    \n/Record\n\n\n/HRFeed\n\n\n--529448d158064de596afd8f892c84e15--\n\n\n\n\n\nFor an example the following python code uses request to obtain the upper request:\n\n\n#!/usr/bin/env python\n\nimport requests\n\n\nFILE_NAME = 'feed.xml'\nAPI_URL = 'https://api.figshare.com/v2/institution/hrfeed/upload'\nTOKEN = '86bbaa5d6d51fc0ae2f2defd3a474dac77ae27179ff6d04dd37e74c531bd6ed059eda584b41356337c362a259e482eb36a34825c805344e0600bb875a77444df'\n\n\ndef main():\n    headers = {\nAuthorization\n: \ntoken \n + TOKEN}\n    with open(FILE_NAME, 'rb') as fin:\n        files = {'hrfeed': (FILE_NAME, fin)}\n        resp = requests.post(API_URL, files=files, headers=headers)\n\n        print(resp.content)\n\n        resp.raise_for_status()\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\nResponse\n\n\n\n\nStatus: \n200 OK\n\n\n\n\nBody:\n\n\njson\n{\n    \"message\": \"OK\"\n}\n\n\n\n\n\n\nErrors\n\n\nStandard \nerror responses\n\nMost common:\n\n\n{\n    \nmessage\n: \nPrevious feed import not complete.\n,\n    \ndata\n: null,\n    \nerrcode\n: \nFigshareAPIException\n\n}\n\n\n\n\nwhen the feed has already been submitted within a 24 hour span.", 
            "title": "Hr feed"
        }, 
        {
            "location": "/APIv2/hr_feed/#hr-feed-endpoints", 
            "text": "Private  upload hrfeed file", 
            "title": "HR Feed Endpoints"
        }, 
        {
            "location": "/APIv2/hr_feed/#hrfeed-private-endpoints", 
            "text": "Upload HRFeed File  Request  POST /v2/institution/hrfeed/upload  The request needs to be a  multipart/form-data  request where the  Content-Type  header is set to the said value and the body of the file is sent as the form data.\nA typical request looks like this:  POST /v2/institution/hrfeed/upload HTTP/1.1\nHost: api.figshare.com\nContent-Length: 975\nAccept-Encoding: gzip, deflate\nAccept: */*\nUser-Agent: python-requests/2.5.3 CPython/2.7.10 Linux/4.1.4-1-ARCH\nConnection: keep-alive\nContent-Type: multipart/form-data; boundary=529448d158064de596afd8f892c84e15\nAuthorization: token 86bbaa5d6d51fc0ae2f2defd3a474dac77ae27179ff6d04dd37e74c531bd6ed059eda584b41356337c362a259e482eb36a34825c805344e0600bb875a77444df\n\n--529448d158064de596afd8f892c84e15\nContent-Disposition: form-data; name= hrfeed ; filename= feed.xml  ?xml version= 1.0 ?  HRFeed \n     Record \n         UniqueID 1234567 /UniqueID \n         FirstName Jane /FirstName \n         LastName Doe /LastName \n         Title Mrs /Title \n         Initials JD /Initials \n         Suffix /Suffix \n         Email j.doe@sillymail.io /Email \n         IsActive Y /IsActive \n         UserQuota 1048576000 /UserQuota \n         UserAssociationCriteria IT /UserAssociationCriteria \n     /Record \n     Record \n         UniqueID 1234568 /UniqueID \n         FirstName John /FirstName \n         LastName Smith /LastName \n         Title Mr /Title \n         Initials /Initials \n         Suffix /Suffix \n         Email js@seriousness.com /Email \n         IsActive Y /IsActive \n         UserQuota 10485760000 /UserQuota \n         UserAssociationCriteria /UserAssociationCriteria \n     /Record  /HRFeed \n\n--529448d158064de596afd8f892c84e15--  For an example the following python code uses request to obtain the upper request:  #!/usr/bin/env python\n\nimport requests\n\n\nFILE_NAME = 'feed.xml'\nAPI_URL = 'https://api.figshare.com/v2/institution/hrfeed/upload'\nTOKEN = '86bbaa5d6d51fc0ae2f2defd3a474dac77ae27179ff6d04dd37e74c531bd6ed059eda584b41356337c362a259e482eb36a34825c805344e0600bb875a77444df'\n\n\ndef main():\n    headers = { Authorization :  token   + TOKEN}\n    with open(FILE_NAME, 'rb') as fin:\n        files = {'hrfeed': (FILE_NAME, fin)}\n        resp = requests.post(API_URL, files=files, headers=headers)\n\n        print(resp.content)\n\n        resp.raise_for_status()\n\nif __name__ == '__main__':\n    main()  Response   Status:  200 OK   Body:  json\n{\n    \"message\": \"OK\"\n}    Errors  Standard  error responses \nMost common:  {\n     message :  Previous feed import not complete. ,\n     data : null,\n     errcode :  FigshareAPIException \n}  when the feed has already been submitted within a 24 hour span.", 
            "title": "HRFeed Private Endpoints"
        }, 
        {
            "location": "/APIv2/", 
            "text": "API feature list\n\n\nThe figshare api v2 is accessible at https://api.figshare.com/v2. All\ncommunication is done through \nhttps\n and all data is encoded as \nJSON\n.\n\n\n\n\nSending parameters\n\n\nResource representations\n\n\nAuthentication\n\n\nErrors\n\n\nSearching, filtering and pagination\n\n\nRate limiting\n\n\nConditional requests\n\n\nCORS policy\n\n\nEndpoints\n\n\ncollections\n\n\nitems\n\n\n\n\nSending parameters\n\n\nUsually, endpoints that are accessed via \nGET\n method read their parameters \nfrom the query string.\n\nEndpoints that are available via \nPOST\n and \nPUT\n methods read their data\nfrom the JSON request body.\n\nIn order to issue a \nDELETE\n request on a resource, its \nid\n is part of the URL.\n\n\nExamples\n\n\n\n\nSending \npage\n parameter when listing articles:\n\n\n\n\n    GET https://api.figshare.com/v1/articles?page=3\n\n\n\n\n\n\nSending \nsearch_for\n parameter when searching for articles:\n\n\n\n\n    POST https://api.figshare.com/v2/articles/search\n    {\n        \nsearch_for\n: \nfigshare\n\n    }\n\n\n\n\n\n\nDeleting collection with id \n12345678\n:\n\n\n\n\n    DELETE https://api.figshare.com/v2/account/collections/12345678\n    Authorization: token my_oauth2_access_token\n\n\n\n\nResource representations\n\n\nResources can be presented differently across endpoints. Usually\nendpoints that return a list of resources will send a \nlighter\n\nrepresentation of each resource while an endpoint for an individual\nresource will use a more \ndetailed\n and \ncomplete\n representation.\n\n\nRepresentations for each resource type are documented \nhere\n and the\ndocumentation for each endpoint will specify what kind of representation\nit's using.\n\n\nBlank resource fields are included in the representation as \nnull\n instead\nof being omitted.\n\n\nAuthentication\n\n\nCurrently API v2 only supports OAuth2 Token authentication. This can be\nsent as:\n\n\nheader (\nrecommended\n)\n\n\ncurl -H \nAuthorization: token ACCESS_TOKEN\n https://api.figshare.com/v2\n\n\n\n\nquery string param:\n\n\ncurl https://api.figshare.com/v2?access_token=ACCESS_TOKEN\n\n\n\n\nErrors\n\n\nEndpoints can respond with error responses. The common error responses\nfor all endpoints are presented below and errors specific to individual\nenpoints are documented along with the endpoint.\n\n\nEach error response will have a specific HTTP status code and a JSON\nbody with the following fields:\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nA human friendly message explaining the error.\n\n\n\n\n\n\ncode\n\n\nA machine friendly error code, used by the dev team to identify the error.\n\n\n\n\n\n\ndata\n\n\nAn object containing extra information about the error. Documented for each error.\n\n\n\n\n\n\n\n\n404 Not found\n\n\nTrying to access resources that do not exist, will trigger this response\nfrom the API.\n\n\nThis is also returned if you try to access a resource on which you don't\nhave a \nread\n permission.\n\n\n400 Bad request\n\n\nSending a body that cannot be parsed as JSON will result in  this error\nresponse.\n\n\n422 Unprocessable Entity\n\n\nSending an invalid data structure in the body will trigger this error.\nInvalid data can be any of the following:\n\n\n\n\nmissing field\n\n\ninvalid value for a field\n\n\nany other rules specific to an endpoint\n\n\n\n\n401 Unauthorized\n\n\nThis error is returned when the authorization was unsuccessfull. This can\nbe either due to:\n\n\n\n\nmissing authorization info in the request\n\n\ninvalid or unknown authorization info\n\n\nexpired or disabled account\n\n\n\n\n403 Forbidden\n\n\nThis response is presented whenever you try to do something which is not\npermitted for your current authorization.\nauthorization info\n\n\nSearching, filtering and pagination\n\n\nEndpoints that list items usually support any of the following features:\n\n\n\n\npagination\n\n\nordering\n\n\nsearching\n\n\nfiltering\n\n\n\n\nPagination params\n\n\nPagination can be done by specifing either \npage\n and \npage_size\n params\npair or the \nlimit\n and \noffset\n params pair. If confusing combinations\nappear in a request, a \n422 Unprocessable Entity\n will be returned.\n\n\n\n\n\n\n\n\nfield\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\npage\n\n\nint\n\n\n1\n\n\nPage number\n\n\n\n\n\n\npage_size\n\n\nint\n\n\n10\n\n\nThe number of results included on a page\n\n\n\n\n\n\nlimit\n\n\nint\n\n\n10\n\n\nNumber of results included on a page\n\n\n\n\n\n\noffset\n\n\nint\n\n\n0\n\n\nWhere to start the listing(the offset of the first result)\n\n\n\n\n\n\n\n\nPlease note that there's a limit on the maximum offset or page you can require.\nThe offset is currently limited at 1000 and if exceeded a \n422 Unprocessable\nEntity\n error will be returned. For pages, it depends on the \npage_size\n\nbut for a \npage_size\n of \n10\n, the maximum page would be \n1000 / 10 = 100\n\n\nOrdering params\n\n\nOrdering is done via the \norder\n and \norder_direction\n params.\n\n\n\n\n\n\n\n\nfield\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\norder\n\n\nstring\n\n\nvaries\n\n\nThe field by which to order. Default varies by endpoint/resource. For articles and collections, valid values are: \npublished_date\n and \nmodified_date\n.\n\n\n\n\n\n\norder_direction\n\n\nstring\n\n\nvaries\n\n\nOnly \nasc\n and \ndesc\n values are supported. Default varies by endpoint/resource\n\n\n\n\n\n\n\n\nSearching params\n\n\n\n\n\n\n\n\nfield\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsearch_for\n\n\nstring\n\n\nSearch endpoints require this field.  Usually min length is 3\n\n\n\n\n\n\n\n\nFiltering params\n\n\nSome endpoints allow filtering results. Filters are extra fields in the\nbody and the documentation for each endpoint will present them in detail.\n\n\nRate limiting\n\n\nNot implemented at this point.\n\n\nConditional requests\n\n\nMost responses should return an ETag header and a Last-Modified header.\nYou can use the values of these headers to create conditional requests.\nWe encourage  to use these whenever possible.\n\n\nCORS policy\n\n\nThe API supports CORS for AJAX requests from any origin.", 
            "title": "Home"
        }, 
        {
            "location": "/APIv2/#api-feature-list", 
            "text": "The figshare api v2 is accessible at https://api.figshare.com/v2. All\ncommunication is done through  https  and all data is encoded as  JSON .   Sending parameters  Resource representations  Authentication  Errors  Searching, filtering and pagination  Rate limiting  Conditional requests  CORS policy  Endpoints  collections  items", 
            "title": "API feature list"
        }, 
        {
            "location": "/APIv2/#sending-parameters", 
            "text": "Usually, endpoints that are accessed via  GET  method read their parameters \nfrom the query string. \nEndpoints that are available via  POST  and  PUT  methods read their data\nfrom the JSON request body. \nIn order to issue a  DELETE  request on a resource, its  id  is part of the URL.  Examples   Sending  page  parameter when listing articles:       GET https://api.figshare.com/v1/articles?page=3   Sending  search_for  parameter when searching for articles:       POST https://api.figshare.com/v2/articles/search\n    {\n         search_for :  figshare \n    }   Deleting collection with id  12345678 :       DELETE https://api.figshare.com/v2/account/collections/12345678\n    Authorization: token my_oauth2_access_token", 
            "title": "Sending parameters"
        }, 
        {
            "location": "/APIv2/#resource-representations", 
            "text": "Resources can be presented differently across endpoints. Usually\nendpoints that return a list of resources will send a  lighter \nrepresentation of each resource while an endpoint for an individual\nresource will use a more  detailed  and  complete  representation.  Representations for each resource type are documented  here  and the\ndocumentation for each endpoint will specify what kind of representation\nit's using.  Blank resource fields are included in the representation as  null  instead\nof being omitted.", 
            "title": "Resource representations"
        }, 
        {
            "location": "/APIv2/#authentication", 
            "text": "Currently API v2 only supports OAuth2 Token authentication. This can be\nsent as:  header ( recommended )  curl -H  Authorization: token ACCESS_TOKEN  https://api.figshare.com/v2  query string param:  curl https://api.figshare.com/v2?access_token=ACCESS_TOKEN", 
            "title": "Authentication"
        }, 
        {
            "location": "/APIv2/#errors", 
            "text": "Endpoints can respond with error responses. The common error responses\nfor all endpoints are presented below and errors specific to individual\nenpoints are documented along with the endpoint.  Each error response will have a specific HTTP status code and a JSON\nbody with the following fields:     Field  Description      message  A human friendly message explaining the error.    code  A machine friendly error code, used by the dev team to identify the error.    data  An object containing extra information about the error. Documented for each error.     404 Not found  Trying to access resources that do not exist, will trigger this response\nfrom the API.  This is also returned if you try to access a resource on which you don't\nhave a  read  permission.  400 Bad request  Sending a body that cannot be parsed as JSON will result in  this error\nresponse.  422 Unprocessable Entity  Sending an invalid data structure in the body will trigger this error.\nInvalid data can be any of the following:   missing field  invalid value for a field  any other rules specific to an endpoint   401 Unauthorized  This error is returned when the authorization was unsuccessfull. This can\nbe either due to:   missing authorization info in the request  invalid or unknown authorization info  expired or disabled account   403 Forbidden  This response is presented whenever you try to do something which is not\npermitted for your current authorization.\nauthorization info", 
            "title": "Errors"
        }, 
        {
            "location": "/APIv2/#searching-filtering-and-pagination", 
            "text": "Endpoints that list items usually support any of the following features:   pagination  ordering  searching  filtering   Pagination params  Pagination can be done by specifing either  page  and  page_size  params\npair or the  limit  and  offset  params pair. If confusing combinations\nappear in a request, a  422 Unprocessable Entity  will be returned.     field  type  default  description      page  int  1  Page number    page_size  int  10  The number of results included on a page    limit  int  10  Number of results included on a page    offset  int  0  Where to start the listing(the offset of the first result)     Please note that there's a limit on the maximum offset or page you can require.\nThe offset is currently limited at 1000 and if exceeded a  422 Unprocessable\nEntity  error will be returned. For pages, it depends on the  page_size \nbut for a  page_size  of  10 , the maximum page would be  1000 / 10 = 100  Ordering params  Ordering is done via the  order  and  order_direction  params.     field  type  default  description      order  string  varies  The field by which to order. Default varies by endpoint/resource. For articles and collections, valid values are:  published_date  and  modified_date .    order_direction  string  varies  Only  asc  and  desc  values are supported. Default varies by endpoint/resource     Searching params     field  type  description      search_for  string  Search endpoints require this field.  Usually min length is 3     Filtering params  Some endpoints allow filtering results. Filters are extra fields in the\nbody and the documentation for each endpoint will present them in detail.", 
            "title": "Searching, filtering and pagination"
        }, 
        {
            "location": "/APIv2/#rate-limiting", 
            "text": "Not implemented at this point.", 
            "title": "Rate limiting"
        }, 
        {
            "location": "/APIv2/#conditional-requests", 
            "text": "Most responses should return an ETag header and a Last-Modified header.\nYou can use the values of these headers to create conditional requests.\nWe encourage  to use these whenever possible.", 
            "title": "Conditional requests"
        }, 
        {
            "location": "/APIv2/#cors-policy", 
            "text": "The API supports CORS for AJAX requests from any origin.", 
            "title": "CORS policy"
        }, 
        {
            "location": "/APIv2/licenses/", 
            "text": "List licenses\n\n\nGET /v2/licenses\n\n\n\nPublic endpoint, does not need OAuth.\n\n\nSuccess Response\n\n\nStatus: 200 OK\n\n\n\n\nBody: A list of \nLicense Presenters\n\n\nList institution licenses\n\n\n  GET /v2/account/licenses\n\n\n\nThis is a private endpoint that requires OAuth. \n\nIt will return a list with figshare public licenses \nAND\n licenses defined for account's institution.\n\n\nSuccess Response\n\n\nStatus: 200 OK\n\n\n\n\nA list of \nLicense Presenters", 
            "title": "Licenses"
        }, 
        {
            "location": "/APIv2/licenses/#list-licenses", 
            "text": "GET /v2/licenses  Public endpoint, does not need OAuth.  Success Response  Status: 200 OK  Body: A list of  License Presenters", 
            "title": "List licenses"
        }, 
        {
            "location": "/APIv2/licenses/#list-institution-licenses", 
            "text": "GET /v2/account/licenses  This is a private endpoint that requires OAuth.  \nIt will return a list with figshare public licenses  AND  licenses defined for account's institution.  Success Response  Status: 200 OK  A list of  License Presenters", 
            "title": "List institution licenses"
        }, 
        {
            "location": "/APIv2/upload_example/", 
            "text": "Example Upload on fig\nshare\n\n\nTo upload a file to the fig\nshare\n, one needs to use the standard \nfig\nshare\n API\n, coupled\nwith the \nfig\nshare\n upload system API\n.\n\n\nTL;DR.\n\n\nA slimmed down version of the script in the next section, which only takes into account\nthe essentials looks like this:\n\n\n#!/usr/bin/env python\n\nimport json\nimport os\n\nimport requests\n\n\nBASE_URL = 'https://api.figshare.com/v2/{endpoint}'\nTOKEN = '\ninsert access token here\n'\nFILE_NAME = '/home/adrian/tmp/cat.obj'\n\n\ndef main():\n    # Setup\n    basename = os.path.basename(FILE_NAME)\n    headers = {'Authorization': 'token ' + TOKEN}\n\n    # Create Article\n    data = {'title': basename}\n    resp = requests.post(BASE_URL.format(endpoint='account/articles'), headers=headers,\n                         data=json.dumps(data))\n    article_id = json.loads(resp.content)['location'].rsplit('/', 1)[1]\n\n    # Initiate Upload\n    endpoint = 'account/articles/{}/files'\n    endpoint = endpoint.format(article_id)\n    with open(FILE_NAME, 'rb') as fin:\n        fin.seek(0, 2)  # Go to end of file\n        size = fin.tell()\n    data = {'name': basename,\n            'size': size}\n    resp = requests.post(BASE_URL.format(endpoint=endpoint), headers=headers,\n                         data=json.dumps(data))\n    file_id = json.loads(resp.content)['location'].rsplit('/', 1)[1]\n\n    # Get upload/parts Info\n    endpoint = 'account/articles/{}/files/{}'\n    endpoint = endpoint.format(article_id, file_id)\n    resp = requests.get(BASE_URL.format(endpoint=endpoint), headers=headers)\n\n    url = '{upload_url}/{upload_token}'.format(**json.loads(resp.content))\n    parts = json.loads(requests.get(url).content)['parts']\n    # Uploading Parts\n    with open(FILE_NAME, 'rb') as fin:\n        for part in parts:\n            size = part['endOffset'] - part['startOffset'] + 1\n            requests.put(url, data=fin.read(size))\n\n    requests.post(BASE_URL.format(endpoint=endpoint), headers=headers)\n\nif __name__ == '__main__':\n    main()\n\n\n\n\nExample Script\n\n\nA full script that lists articles \nbefore\n and \nafter\n the new \narticle\n and \nfile\n are created\nwould look like this:\n\n\n#!/usr/bin/env python\n\nimport hashlib\nimport json\nimport os\n\nimport requests\nfrom requests.exceptions import HTTPError\n\n\nBASE_URL = 'https://api.figshare.com/v2/{endpoint}'\nTOKEN = '\ninsert access token here\n'\nCHUNK_SIZE = 1048576\n\nFILE_NAME = '/path/to/work/directory/cat.obj'\nTITLE = 'A 3D cat object model'\n\n\ndef raw_issue_request(method, url, data=None):\n    headers = {'Authorization': 'token ' + TOKEN}\n    if data is not None:\n        data = json.dumps(data)\n    response = requests.request(method, url, headers=headers, data=data)\n    try:\n        response.raise_for_status()\n        try:\n            data = json.loads(response.content)\n        except ValueError:\n            data = response.content\n    except HTTPError as error:\n        print 'Caught an HTTPError: {}'.format(error.message)\n        print 'Body:\\n', response.content\n        raise\n\n    return data\n\n\ndef issue_request(method, endpoint, *args, **kwargs):\n    return raw_issue_request(method, BASE_URL.format(endpoint=endpoint), *args, **kwargs)\n\n\ndef list_articles():\n    result = issue_request('GET', 'account/articles')\n    print 'Listing current articles:'\n    if result:\n        for item in result:\n            print u'  {url} - {title}'.format(**item)\n    else:\n        print '  No articles.'\n    print\n\n\ndef create_article(title):\n    data = {\n        'title': title  # You may add any other information about the article here as you wish.\n    }\n    result = issue_request('POST', 'account/articles', data=data)\n    print 'Created article:', result['location'], '\\n'\n\n    result = raw_issue_request('GET', result['location'])\n\n    return result['id']\n\n\ndef list_files_of_article(article_id):\n    result = issue_request('GET', 'account/articles/{}/files'.format(article_id))\n    print 'Listing files for article {}:'.format(article_id)\n    if result:\n        for item in result:\n            print '  {id} - {name}'.format(**item)\n    else:\n        print '  No files.'\n\n    print\n\n\ndef get_file_check_data(file_name):\n    with open(file_name, 'rb') as fin:\n        md5 = hashlib.md5()\n        size = 0\n        data = fin.read(CHUNK_SIZE)\n        while data:\n            size += len(data)\n            md5.update(data)\n            data = fin.read(CHUNK_SIZE)\n        return md5.hexdigest(), size\n\n\ndef initiate_new_upload(article_id, file_name):\n    endpoint = 'account/articles/{}/files'\n    endpoint = endpoint.format(article_id)\n\n    md5, size = get_file_check_data(file_name)\n    data = {'name': os.path.basename(file_name),\n            'md5': md5,\n            'size': size}\n\n    result = issue_request('POST', endpoint, data=data)\n    print 'Initiated file upload:', result['location'], '\\n'\n\n    result = raw_issue_request('GET', result['location'])\n\n    return result\n\n\ndef complete_upload(article_id, file_id):\n    issue_request('POST', 'account/articles/{}/files/{}'.format(article_id, file_id))\n\n\ndef upload_parts(file_info):\n    url = '{upload_url}/{upload_token}'.format(**file_info)\n    result = raw_issue_request('GET', url)\n\n    print 'Uploading parts:'\n    with open(FILE_NAME, 'rb') as fin:\n        for part in result['parts']:\n            upload_part(file_info, fin, part)\n    print\n\n\ndef upload_part(file_info, stream, part):\n    udata = file_info.copy()\n    udata.update(part)\n    url = '{upload_url}/{upload_token}/{partNo}'.format(**udata)\n\n    stream.seek(part['startOffset'])\n    data = stream.read(part['endOffset'] - part['startOffset'] + 1)\n\n    raw_issue_request('PUT', url, data=data)\n    print '  Uploaded part {partNo} from {startOffset} to {endOffset}'.format(**part)\n\n\ndef main():\n    # We first create the article\n    list_articles()\n    article_id = create_article(TITLE)\n    list_articles()\n    list_files_of_article(article_id)\n\n    # Then we upload the file.\n    file_info = initiate_new_upload(article_id, FILE_NAME)\n    # Until here we used the figshare API; following lines use the figshare upload service API.\n    upload_parts(file_info)\n    # We return to the figshare API to complete the file upload process.\n    complete_upload(article_id, file_info['id'])\n    list_files_of_article(article_id)\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\nOutput of Script\n\n\nThis is an example of how the script would output on an account with no added articles or files yet.\n\n\nListing current articles:\n  No articles.\n\nCreated article: https://api.figshare.com/v2/account/articles/2012182\n\nListing current articles:\n  https://api.figshare.com/v2/articles/2012182 - A 3D cat object model\n\nListing files for article 2012182:\n  No files.\n\nInitiated file upload: https://api.figshare.com/v2/account/articles/2012182/files/3008150\n\nUploading parts:\n  Uploaded part 1 from 0 to 213325\n\nListing files for article 2012182:\n  3008150 - cat.obj", 
            "title": "Upload example"
        }, 
        {
            "location": "/APIv2/upload_example/#example-upload-on-figshare", 
            "text": "To upload a file to the fig share , one needs to use the standard  fig share  API , coupled\nwith the  fig share  upload system API .", 
            "title": "Example Upload on figshare"
        }, 
        {
            "location": "/APIv2/upload_example/#tldr", 
            "text": "A slimmed down version of the script in the next section, which only takes into account\nthe essentials looks like this:  #!/usr/bin/env python\n\nimport json\nimport os\n\nimport requests\n\n\nBASE_URL = 'https://api.figshare.com/v2/{endpoint}'\nTOKEN = ' insert access token here '\nFILE_NAME = '/home/adrian/tmp/cat.obj'\n\n\ndef main():\n    # Setup\n    basename = os.path.basename(FILE_NAME)\n    headers = {'Authorization': 'token ' + TOKEN}\n\n    # Create Article\n    data = {'title': basename}\n    resp = requests.post(BASE_URL.format(endpoint='account/articles'), headers=headers,\n                         data=json.dumps(data))\n    article_id = json.loads(resp.content)['location'].rsplit('/', 1)[1]\n\n    # Initiate Upload\n    endpoint = 'account/articles/{}/files'\n    endpoint = endpoint.format(article_id)\n    with open(FILE_NAME, 'rb') as fin:\n        fin.seek(0, 2)  # Go to end of file\n        size = fin.tell()\n    data = {'name': basename,\n            'size': size}\n    resp = requests.post(BASE_URL.format(endpoint=endpoint), headers=headers,\n                         data=json.dumps(data))\n    file_id = json.loads(resp.content)['location'].rsplit('/', 1)[1]\n\n    # Get upload/parts Info\n    endpoint = 'account/articles/{}/files/{}'\n    endpoint = endpoint.format(article_id, file_id)\n    resp = requests.get(BASE_URL.format(endpoint=endpoint), headers=headers)\n\n    url = '{upload_url}/{upload_token}'.format(**json.loads(resp.content))\n    parts = json.loads(requests.get(url).content)['parts']\n    # Uploading Parts\n    with open(FILE_NAME, 'rb') as fin:\n        for part in parts:\n            size = part['endOffset'] - part['startOffset'] + 1\n            requests.put(url, data=fin.read(size))\n\n    requests.post(BASE_URL.format(endpoint=endpoint), headers=headers)\n\nif __name__ == '__main__':\n    main()", 
            "title": "TL;DR."
        }, 
        {
            "location": "/APIv2/upload_example/#example-script", 
            "text": "A full script that lists articles  before  and  after  the new  article  and  file  are created\nwould look like this:  #!/usr/bin/env python\n\nimport hashlib\nimport json\nimport os\n\nimport requests\nfrom requests.exceptions import HTTPError\n\n\nBASE_URL = 'https://api.figshare.com/v2/{endpoint}'\nTOKEN = ' insert access token here '\nCHUNK_SIZE = 1048576\n\nFILE_NAME = '/path/to/work/directory/cat.obj'\nTITLE = 'A 3D cat object model'\n\n\ndef raw_issue_request(method, url, data=None):\n    headers = {'Authorization': 'token ' + TOKEN}\n    if data is not None:\n        data = json.dumps(data)\n    response = requests.request(method, url, headers=headers, data=data)\n    try:\n        response.raise_for_status()\n        try:\n            data = json.loads(response.content)\n        except ValueError:\n            data = response.content\n    except HTTPError as error:\n        print 'Caught an HTTPError: {}'.format(error.message)\n        print 'Body:\\n', response.content\n        raise\n\n    return data\n\n\ndef issue_request(method, endpoint, *args, **kwargs):\n    return raw_issue_request(method, BASE_URL.format(endpoint=endpoint), *args, **kwargs)\n\n\ndef list_articles():\n    result = issue_request('GET', 'account/articles')\n    print 'Listing current articles:'\n    if result:\n        for item in result:\n            print u'  {url} - {title}'.format(**item)\n    else:\n        print '  No articles.'\n    print\n\n\ndef create_article(title):\n    data = {\n        'title': title  # You may add any other information about the article here as you wish.\n    }\n    result = issue_request('POST', 'account/articles', data=data)\n    print 'Created article:', result['location'], '\\n'\n\n    result = raw_issue_request('GET', result['location'])\n\n    return result['id']\n\n\ndef list_files_of_article(article_id):\n    result = issue_request('GET', 'account/articles/{}/files'.format(article_id))\n    print 'Listing files for article {}:'.format(article_id)\n    if result:\n        for item in result:\n            print '  {id} - {name}'.format(**item)\n    else:\n        print '  No files.'\n\n    print\n\n\ndef get_file_check_data(file_name):\n    with open(file_name, 'rb') as fin:\n        md5 = hashlib.md5()\n        size = 0\n        data = fin.read(CHUNK_SIZE)\n        while data:\n            size += len(data)\n            md5.update(data)\n            data = fin.read(CHUNK_SIZE)\n        return md5.hexdigest(), size\n\n\ndef initiate_new_upload(article_id, file_name):\n    endpoint = 'account/articles/{}/files'\n    endpoint = endpoint.format(article_id)\n\n    md5, size = get_file_check_data(file_name)\n    data = {'name': os.path.basename(file_name),\n            'md5': md5,\n            'size': size}\n\n    result = issue_request('POST', endpoint, data=data)\n    print 'Initiated file upload:', result['location'], '\\n'\n\n    result = raw_issue_request('GET', result['location'])\n\n    return result\n\n\ndef complete_upload(article_id, file_id):\n    issue_request('POST', 'account/articles/{}/files/{}'.format(article_id, file_id))\n\n\ndef upload_parts(file_info):\n    url = '{upload_url}/{upload_token}'.format(**file_info)\n    result = raw_issue_request('GET', url)\n\n    print 'Uploading parts:'\n    with open(FILE_NAME, 'rb') as fin:\n        for part in result['parts']:\n            upload_part(file_info, fin, part)\n    print\n\n\ndef upload_part(file_info, stream, part):\n    udata = file_info.copy()\n    udata.update(part)\n    url = '{upload_url}/{upload_token}/{partNo}'.format(**udata)\n\n    stream.seek(part['startOffset'])\n    data = stream.read(part['endOffset'] - part['startOffset'] + 1)\n\n    raw_issue_request('PUT', url, data=data)\n    print '  Uploaded part {partNo} from {startOffset} to {endOffset}'.format(**part)\n\n\ndef main():\n    # We first create the article\n    list_articles()\n    article_id = create_article(TITLE)\n    list_articles()\n    list_files_of_article(article_id)\n\n    # Then we upload the file.\n    file_info = initiate_new_upload(article_id, FILE_NAME)\n    # Until here we used the figshare API; following lines use the figshare upload service API.\n    upload_parts(file_info)\n    # We return to the figshare API to complete the file upload process.\n    complete_upload(article_id, file_info['id'])\n    list_files_of_article(article_id)\n\n\nif __name__ == '__main__':\n    main()", 
            "title": "Example Script"
        }, 
        {
            "location": "/APIv2/upload_example/#output-of-script", 
            "text": "This is an example of how the script would output on an account with no added articles or files yet.  Listing current articles:\n  No articles.\n\nCreated article: https://api.figshare.com/v2/account/articles/2012182\n\nListing current articles:\n  https://api.figshare.com/v2/articles/2012182 - A 3D cat object model\n\nListing files for article 2012182:\n  No files.\n\nInitiated file upload: https://api.figshare.com/v2/account/articles/2012182/files/3008150\n\nUploading parts:\n  Uploaded part 1 from 0 to 213325\n\nListing files for article 2012182:\n  3008150 - cat.obj", 
            "title": "Output of Script"
        }, 
        {
            "location": "/APIv2/presenters/article/", 
            "text": "ArticlePresenter\n\n\n{\n    \nid\n: 1434614,\n    \ntitle\n: \nTest article title\n,\n    \ndoi\n: \nhttp://dx.doi.org/10.6084/m9.figshare.1434614\n,\n    \nurl\n: \nhttp://api.figshare.com/articles/1434614\n\n}\n\n\n\n\nArticlePresenter.L1\n\n\n\n\nCategoryPresenter\n\n\nLicensePresenter\n\n\n\n\nArticlePresenter\n +\n\n\n{\n    \ncitation\n: \nHand, Demario; (): title1. figshare.\\n\\n Retrieved 12:32, Jun 03, 2015 (GMT)\n,\n    \nconfidential_reason\n: \n,\n    \nembargo_type\n: \nfile\n,\n    \nis_confidential\n: false,\n    \nsize\n: 0,\n    \nfunding\n: \n,\n    \ntags\n: [\nt1\n, \nt2\n],\n    \nversion\n: 0,\n    \nis_active\n: 1,\n    \nis_metadata_record\n: false,\n    \nmetadata_reason\n: \n,\n    \nstatus\n: \ndraft\n,\n    \ndescription\n: \ndesc2\n,\n    \nis_embargoed\n: false,\n    \nembargo_date\n: null,\n    \nis_public\n: false,\n    \nmodified_date\n: null,\n    \ncreated_date\n: \n2015-06-03T09:09:39\n,\n    \nhas_linked_file\n: false,\n    \ncategories\n: [CategoryPresenter],\n    \nlicense\n: LicensePresenter,\n    \ndefined_type\n: 3,\n    \npublished_date\n: null,\n    \nembargo_reason\n: \n,\n    \nreferences\n: [\nhttp://link1\n, \nhttp://link2\n, \nhttp://link3\n]\n}\n\n\n\n\nArticlePresenter.L2\n\n\n\n\nFilePresenter\n\n\nAuthorPresenter\n\n\nArticleVersionPresenter\n\n\nCustomArticleFieldPresenter\n\n\n\n\nArticlePresenter.L1\n +\n\n\n{\n    \nfigshare_url\n: \nhttps://figshare.com/articles/article_title/123456789\n,\n    \nfiles\n: [FilePresenter],\n    \nauthors\n: [AuthorPresenter],\n    \ncustom_fields\n: [CustomArticleFieldPresenter]\n}\n\n\n\n\nNote\n: On \npublic\n endpoints, if the article is under \nfile embargo\n, or is \nconfidential\n, the \nfiles\n field will be missing from the JSON.\n\n\nArticleVersionPresenter\n\n\n{\n    \nversion\n: 3,\n    \nurl\n: \nhttp://api.figshare.com/v2/articles/6547/versions/3\n\n}\n\n\n\n\nArticleEmbargoPresenter\n\n\n{\n    \nis_embargoed\n: 1,\n    \nembargo_date\n: null,\n    \nembargo_type\n: \nfile\n,\n    \nembargo_reason\n: \nprivacy requirements\n\n}\n\n\n\n\nArticleConfidentialityPresenter\n\n\n{\n    \nis_confidential\n: true,\n    \nreason\n: \nprivacy requirements\n\n}", 
            "title": "Article"
        }, 
        {
            "location": "/APIv2/presenters/article/#articlepresenter", 
            "text": "{\n     id : 1434614,\n     title :  Test article title ,\n     doi :  http://dx.doi.org/10.6084/m9.figshare.1434614 ,\n     url :  http://api.figshare.com/articles/1434614 \n}", 
            "title": "ArticlePresenter"
        }, 
        {
            "location": "/APIv2/presenters/article/#articlepresenterl1", 
            "text": "CategoryPresenter  LicensePresenter   ArticlePresenter  +  {\n     citation :  Hand, Demario; (): title1. figshare.\\n\\n Retrieved 12:32, Jun 03, 2015 (GMT) ,\n     confidential_reason :  ,\n     embargo_type :  file ,\n     is_confidential : false,\n     size : 0,\n     funding :  ,\n     tags : [ t1 ,  t2 ],\n     version : 0,\n     is_active : 1,\n     is_metadata_record : false,\n     metadata_reason :  ,\n     status :  draft ,\n     description :  desc2 ,\n     is_embargoed : false,\n     embargo_date : null,\n     is_public : false,\n     modified_date : null,\n     created_date :  2015-06-03T09:09:39 ,\n     has_linked_file : false,\n     categories : [CategoryPresenter],\n     license : LicensePresenter,\n     defined_type : 3,\n     published_date : null,\n     embargo_reason :  ,\n     references : [ http://link1 ,  http://link2 ,  http://link3 ]\n}", 
            "title": "ArticlePresenter.L1"
        }, 
        {
            "location": "/APIv2/presenters/article/#articlepresenterl2", 
            "text": "FilePresenter  AuthorPresenter  ArticleVersionPresenter  CustomArticleFieldPresenter   ArticlePresenter.L1  +  {\n     figshare_url :  https://figshare.com/articles/article_title/123456789 ,\n     files : [FilePresenter],\n     authors : [AuthorPresenter],\n     custom_fields : [CustomArticleFieldPresenter]\n}  Note : On  public  endpoints, if the article is under  file embargo , or is  confidential , the  files  field will be missing from the JSON.", 
            "title": "ArticlePresenter.L2"
        }, 
        {
            "location": "/APIv2/presenters/article/#articleversionpresenter", 
            "text": "{\n     version : 3,\n     url :  http://api.figshare.com/v2/articles/6547/versions/3 \n}", 
            "title": "ArticleVersionPresenter"
        }, 
        {
            "location": "/APIv2/presenters/article/#articleembargopresenter", 
            "text": "{\n     is_embargoed : 1,\n     embargo_date : null,\n     embargo_type :  file ,\n     embargo_reason :  privacy requirements \n}", 
            "title": "ArticleEmbargoPresenter"
        }, 
        {
            "location": "/APIv2/presenters/article/#articleconfidentialitypresenter", 
            "text": "{\n     is_confidential : true,\n     reason :  privacy requirements \n}", 
            "title": "ArticleConfidentialityPresenter"
        }, 
        {
            "location": "/APIv2/presenters/author/", 
            "text": "AuthorPresenter\n\n\n{\n    \nid\n: 97657,\n    \nfull_name\n: \nJohn Doe\n,\n    \nis_active\n: 1,\n    \nurl_name\n: \nJohn_Doe\n\n}", 
            "title": "Author"
        }, 
        {
            "location": "/APIv2/presenters/author/#authorpresenter", 
            "text": "{\n     id : 97657,\n     full_name :  John Doe ,\n     is_active : 1,\n     url_name :  John_Doe \n}", 
            "title": "AuthorPresenter"
        }, 
        {
            "location": "/APIv2/presenters/category/", 
            "text": "CategoryPresenter\n\n\n{\n    \nid\n: 1,\n    \ntitle\n: \nCell Biology\n\n}", 
            "title": "Category"
        }, 
        {
            "location": "/APIv2/presenters/category/#categorypresenter", 
            "text": "{\n     id : 1,\n     title :  Cell Biology \n}", 
            "title": "CategoryPresenter"
        }, 
        {
            "location": "/APIv2/presenters/collection/", 
            "text": "CollectionPresenter\n\n\n{\n    \nid\n: 123,\n    \ntitle\n: \nSample collection\n,\n    \ndoi\n: \nhttp://dx.doi.org/10.6084/m9.figshare.123\n,\n    \nurl\n: \nhttps://figshare.com/v2/collections/123\n,\n    \npublished_date\n: \n2015-08-12T00:39:55\n\n}\n\n\n\n\nCollectionVersionPresenter\n\n\n{\n    \nversion\n: 1,\n    \nurl\n: \n\n}\n\n\n\n\nCollectionPresenter.L1\n\n\n\n\nCategoryPresenter\n\n\nAuthorPresenter\n\n\nArticlePresenter\n\n\n\n\nCollectionPresenter\n\n\n+\n\n\n{\n    \nresource_id\n: \nAS124056\n,\n    \nresource_doi\n: \nhttp://dx.doi.org/10.608/m9.pub.7481\n,\n    \nresource_title\n: \ndemo title\n,\n    \nresource_link\n: \nhttp://dx.doi.org/10.321/m9.pub.1231\n,\n    \nresource_version\n: \n1\n,\n    \nversion\n: 1,\n    \ndescription\n: \nSample description\n,\n    \ncategories\n: [CategoryPresenter],\n    \nreferences\n: [\n        \nhttp://link1\n,\n        \nhttp://link2\n\n    ],\n    \ntags\n: [\n        \ntag1\n,\n        \ntag2\n\n    ],\n    \nauthors\n: [AuthorPresenter],\n    \ninstitution_id\n: 154,\n    \ngroup_id\n: 445,\n    \narticle_count\n: 100,\n    \npublic\n: 1,\n    \ncustom_metadata\n: [\n        {\n            \nlocation\n: \nParis\n\n        },\n        {\n            \nsize\n: \n1 feet\n\n        }\n    ],\n    \ncitation\n: \ncitation string\n\n}", 
            "title": "Collection"
        }, 
        {
            "location": "/APIv2/presenters/collection/#collectionpresenter", 
            "text": "{\n     id : 123,\n     title :  Sample collection ,\n     doi :  http://dx.doi.org/10.6084/m9.figshare.123 ,\n     url :  https://figshare.com/v2/collections/123 ,\n     published_date :  2015-08-12T00:39:55 \n}", 
            "title": "CollectionPresenter"
        }, 
        {
            "location": "/APIv2/presenters/collection/#collectionversionpresenter", 
            "text": "{\n     version : 1,\n     url :  \n}", 
            "title": "CollectionVersionPresenter"
        }, 
        {
            "location": "/APIv2/presenters/collection/#collectionpresenterl1", 
            "text": "CategoryPresenter  AuthorPresenter  ArticlePresenter   CollectionPresenter  +  {\n     resource_id :  AS124056 ,\n     resource_doi :  http://dx.doi.org/10.608/m9.pub.7481 ,\n     resource_title :  demo title ,\n     resource_link :  http://dx.doi.org/10.321/m9.pub.1231 ,\n     resource_version :  1 ,\n     version : 1,\n     description :  Sample description ,\n     categories : [CategoryPresenter],\n     references : [\n         http://link1 ,\n         http://link2 \n    ],\n     tags : [\n         tag1 ,\n         tag2 \n    ],\n     authors : [AuthorPresenter],\n     institution_id : 154,\n     group_id : 445,\n     article_count : 100,\n     public : 1,\n     custom_metadata : [\n        {\n             location :  Paris \n        },\n        {\n             size :  1 feet \n        }\n    ],\n     citation :  citation string \n}", 
            "title": "CollectionPresenter.L1"
        }, 
        {
            "location": "/APIv2/presenters/custom_field/", 
            "text": "CustomArticleFieldPresenter\n\n\n{\n    \nname\n: \nlocation\n,\n    \nvalue\n: \nAmsterdam\n,\n    \nis_mandatory\n: 1\n}", 
            "title": "Custom field"
        }, 
        {
            "location": "/APIv2/presenters/custom_field/#customarticlefieldpresenter", 
            "text": "{\n     name :  location ,\n     value :  Amsterdam ,\n     is_mandatory : 1\n}", 
            "title": "CustomArticleFieldPresenter"
        }, 
        {
            "location": "/APIv2/presenters/file/", 
            "text": "FilePresenter\n\n\n{\n    \nid\n: 3000002,\n    \nname\n: \ntest.xls\n,\n    \nsize\n: 14848\n}\n\n\n\n\nFilePresenter.L1\n\n\n\n\nFilePresenter\n +\n\n\n\n\n{\n    \nstatus\n: \ncreated\n,\n    \nviewer_type\n: \n,\n    \npreview_state\n: \npreview_not_available\n,\n    \npreview_meta\n: {},\n    \nis_link_only\n: false,\n    \nupload_url\n: \nhttps://uploads.figshare.com\n,\n    \nupload_token\n: \n9dfc5fe3-d617-4d93-ac11-8afe7e984a4b\n,\n    \nsupplied_md5\n: \n043a51806d646e88cafbf19e7b82846f\n,\n    \ncomputed_md5\n: \n043a51806d646e88cafbf19e7b82846f\n\n}", 
            "title": "File"
        }, 
        {
            "location": "/APIv2/presenters/file/#filepresenter", 
            "text": "{\n     id : 3000002,\n     name :  test.xls ,\n     size : 14848\n}", 
            "title": "FilePresenter"
        }, 
        {
            "location": "/APIv2/presenters/file/#filepresenterl1", 
            "text": "FilePresenter  +   {\n     status :  created ,\n     viewer_type :  ,\n     preview_state :  preview_not_available ,\n     preview_meta : {},\n     is_link_only : false,\n     upload_url :  https://uploads.figshare.com ,\n     upload_token :  9dfc5fe3-d617-4d93-ac11-8afe7e984a4b ,\n     supplied_md5 :  043a51806d646e88cafbf19e7b82846f ,\n     computed_md5 :  043a51806d646e88cafbf19e7b82846f \n}", 
            "title": "FilePresenter.L1"
        }, 
        {
            "location": "/APIv2/presenters/license/", 
            "text": "LicensePresenter\n\n\n{\n    \nvalue\n: 1,\n    \nname\n: \nCC-BY\n,\n    \nurl\n: \nhttp://creativecommons.org/licenses/by/3.0/us/\n\n}", 
            "title": "License"
        }, 
        {
            "location": "/APIv2/presenters/license/#licensepresenter", 
            "text": "{\n     value : 1,\n     name :  CC-BY ,\n     url :  http://creativecommons.org/licenses/by/3.0/us/ \n}", 
            "title": "LicensePresenter"
        }, 
        {
            "location": "/APIv2/presenters/private_link/", 
            "text": "PrivateLinkPresenter\n\n\n{\n    \nid\n: \n0cfb0dbeac92df445df4aba45f63fdc85fa0b9a888b64e157ce3c93b576aa300fb3621ef3a219515dd482\n,\n    \nis_active\n: true,\n    \nexpires_date\n: \n2015-07-03T00:00:00\n\n}", 
            "title": "Private link"
        }, 
        {
            "location": "/APIv2/presenters/private_link/#privatelinkpresenter", 
            "text": "{\n     id :  0cfb0dbeac92df445df4aba45f63fdc85fa0b9a888b64e157ce3c93b576aa300fb3621ef3a219515dd482 ,\n     is_active : true,\n     expires_date :  2015-07-03T00:00:00 \n}", 
            "title": "PrivateLinkPresenter"
        }, 
        {
            "location": "/oauth/", 
            "text": "OAuth\n\n\nSince January 2016 figshare supports the \nOAuth 2.0 Authorization Framework\n. If you're new to OAuth make sure you have at least a basic understanding before moving on.\n\n\nQuick guide\n\n\nTo receive a client id and secret you need to register an application in\nour system. You can easily do this from the \nfigshare applications\npage\n in your account.\n\n\nAuthorization endpoint\n\n\nThe authorization endpoint is located at\n\nhttps://figshare.com/account/applications/authorize\n. The endpoint\nsupports both\n\nauthorization code grant\n and \nimplicit grant\n.\n\n\nRequest params\n\n\n\n\nclient_id\n\n\nresponse_type\n\n\nscope\n\n\nstate\n\n\nredirect_uri\n\n\n\n\nResponse params\n\n\nUser is redirected back to \nredirect_uri\n with the following params\natted to the query:\n\n\nSuccess\n as described in \nrfc6749#section-4.1.2\n or \nrfc6749#section-4.2.2\n:\n\n\n\n\ncode\n\n\nstate\n\n\n\n\nError\n as described in \nrfc6749#4.1.2.1\n:\n\n\n\n\nerror\n\n\nerror_description\n\n\n\n\nToken endpoint\n\n\nThe token endpoint is located at \nhttps://api.figshare.com/v2/token\n.\nIn order to receive an access token you need to make a \nPOST\n request.\n\n\nRequest\n\n\nThen endpoint accepts both \napplication/x-www-form-urlencoded\n and\n\napplication/json\n content types. It will only respond with JSON\ncontent.\n\n\n\n\nclient_id\n\n\nclient_secret\n\n\ngrant_type\n\n\n\n\nand, based on the value of \ngrant_type\n:\n\n\n\n\ncode\n\n\nrefresh_token\n\n\nusername\n\n\npassword\n\n\n\n\nResponse\n\n\nSuccessfull responses are always \n200\n and failed ones are always \n400\n,\neven for failed authoziration.\n\n\nSuccess\n response is a JSON as described in \nhttp://tools.ietf.org/html/rfc6749#section-5.1\n.\n\n\n\n\naccess_token\n\n\ntoken_type\n\n\nexpires_in\n\n\nrefresh_token\n\n\nscope\n - \nnot available yet\n\n\n\n\nError\n response as described in \nrfc6749#section-5.2\n\n\nScope\n\n\nCurrently the only scope available is \nall\n which grants full access to\nthe resource owner's data. We're working on a more flexible approach.\n\n\nGrant Types\n\n\nThe supported grant types at this moment are:\n\n\n\n\nauthorization_code\n\n\nrefresh_token\n\n\npassword", 
            "title": "Home"
        }, 
        {
            "location": "/oauth/#oauth", 
            "text": "Since January 2016 figshare supports the  OAuth 2.0 Authorization Framework . If you're new to OAuth make sure you have at least a basic understanding before moving on.", 
            "title": "OAuth"
        }, 
        {
            "location": "/oauth/#quick-guide", 
            "text": "To receive a client id and secret you need to register an application in\nour system. You can easily do this from the  figshare applications\npage  in your account.  Authorization endpoint  The authorization endpoint is located at https://figshare.com/account/applications/authorize . The endpoint\nsupports both authorization code grant  and  implicit grant .  Request params   client_id  response_type  scope  state  redirect_uri   Response params  User is redirected back to  redirect_uri  with the following params\natted to the query:  Success  as described in  rfc6749#section-4.1.2  or  rfc6749#section-4.2.2 :   code  state   Error  as described in  rfc6749#4.1.2.1 :   error  error_description   Token endpoint  The token endpoint is located at  https://api.figshare.com/v2/token .\nIn order to receive an access token you need to make a  POST  request.  Request  Then endpoint accepts both  application/x-www-form-urlencoded  and application/json  content types. It will only respond with JSON\ncontent.   client_id  client_secret  grant_type   and, based on the value of  grant_type :   code  refresh_token  username  password   Response  Successfull responses are always  200  and failed ones are always  400 ,\neven for failed authoziration.  Success  response is a JSON as described in  http://tools.ietf.org/html/rfc6749#section-5.1 .   access_token  token_type  expires_in  refresh_token  scope  -  not available yet   Error  response as described in  rfc6749#section-5.2", 
            "title": "Quick guide"
        }, 
        {
            "location": "/oauth/#scope", 
            "text": "Currently the only scope available is  all  which grants full access to\nthe resource owner's data. We're working on a more flexible approach.", 
            "title": "Scope"
        }, 
        {
            "location": "/oauth/#grant-types", 
            "text": "The supported grant types at this moment are:   authorization_code  refresh_token  password", 
            "title": "Grant Types"
        }, 
        {
            "location": "/Stats/breakdown/", 
            "text": "Endpoints for retrieving a \nbreakdown\n\n\nThis type of endpoint enables the retrieval of a geo-location breakdown of the number\nof \nviews\n, \ndownloads\n or \nshares\n for a specific item.\n\n\n\n\nAuthorization\n\n\nEndpoint format\n\n\nRequest parameters\n\n\nExamples\n\n\n\n\nAuthorization\n\n\nBasic HTTP authentication is required for timeline endpoints within the scope of an institution.\n\n\nEndpoint format\n\n\nFor items outside an institution scope the endpoints have the format:\n\n\n/breakdown/{granularity}/{counter}/{item}/{item_id}\n\n\n\n\nand inside an institution scope they have the format:\n\n\n/{institution}/breakdown/{granularity}{counter}/{item}/{item_id}\n\n\n\n\nwhere \ngranularity\n is one of \nyear\n, \nmonth\n, \nday\n or \ntotal\n\nand \ncounter\n is one of \nviews\n, \ndownloads\n or \nshares\n.\n\n\nThe results on this endpoint can be filtered further by a \nstart_date\n and \nend_date\n and\na specified \ncategory\n or \nitem_type\n. By default, \nstart_date\n and \nend_date\n are set\nto reflect the events of the last month. The supplementary filters can be provided in the\nquery parameters of the request.\n\n\nRequest parameters\n\n\nThe following table describes the optional parameters:\n\n\n\n\n\n\n\n\nParameter\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nstart_date\n\n\nBy default this is set to the 1st of the current month.\n\n\n\n\n\n\nend_date\n\n\nBy default this is set to today.\n\n\n\n\n\n\nsub_item\n\n\nCan be one of \ncategory\n and \nitem_type\n. Acts as a filter on the result.\n\n\n\n\n\n\nsub_item_id\n\n\nRequired if \nsub_item\n is also specified.\n\n\n\n\n\n\n\n\nExamples\n\n\nDaily breakdown of shares for an unaffiliated article\n\n\nRequest\n\n\nGET https://stats.figshare.com/breakdown/day/shares/article/23?start_date=2014-03-08\nend_date=2014-05-21\n\n\n\n\nResponse\n\n\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n  \nbreakdown\n: {\n    \n2014-03-08\n: {\n      \nSpain\n: {\n        \nSeville\n: 8,\n        \nMadrid\n: 11,\n        \ntotal\n: 19\n      }\n    },\n    \n2014-02-20\n: {\n      \nSpain\n: {\n        \nSeville\n: 3,\n        \ntotal\n: 3\n      }\n    },\n    \n2014-05-04\n: {\n      \nChina\n: {\n        \nFuzhou\n: 7,\n        \nChengdu\n: 3,\n        \ntotal\n: 10\n      }\n    }\n  }\n}\n\n\n\n\nYearly breakdown of views for a project associated to an institution\n\n\nRequest\n\n\nGET https://stats.figshare.com/monash/breakdown/year/views/project/1345?start_date=2013-01-01\nend_date=2015-01-01\nAuthorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh\n\n\n\n\nResponse\n\n\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n  \nbreakdown\n: {\n    \n2013\n: {\n      \nSpain\n: {\n        \nSeville\n: 5,\n        \nMadrid\n: 3,\n        \ntotal\n: 8\n      },\n      \nChina\n: {\n        \nFuzhou\n: 2,\n        \nChengdu\n: 3,\n        \ntotal\n: 5\n      }\n    },\n    \n2014\n: {\n      \nUnited States\n: {\n        \nKansas City\n: 3,\n        \nOrlando\n: 1,\n        \ntotal\n: 4\n      },\n      \nVenezuela\n: {\n        \nCaracas\n: 5,\n        \ntotal\n: 5\n      },\n      \nBrazil\n: {\n        \ntotal\n: 7,\n        \nIndaiatuba\n: 4,\n        \nCampinas\n: 3\n      }\n    }\n  }\n}\n\n\n\n\nTotal breakdown of downloads from filesets found in a specified institutional group\n\n\nRequest\n\n\nGET https://stats.figshare.com/lboro/breakdown/total/downloads/group/17?sub_item=item_type\nsub_item_id=fileset\nstart_date=2015-02-11\nend_date=2015-05-17\nAuthorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh\n\n\n\n\nResponse\n\n\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n  \nbreakdown\n: {\n    \ntotal\n: {\n      \nSpain\n: {\n        \nSeville\n: 6,\n        \nBarcelona\n: 7,\n        \nMadrid\n: 3,\n        \ntotal\n: 16\n      },\n      \nChina\n: {\n        \nChengdu\n: 7,\n        \nFuzhou\n: 4,\n        \ntotal\n: 11\n      },\n      \nUnited States\n: {\n        \nKansas City\n: 3,\n        \nOrlando\n: 7,\n        \ntotal\n: 10\n      },\n      \nBrazil\n: {\n        \ntotal\n: 2,\n        \nIndaiatuba\n: 2\n      }\n    }\n  }\n}\n\n\n\n\nMonthly breakdown of views from projects found in a specified institutional group\n\n\nRequest\n\n\nGET https://stats.figshare.com/melbourne/breakdown/month/views/group/234\nsub_item=item_type\nsub_item_id=project\nstart_date=2015-02-11\nend_date=2015-03-17\nAuthorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh\n\n\n\n\nResponse\n\n\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n  \nbreakdown\n: {\n    \n2015-02\n: {\n      \nFrance\n: {\n        \nParis\n: 12,\n        \nMontpellier\n: 7,\n        \ntotal\n: 19\n      },\n      \nGermany\n: {\n        \nMunich\n: 13,\n        \nFrankfurt\n: 2,\n        \ntotal\n: 15\n      }\n    },\n    \n2015-03\n: {\n      \nSpain\n: {\n        \nMadrid\n: 3,\n        \nMallorca\n: 5,\n        \ntotal\n: 8\n      }\n    }\n  }\n}\n\n\n\n\nBreakdown of institutional statistics with missing authorization\n\n\nRequest\n\n\nGET https://stats.figshare.com/melbourne/breakdown/month/views/group/234\n\n\n\n\nResponse\n\n\nHTTP/1.1 403 Forbidden\nContent-Type: application/json; charset=UTF-8\n\n{\n  \ndata\n: null,\n  \ncode\n: \nForbidden\n,\n  \nmessage\n: \nUnauthorized request\n\n}", 
            "title": "Breakdown"
        }, 
        {
            "location": "/Stats/breakdown/#endpoints-for-retrieving-a-breakdown", 
            "text": "This type of endpoint enables the retrieval of a geo-location breakdown of the number\nof  views ,  downloads  or  shares  for a specific item.   Authorization  Endpoint format  Request parameters  Examples", 
            "title": "Endpoints for retrieving a breakdown"
        }, 
        {
            "location": "/Stats/breakdown/#authorization", 
            "text": "Basic HTTP authentication is required for timeline endpoints within the scope of an institution.", 
            "title": "Authorization"
        }, 
        {
            "location": "/Stats/breakdown/#endpoint-format", 
            "text": "For items outside an institution scope the endpoints have the format:  /breakdown/{granularity}/{counter}/{item}/{item_id}  and inside an institution scope they have the format:  /{institution}/breakdown/{granularity}{counter}/{item}/{item_id}  where  granularity  is one of  year ,  month ,  day  or  total \nand  counter  is one of  views ,  downloads  or  shares .  The results on this endpoint can be filtered further by a  start_date  and  end_date  and\na specified  category  or  item_type . By default,  start_date  and  end_date  are set\nto reflect the events of the last month. The supplementary filters can be provided in the\nquery parameters of the request.", 
            "title": "Endpoint format"
        }, 
        {
            "location": "/Stats/breakdown/#request-parameters", 
            "text": "The following table describes the optional parameters:     Parameter  Comments      start_date  By default this is set to the 1st of the current month.    end_date  By default this is set to today.    sub_item  Can be one of  category  and  item_type . Acts as a filter on the result.    sub_item_id  Required if  sub_item  is also specified.", 
            "title": "Request parameters"
        }, 
        {
            "location": "/Stats/breakdown/#examples", 
            "text": "Daily breakdown of shares for an unaffiliated article  Request  GET https://stats.figshare.com/breakdown/day/shares/article/23?start_date=2014-03-08 end_date=2014-05-21  Response  HTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n   breakdown : {\n     2014-03-08 : {\n       Spain : {\n         Seville : 8,\n         Madrid : 11,\n         total : 19\n      }\n    },\n     2014-02-20 : {\n       Spain : {\n         Seville : 3,\n         total : 3\n      }\n    },\n     2014-05-04 : {\n       China : {\n         Fuzhou : 7,\n         Chengdu : 3,\n         total : 10\n      }\n    }\n  }\n}  Yearly breakdown of views for a project associated to an institution  Request  GET https://stats.figshare.com/monash/breakdown/year/views/project/1345?start_date=2013-01-01 end_date=2015-01-01\nAuthorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh  Response  HTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n   breakdown : {\n     2013 : {\n       Spain : {\n         Seville : 5,\n         Madrid : 3,\n         total : 8\n      },\n       China : {\n         Fuzhou : 2,\n         Chengdu : 3,\n         total : 5\n      }\n    },\n     2014 : {\n       United States : {\n         Kansas City : 3,\n         Orlando : 1,\n         total : 4\n      },\n       Venezuela : {\n         Caracas : 5,\n         total : 5\n      },\n       Brazil : {\n         total : 7,\n         Indaiatuba : 4,\n         Campinas : 3\n      }\n    }\n  }\n}  Total breakdown of downloads from filesets found in a specified institutional group  Request  GET https://stats.figshare.com/lboro/breakdown/total/downloads/group/17?sub_item=item_type sub_item_id=fileset start_date=2015-02-11 end_date=2015-05-17\nAuthorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh  Response  HTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n   breakdown : {\n     total : {\n       Spain : {\n         Seville : 6,\n         Barcelona : 7,\n         Madrid : 3,\n         total : 16\n      },\n       China : {\n         Chengdu : 7,\n         Fuzhou : 4,\n         total : 11\n      },\n       United States : {\n         Kansas City : 3,\n         Orlando : 7,\n         total : 10\n      },\n       Brazil : {\n         total : 2,\n         Indaiatuba : 2\n      }\n    }\n  }\n}  Monthly breakdown of views from projects found in a specified institutional group  Request  GET https://stats.figshare.com/melbourne/breakdown/month/views/group/234 sub_item=item_type sub_item_id=project start_date=2015-02-11 end_date=2015-03-17\nAuthorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh  Response  HTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n   breakdown : {\n     2015-02 : {\n       France : {\n         Paris : 12,\n         Montpellier : 7,\n         total : 19\n      },\n       Germany : {\n         Munich : 13,\n         Frankfurt : 2,\n         total : 15\n      }\n    },\n     2015-03 : {\n       Spain : {\n         Madrid : 3,\n         Mallorca : 5,\n         total : 8\n      }\n    }\n  }\n}  Breakdown of institutional statistics with missing authorization  Request  GET https://stats.figshare.com/melbourne/breakdown/month/views/group/234  Response  HTTP/1.1 403 Forbidden\nContent-Type: application/json; charset=UTF-8\n\n{\n   data : null,\n   code :  Forbidden ,\n   message :  Unauthorized request \n}", 
            "title": "Examples"
        }, 
        {
            "location": "/Stats/", 
            "text": "fig\nshare\n statistics service\n\n\nThe fig\nshare\n statistics service is available at https://stats.figshare.com and\nit supports retrieving information about the number of \nviews\n, \ndownloads\n and \nshares\n\nrelated to items available of fig\nshare\n. From here on, an event is one of \nview\n,\n\ndownload\n or \nshare\n.\n\n\nAll communication with the service is done through \nhttps\n and all data is encoded as \njson\n.\nOptional authorization for specific endpoints is done through basic access authentication.\n\n\n\n\nAuthentication\n\n\nErrors\n\n\nEndpoints\n\n\n\n\nAuthentication\n\n\nFor some specialized endpoints, access to institution specific statistics requires\nsending a \nbase64\n-encoded pair of \nusername:password\n in the basic authorization header:\n\n\nGET https://stats.figshare.com/lboro/top/views/article\nAuthorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh\n\n\n\n\nPlease note that the analogous endpoint for retrieving statistics for items outside\nthe institutional scope, requires no authentication:\n\n\nGET https://stats.figshare.com/top/views/article\n\n\n\n\nErrors\n\n\nError responses are common for all endpoints an are presented below.\n\n\nEach error response will have a specific HTTP status code and a JSON body with the\nfollowing fields\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nA human friendly message explaining the error.\n\n\n\n\n\n\ncode\n\n\nA machine friendly error code, used by the dev team to identify the error.\n\n\n\n\n\n\ndata\n\n\nAn object containing extra information about the error.\n\n\n\n\n\n\n\n\n400 Bad Request\n\n\nThis error response will be raised when an invalid field is sent in the parameters of the\nrequest or when a field is missing from the parameters of the request. Required and\noptional fields in the body are documented for each endpoint, where applicable.\n\n\n403 Forbidden\n\n\nThis error response is presented when attempting to retrieve information from a protected endpoint\nwithout the appropriate \nAuthorization\n header.\n\n\n404 Not Found\n\n\nThis error response is presented when attempting to access a non existing endpoint. Please note\nthat it will not be raised when attempting to gather statistics for an item which doesn't\nexist on \nfig\nshare, instead an appropriate empty result will be returned.\n\n\nEndpoints\n\n\nThe statistics service endpoints can be classified in 4 categories:\n\n\n\n\nTotals\n\n\nTimeline\n\n\nBreakdown\n\n\nTops\n\n\n\n\nScope\n\n\nAll endpoints are applicable for the following items:\n\n\n\n\ngroup\n: events on items inside the specified group\n\n\nauthor\n: events on items authored by the specified user\n\n\narticle\n: events on the specified article\n\n\nproject\n: events on the specified project\n\n\ncollection\n: events on the specified collection\n\n\n\n\nTotals\n\n\nThis type of endpoint enables the retrieval of the total number of events for a specific item.\nMore details and examples are provided \nhere\n.\n\n\nTimeline\n\n\nThis type of endpoint enables the retrieval of a timeline of the number of events for a specific\nitem, with a specified granularity. More details and examples are provided \nhere\n.\n\n\nBreakdown\n\n\nThis type of endpoint enables the retrieval of a geo-location breakdown of the number of events for a specific\nitem, with a specified granularity. More details and examples are provided \nhere\n.\n\n\nTops\n\n\nThis type of endpoint enables the retrieval of rankings of the most viewed, downloaded or shared items,\nover a specific period of time. More details and examples are provided \nhere\n.", 
            "title": "Home"
        }, 
        {
            "location": "/Stats/#figshare-statistics-service", 
            "text": "The fig share  statistics service is available at https://stats.figshare.com and\nit supports retrieving information about the number of  views ,  downloads  and  shares \nrelated to items available of fig share . From here on, an event is one of  view , download  or  share .  All communication with the service is done through  https  and all data is encoded as  json .\nOptional authorization for specific endpoints is done through basic access authentication.   Authentication  Errors  Endpoints", 
            "title": "figshare statistics service"
        }, 
        {
            "location": "/Stats/#authentication", 
            "text": "For some specialized endpoints, access to institution specific statistics requires\nsending a  base64 -encoded pair of  username:password  in the basic authorization header:  GET https://stats.figshare.com/lboro/top/views/article\nAuthorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh  Please note that the analogous endpoint for retrieving statistics for items outside\nthe institutional scope, requires no authentication:  GET https://stats.figshare.com/top/views/article", 
            "title": "Authentication"
        }, 
        {
            "location": "/Stats/#errors", 
            "text": "Error responses are common for all endpoints an are presented below.  Each error response will have a specific HTTP status code and a JSON body with the\nfollowing fields     Field  Description      message  A human friendly message explaining the error.    code  A machine friendly error code, used by the dev team to identify the error.    data  An object containing extra information about the error.     400 Bad Request  This error response will be raised when an invalid field is sent in the parameters of the\nrequest or when a field is missing from the parameters of the request. Required and\noptional fields in the body are documented for each endpoint, where applicable.  403 Forbidden  This error response is presented when attempting to retrieve information from a protected endpoint\nwithout the appropriate  Authorization  header.  404 Not Found  This error response is presented when attempting to access a non existing endpoint. Please note\nthat it will not be raised when attempting to gather statistics for an item which doesn't\nexist on  fig share, instead an appropriate empty result will be returned.", 
            "title": "Errors"
        }, 
        {
            "location": "/Stats/#endpoints", 
            "text": "The statistics service endpoints can be classified in 4 categories:   Totals  Timeline  Breakdown  Tops   Scope  All endpoints are applicable for the following items:   group : events on items inside the specified group  author : events on items authored by the specified user  article : events on the specified article  project : events on the specified project  collection : events on the specified collection   Totals  This type of endpoint enables the retrieval of the total number of events for a specific item.\nMore details and examples are provided  here .  Timeline  This type of endpoint enables the retrieval of a timeline of the number of events for a specific\nitem, with a specified granularity. More details and examples are provided  here .  Breakdown  This type of endpoint enables the retrieval of a geo-location breakdown of the number of events for a specific\nitem, with a specified granularity. More details and examples are provided  here .  Tops  This type of endpoint enables the retrieval of rankings of the most viewed, downloaded or shared items,\nover a specific period of time. More details and examples are provided  here .", 
            "title": "Endpoints"
        }, 
        {
            "location": "/Stats/timeline/", 
            "text": "Endpoints for retrieving a \ntimeline\n\n\nThis type of endpoint enables the retrieval of a timeline of the number of \nviews\n, \ndownloads\n\nor \nshares\n for a specific item.\n\n\n\n\nAuthorization\n\n\nEndpoint format\n\n\nRequest parameters\n\n\nExamples\n\n\n\n\nAuthorization\n\n\nBasic HTTP authentication is required for timeline endpoints within the scope of an institution.\n\n\nEndpoint format\n\n\nFor items outside an institution scope the endpoints have the format:\n\n\n/timeline/{granularity}/{counter}/{item}/{item_id}\n\n\n\n\n\nand inside an institution scope they have the format:\n\n\n/{institution}/timeline/{granularity}{counter}/{item}/{item_id}\n\n\n\n\nwhere \ngranularity\n is one of \nyear\n, \nmonth\n, \nday\n or \ntotal\n\nand \ncounter\n is one of \nviews\n, \ndownloads\n or \nshares\n.\n\n\nThe results on this endpoint can be filtered further by a \nstart_date\n and \nend_date\n and\na specified \ncategory\n or \nitem_type\n. By default, \nstart_date\n and \nend_date\n are set\nto reflect the events of the last month. The supplementary filters can be provided in the\nrequest parameters.\n\n\nRequest parameters\n\n\nThe following table describes the optional parameters:\n\n\n\n\n\n\n\n\nParameter\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nstart_date\n\n\nBy default this is set to the 1st of the current month.\n\n\n\n\n\n\nend_date\n\n\nBy default this is set to today.\n\n\n\n\n\n\nsub_item\n\n\nCan be one of \ncategory\n and \nitem_type\n. Acts as a filter on the result.\n\n\n\n\n\n\nsub_item_id\n\n\nRequired if \nsub_item\n is also specified.\n\n\n\n\n\n\n\n\nExamples\n\n\nDaily timeline of downloads for an unaffiliated article\n\n\nRequest\n\n\nGET https://stats.figshare.com/timeline/day/downloads/article/23\n\n\n\n\nResponse\n\n\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n  \ntimeline\n: {\n    \n2015-07-01\n: 7,\n    \n2015-07-02\n: 3,\n    \n2015-07-09\n: 1,\n    \n2015-07-15\n: 3,\n    \n2015-07-16\n: 2,\n    \n2015-07-18\n: 1\n  }\n}\n\n\n\n\nYearly timeline of views for an article associated to an institution\n\n\nRequest\n\n\nGET https://stats.figshare.com/monash/timeline/year/views/article/2000000?start_date=2013-01-01\nend_date=2015-08-01\nAuthorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh\n\n\n\n\nResponse\n\n\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n  \ntimeline\n: {\n    \n2013\n: 16,\n    \n2014\n: 23,\n    \n2015\n: 12\n  }\n}\n\n\n\n\nMonthly timeline of shares for items in a specified institutional group, matching a specified category\n\n\nRequest\n\n\nGET https://stats.figshare.com/monash/timeline/month/shares/group/10?sub_item=category\nsub_item_id=2\nstart_date=2014-01-03\nend_date=2014-05-12\nAuthorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh\n\n\n\n\nResponse\n\n\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n  \ntimeline\n: {\n    \n2014-01\n: 3,\n    \n2014-02\n: 5,\n    \n2014-03\n: 18,\n    \n2014-04\n: 4,\n    \n2014-05\n: 2\n  }\n}\n\n\n\n\nDaily timeline of views for datasets found in a specified institutional group\n\n\nRequest\n\n\nGET https://stats.figshare.com/monash/timeline/day/views/group/10?sub_item=item_type\nsub_item_id=dataset\nstart_date=2014-03-01\nend_date=2014-03-04\nAuthorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh\n\n\n\n\nResponse\n\n\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n  \ntimeline\n: {\n    \n2014-03-01\n: 10,\n    \n2014-03-02\n: 14,\n    \n2014-03-03\n: 15,\n    \n2014-03-04\n: 9\n  }\n}\n\n\n\n\nTotal timeline of views for a collection associated to an institution\n\n\nRequest\n\n\nGET https://stats.figshare.com/lboro/timeline/total/views/collection/15?start_date=2014-01-02\nend_date=2014-03-05\nAuthorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh\n\n\n\n\nResponse\n\n\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n  \ntimeline\n: {\n    \ntotal\n: 10\n  }\n}\n\n\n\n\nTimeline with missing request parameter\n\n\nRequest\n*\n\n\nGET https://stats.figshare.com/lboro/timeline/month/views/group/1?sub_item=category\nstart_date=2014-01-01\nend_date=2015-02-03\nAuthorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh\n\n\n\n\nResponse\n\n\nHTTP/1.1 400 Bad Request\nContent-Type: application/json; charset=UTF-8\n\n{\n  \ndata\n: {\n    \nmissing_params\n: \nsub_item_id\n,\n    \nparameters\n: {\n      \nend_date\n: \n2015-02-03\n,\n      \nstart_date\n: \n2014-01-01\n,\n      \nsub_item\n: \ncategory\n\n    },\n    \npath\n: \n/lboro/timeline/month/views/group/1\n\n  },\n  \ncode\n: \nMissingParams\n,\n  \nmessage\n: \nMissing required params: sub_item_id\n\n}", 
            "title": "Timeline"
        }, 
        {
            "location": "/Stats/timeline/#endpoints-for-retrieving-a-timeline", 
            "text": "This type of endpoint enables the retrieval of a timeline of the number of  views ,  downloads \nor  shares  for a specific item.   Authorization  Endpoint format  Request parameters  Examples", 
            "title": "Endpoints for retrieving a timeline"
        }, 
        {
            "location": "/Stats/timeline/#authorization", 
            "text": "Basic HTTP authentication is required for timeline endpoints within the scope of an institution.", 
            "title": "Authorization"
        }, 
        {
            "location": "/Stats/timeline/#endpoint-format", 
            "text": "For items outside an institution scope the endpoints have the format:  /timeline/{granularity}/{counter}/{item}/{item_id}  and inside an institution scope they have the format:  /{institution}/timeline/{granularity}{counter}/{item}/{item_id}  where  granularity  is one of  year ,  month ,  day  or  total \nand  counter  is one of  views ,  downloads  or  shares .  The results on this endpoint can be filtered further by a  start_date  and  end_date  and\na specified  category  or  item_type . By default,  start_date  and  end_date  are set\nto reflect the events of the last month. The supplementary filters can be provided in the\nrequest parameters.", 
            "title": "Endpoint format"
        }, 
        {
            "location": "/Stats/timeline/#request-parameters", 
            "text": "The following table describes the optional parameters:     Parameter  Comments      start_date  By default this is set to the 1st of the current month.    end_date  By default this is set to today.    sub_item  Can be one of  category  and  item_type . Acts as a filter on the result.    sub_item_id  Required if  sub_item  is also specified.", 
            "title": "Request parameters"
        }, 
        {
            "location": "/Stats/timeline/#examples", 
            "text": "Daily timeline of downloads for an unaffiliated article  Request  GET https://stats.figshare.com/timeline/day/downloads/article/23  Response  HTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n   timeline : {\n     2015-07-01 : 7,\n     2015-07-02 : 3,\n     2015-07-09 : 1,\n     2015-07-15 : 3,\n     2015-07-16 : 2,\n     2015-07-18 : 1\n  }\n}  Yearly timeline of views for an article associated to an institution  Request  GET https://stats.figshare.com/monash/timeline/year/views/article/2000000?start_date=2013-01-01 end_date=2015-08-01\nAuthorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh  Response  HTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n   timeline : {\n     2013 : 16,\n     2014 : 23,\n     2015 : 12\n  }\n}  Monthly timeline of shares for items in a specified institutional group, matching a specified category  Request  GET https://stats.figshare.com/monash/timeline/month/shares/group/10?sub_item=category sub_item_id=2 start_date=2014-01-03 end_date=2014-05-12\nAuthorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh  Response  HTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n   timeline : {\n     2014-01 : 3,\n     2014-02 : 5,\n     2014-03 : 18,\n     2014-04 : 4,\n     2014-05 : 2\n  }\n}  Daily timeline of views for datasets found in a specified institutional group  Request  GET https://stats.figshare.com/monash/timeline/day/views/group/10?sub_item=item_type sub_item_id=dataset start_date=2014-03-01 end_date=2014-03-04\nAuthorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh  Response  HTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n   timeline : {\n     2014-03-01 : 10,\n     2014-03-02 : 14,\n     2014-03-03 : 15,\n     2014-03-04 : 9\n  }\n}  Total timeline of views for a collection associated to an institution  Request  GET https://stats.figshare.com/lboro/timeline/total/views/collection/15?start_date=2014-01-02 end_date=2014-03-05\nAuthorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh  Response  HTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n   timeline : {\n     total : 10\n  }\n}  Timeline with missing request parameter  Request *  GET https://stats.figshare.com/lboro/timeline/month/views/group/1?sub_item=category start_date=2014-01-01 end_date=2015-02-03\nAuthorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh  Response  HTTP/1.1 400 Bad Request\nContent-Type: application/json; charset=UTF-8\n\n{\n   data : {\n     missing_params :  sub_item_id ,\n     parameters : {\n       end_date :  2015-02-03 ,\n       start_date :  2014-01-01 ,\n       sub_item :  category \n    },\n     path :  /lboro/timeline/month/views/group/1 \n  },\n   code :  MissingParams ,\n   message :  Missing required params: sub_item_id \n}", 
            "title": "Examples"
        }, 
        {
            "location": "/Stats/tops/", 
            "text": "Endpoints for retrieving \ntops\n\n\nThis type of endpoints enables the retrieval or rankings of the most viewed, downloaded or shared\nitems, over a specific period of time.\n\n\n\n\nAuthorization\n\n\nEndpoint format\n\n\nRequest parameters\n\n\nExamples\n\n\n\n\nAuthorization\n\n\nBasic HTTP authentication is required for timeline endpoints within the scope of an institution.\n\n\nEndpoint format\n\n\nFor items outside an institution scope the endpoints have the format:\n\n\n/top/{counter}/{item}\n\n\n\n\nand inside and institution scope they have the format:\n\n\n/{institution}/top/{counter}/{item}\n\n\n\n\nwhere \ncounter\n is one of \nview\n, \nshare\n or \ndownload\n.\n\n\nThe results on this endpoint can be filtered further by a specified \nsub_item\n\nwhich can be one of: \ncategory\n, \nitem_type\n or \nreferral\n. The results can also be filtered\nby a \nstart_date\n and \nend_date\n which by default are set to reflect the events of the last\nmonth \nONLY\n if a \nsub_item\n filter has been specified. Otherwise, the results will reflect\nthe total events.\nThe number of results in the ranking can be specified as the \ncount\n parameter which\nby default is set to\n10\n. The supplementary filters and options can be provided in the query\nparameters of the request.\n\n\nRequest parameters\n\n\nThe following table describes the optional parameters:\n\n\n\n\n\n\n\n\nParameter\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nstart_date\n\n\nBy default this is set to the 1st of the current month if a \nsub_item\n is specified\n\n\n\n\n\n\nend_date\n\n\nBy default this is set to today if a \nsub_item\n is specified.\n\n\n\n\n\n\nsub_item\n\n\nCan be one of \ncategory\n, \nitem_type\n or \nreferral\n. Acts as a filter on the result.\n\n\n\n\n\n\ncount\n\n\nBy default this is set to 10.\n\n\n\n\n\n\n\n\nExamples\n\n\nTop 10 most viewed unaffiliated articles in the last month\n\n\nRequest\n\n\nGET https://stats.figshare.com/top/views/article\n\n\n\n\nResponse\n\n\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n  \ntop\n: {\n    \n200341\n: 2341,\n    \n200134\n: 2111,\n    \n201342\n: 2001,\n    \n23144\n: 1930,\n    \n1998\n: 1900,\n    \n20023\n: 1802,\n    \n200321\n: 1720,\n    \n101342\n: 1517,\n    \n213454\n: 1516,\n    \n19341\n: 1516,\n  }\n}\n\n\n\n\nTop 3 most viewed categories in a specified institutional group in 2014\n\n\nRequest\n\n\nGET https://stats.figshare.com/monash/top/views/group?item_id=2\nsub_item=category\ncount=3\nstart_date=2014-01-01\nend_date=2014-12-31\nAuthorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh\n\n\n\n\nResponse\n\n\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n  \ntop\n: {\n    \n2\n: 12351,\n    \n7\n: 11001,\n    \n3\n: 10435\n  }\n}\n\n\n\n\nTop 2 referrals for a specific unaffiliated project in the last month\n\n\nRequest\n\n\nGET https://stats.figshare.com/top/views/project?item_id=13\ncount=2\nsub_item=referral\n\n\n\n\nResponse\n\n\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n  \nwww.google.com\n: 212,\n  \nwww.figshare.com\n: 175\n}\n\n\n\n\nTop 3 item types for shares related to a specific unaffiliated author\n\n\nRequest\n\n\nGET https://stats.figshare.com/top/shares/author?item_id=13456\ncount=3\nsub_item=item_type\n\n\n\n\nResponse\n\n\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n  \nfileset\n: 135,\n  \ncollection\n: 120,\n  \nfigure\n: 98\n}", 
            "title": "Tops"
        }, 
        {
            "location": "/Stats/tops/#endpoints-for-retrieving-tops", 
            "text": "This type of endpoints enables the retrieval or rankings of the most viewed, downloaded or shared\nitems, over a specific period of time.   Authorization  Endpoint format  Request parameters  Examples", 
            "title": "Endpoints for retrieving tops"
        }, 
        {
            "location": "/Stats/tops/#authorization", 
            "text": "Basic HTTP authentication is required for timeline endpoints within the scope of an institution.", 
            "title": "Authorization"
        }, 
        {
            "location": "/Stats/tops/#endpoint-format", 
            "text": "For items outside an institution scope the endpoints have the format:  /top/{counter}/{item}  and inside and institution scope they have the format:  /{institution}/top/{counter}/{item}  where  counter  is one of  view ,  share  or  download .  The results on this endpoint can be filtered further by a specified  sub_item \nwhich can be one of:  category ,  item_type  or  referral . The results can also be filtered\nby a  start_date  and  end_date  which by default are set to reflect the events of the last\nmonth  ONLY  if a  sub_item  filter has been specified. Otherwise, the results will reflect\nthe total events.\nThe number of results in the ranking can be specified as the  count  parameter which\nby default is set to 10 . The supplementary filters and options can be provided in the query\nparameters of the request.", 
            "title": "Endpoint format"
        }, 
        {
            "location": "/Stats/tops/#request-parameters", 
            "text": "The following table describes the optional parameters:     Parameter  Comments      start_date  By default this is set to the 1st of the current month if a  sub_item  is specified    end_date  By default this is set to today if a  sub_item  is specified.    sub_item  Can be one of  category ,  item_type  or  referral . Acts as a filter on the result.    count  By default this is set to 10.", 
            "title": "Request parameters"
        }, 
        {
            "location": "/Stats/tops/#examples", 
            "text": "Top 10 most viewed unaffiliated articles in the last month  Request  GET https://stats.figshare.com/top/views/article  Response  HTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n   top : {\n     200341 : 2341,\n     200134 : 2111,\n     201342 : 2001,\n     23144 : 1930,\n     1998 : 1900,\n     20023 : 1802,\n     200321 : 1720,\n     101342 : 1517,\n     213454 : 1516,\n     19341 : 1516,\n  }\n}  Top 3 most viewed categories in a specified institutional group in 2014  Request  GET https://stats.figshare.com/monash/top/views/group?item_id=2 sub_item=category count=3 start_date=2014-01-01 end_date=2014-12-31\nAuthorization: Basic dGhpcyBpcyBub3QgdGhlIHJlYWwgcGFzc3dvcmQsIGZvb2wh  Response  HTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n   top : {\n     2 : 12351,\n     7 : 11001,\n     3 : 10435\n  }\n}  Top 2 referrals for a specific unaffiliated project in the last month  Request  GET https://stats.figshare.com/top/views/project?item_id=13 count=2 sub_item=referral  Response  HTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n   www.google.com : 212,\n   www.figshare.com : 175\n}  Top 3 item types for shares related to a specific unaffiliated author  Request  GET https://stats.figshare.com/top/shares/author?item_id=13456 count=3 sub_item=item_type  Response  HTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n   fileset : 135,\n   collection : 120,\n   figure : 98\n}", 
            "title": "Examples"
        }, 
        {
            "location": "/Stats/totals/", 
            "text": "Endpoints for retrieving \ntotals\n\n\nThis type of endpoint provides the total number of \nviews\n, \ndownloads\n or \nshares\n.\n\n\n\n\nAuthorization\n\n\nEndpoint format\n\n\nExamples\n\n\n\n\nAuthorization\n\n\nNo authorization is required.\n\n\nEndpoint format\n\n\nFor items outside an institution scope the endpoints have the format:\n\n\n/total/{counter}/{item}/{item_id}\n\n\n\n\nand inside an institution scope they have the format:\n\n\n/{institution}/total/{counter}/{item}/{item_id}\n\n\n\n\nwhere \ncounter\n is one of \nviews\n, \ndownloads\n or \nshares\n.\n\n\nExamples\n\n\nNumber of views for an unaffiliated article\n\n\nRequest\n\n\nGET https://stats.figshare.com/total/views/article/23\n\n\n\n\nResponse\n\n\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n  \ntotals\n: 231\n}\n\n\n\n\nNumber of shares for items authored by a specific user\n\n\nRequest\n\n\nGET https://stats.figshare.com/total/shares/author/15\n\n\n\n\nResponse\n\n\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n  \ntotals\n: 134\n}\n\n\n\n\nNumber of downloads for items in an institutional group\n\n\nRequest\n\n\nGET https://stats.figshare.com/monash/total/downloads/group/10\n\n\n\n\nResponse\n\n\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n  \ntotals\n: 5\n}\n\n\n\n\nNumber of views for a collection associated to an institution\n\n\nRequest\n\n\nGET https://stats.figshare.com/lboro/total/views/collection/15\n\n\n\n\nResponse\n\n\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n  \ntotals\n: 3\n}\n\n\n\n\nNumber of likes for an unaffiliated article\n\n\nRequest\n\n\nGET https://stats.figshare.com/total/likes/article/215\n\n\n\n\nResponse\n\n\nHTTP/1.1 400 Bad Request\nContent-Type: application/json; charset=UTF-8\n\n{\n  \ndata\n: {\n    \nextra\n: \nCounter type not supported: likes\n,\n    \ninvalid_params\n: \ncounter\n\n  },\n  \ncode\n: \nInvalidParams\n,\n  \nmessage\n: \nInvalid or unsupported params: counter\n\n}", 
            "title": "Totals"
        }, 
        {
            "location": "/Stats/totals/#endpoints-for-retrieving-totals", 
            "text": "This type of endpoint provides the total number of  views ,  downloads  or  shares .   Authorization  Endpoint format  Examples", 
            "title": "Endpoints for retrieving totals"
        }, 
        {
            "location": "/Stats/totals/#authorization", 
            "text": "No authorization is required.", 
            "title": "Authorization"
        }, 
        {
            "location": "/Stats/totals/#endpoint-format", 
            "text": "For items outside an institution scope the endpoints have the format:  /total/{counter}/{item}/{item_id}  and inside an institution scope they have the format:  /{institution}/total/{counter}/{item}/{item_id}  where  counter  is one of  views ,  downloads  or  shares .", 
            "title": "Endpoint format"
        }, 
        {
            "location": "/Stats/totals/#examples", 
            "text": "Number of views for an unaffiliated article  Request  GET https://stats.figshare.com/total/views/article/23  Response  HTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n   totals : 231\n}  Number of shares for items authored by a specific user  Request  GET https://stats.figshare.com/total/shares/author/15  Response  HTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n   totals : 134\n}  Number of downloads for items in an institutional group  Request  GET https://stats.figshare.com/monash/total/downloads/group/10  Response  HTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n   totals : 5\n}  Number of views for a collection associated to an institution  Request  GET https://stats.figshare.com/lboro/total/views/collection/15  Response  HTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n   totals : 3\n}  Number of likes for an unaffiliated article  Request  GET https://stats.figshare.com/total/likes/article/215  Response  HTTP/1.1 400 Bad Request\nContent-Type: application/json; charset=UTF-8\n\n{\n   data : {\n     extra :  Counter type not supported: likes ,\n     invalid_params :  counter \n  },\n   code :  InvalidParams ,\n   message :  Invalid or unsupported params: counter \n}", 
            "title": "Examples"
        }
    ]
}